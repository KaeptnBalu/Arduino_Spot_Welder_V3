
Spot_Welder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000160c  08002598  08002598  00012598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba4  08003ba4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba4  08003ba4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000030  08003bdc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08003bdc  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc4a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a98  00000000  00000000  0002dca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002aad  00000000  00000000  0003073a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000760  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f0  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d083  00000000  00000000  00034338  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009f5b  00000000  00000000  000413bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00041ce7  00000000  00000000  0004b316  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008cffd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000123c  00000000  00000000  0008d078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002580 	.word	0x08002580

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08002580 	.word	0x08002580

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	a801      	add	r0, sp, #4
 800023c:	f002 f965 	bl	800250a <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8000242:	4c16      	ldr	r4, [pc, #88]	; (800029c <MX_ADC_Init+0x68>)
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_ADC_Init+0x6c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000246:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000248:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 800024a:	2208      	movs	r2, #8
  hadc.Instance = ADC1;
 800024c:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000252:	60a2      	str	r2, [r4, #8]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	61e1      	str	r1, [r4, #28]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000256:	3a07      	subs	r2, #7
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000258:	1d61      	adds	r1, r4, #5
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800025a:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025c:	6063      	str	r3, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000262:	7623      	strb	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000264:	7663      	strb	r3, [r4, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000266:	76a2      	strb	r2, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	76e3      	strb	r3, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800026a:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026c:	77cb      	strb	r3, [r1, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000270:	f001 fb98 	bl	80019a4 <HAL_ADC_Init>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8000278:	f000 f990 	bl	800059c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027c:	2280      	movs	r2, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 800027e:	2305      	movs	r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000280:	0152      	lsls	r2, r2, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000282:	a901      	add	r1, sp, #4
 8000284:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000286:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000288:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800028a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028c:	f001 fcbe 	bl	8001c0c <HAL_ADC_ConfigChannel>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC_Init+0x64>
  {
    Error_Handler();
 8000294:	f000 f982 	bl	800059c <Error_Handler>
  }

}
 8000298:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000480 	.word	0x20000480
 80002a0:	40012400 	.word	0x40012400

080002a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	0004      	movs	r4, r0
 80002a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	2214      	movs	r2, #20
 80002ac:	2100      	movs	r1, #0
 80002ae:	a803      	add	r0, sp, #12
 80002b0:	f002 f92b 	bl	800250a <memset>
  if(adcHandle->Instance==ADC1)
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <HAL_ADC_MspInit+0x54>)
 80002b6:	6822      	ldr	r2, [r4, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d11b      	bne.n	80002f4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <HAL_ADC_MspInit+0x58>)
 80002c0:	0080      	lsls	r0, r0, #2
 80002c2:	6999      	ldr	r1, [r3, #24]
 80002c4:	4301      	orrs	r1, r0
 80002c6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ca:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ce:	4002      	ands	r2, r0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	695a      	ldr	r2, [r3, #20]
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002d6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002de:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	400b      	ands	r3, r1
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002e6:	2320      	movs	r3, #32
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	3b1d      	subs	r3, #29
 80002ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f001 fd4e 	bl	8001d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002f4:	b008      	add	sp, #32
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	40012400 	.word	0x40012400
 80002fc:	40021000 	.word	0x40021000

08000300 <Button_Attach>:
static Button_Struct_t *Button_Struct_PTR_Array[MAX_BUTTONS];

static uint8_t Attached_Buttons = 0;

uint8_t Button_Attach(Button_Struct_t *Button_Struct_PTR)
    {
 8000300:	b530      	push	{r4, r5, lr}
    //init GPIOs as input
    if (Attached_Buttons < MAX_BUTTONS)
 8000302:	4d24      	ldr	r5, [pc, #144]	; (8000394 <Button_Attach+0x94>)
    {
 8000304:	0004      	movs	r4, r0
    if (Attached_Buttons < MAX_BUTTONS)
 8000306:	782b      	ldrb	r3, [r5, #0]
    {
 8000308:	b08b      	sub	sp, #44	; 0x2c

	}
    else
	{
	//error
	return (255); //return error
 800030a:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Buttons < MAX_BUTTONS)
 800030c:	2b04      	cmp	r3, #4
 800030e:	d83c      	bhi.n	800038a <Button_Attach+0x8a>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000310:	2080      	movs	r0, #128	; 0x80
 8000312:	4b21      	ldr	r3, [pc, #132]	; (8000398 <Button_Attach+0x98>)
 8000314:	0300      	lsls	r0, r0, #12
 8000316:	6959      	ldr	r1, [r3, #20]
 8000318:	4301      	orrs	r1, r0
 800031a:	6159      	str	r1, [r3, #20]
 800031c:	695a      	ldr	r2, [r3, #20]
 800031e:	4002      	ands	r2, r0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000320:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000322:	9201      	str	r2, [sp, #4]
 8000324:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000326:	6959      	ldr	r1, [r3, #20]
 8000328:	0340      	lsls	r0, r0, #13
 800032a:	4301      	orrs	r1, r0
 800032c:	6159      	str	r1, [r3, #20]
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	4002      	ands	r2, r0
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000332:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000334:	9202      	str	r2, [sp, #8]
 8000336:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000338:	6959      	ldr	r1, [r3, #20]
 800033a:	0280      	lsls	r0, r0, #10
 800033c:	4301      	orrs	r1, r0
 800033e:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000340:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000342:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000344:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000346:	4002      	ands	r2, r0
 8000348:	9203      	str	r2, [sp, #12]
 800034a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	430a      	orrs	r2, r1
 8000350:	615a      	str	r2, [r3, #20]
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	400b      	ands	r3, r1
 8000356:	9304      	str	r3, [sp, #16]
 8000358:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 800035a:	8823      	ldrh	r3, [r4, #0]
 800035c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	2300      	movs	r3, #0
 8000360:	9306      	str	r3, [sp, #24]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 8000362:	7a23      	ldrb	r3, [r4, #8]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d112      	bne.n	800038e <Button_Attach+0x8e>
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000368:	3301      	adds	r3, #1
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 800036a:	6860      	ldr	r0, [r4, #4]
 800036c:	a905      	add	r1, sp, #20
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800036e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000370:	f001 fd0e 	bl	8001d90 <HAL_GPIO_Init>
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000374:	2300      	movs	r3, #0
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000376:	7828      	ldrb	r0, [r5, #0]
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000378:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 800037a:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 800037c:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 800037e:	6123      	str	r3, [r4, #16]
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <Button_Attach+0x9c>)
 8000382:	0082      	lsls	r2, r0, #2
 8000384:	50d4      	str	r4, [r2, r3]
	Attached_Buttons++;
 8000386:	1c43      	adds	r3, r0, #1
 8000388:	702b      	strb	r3, [r5, #0]
	}

    }
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd30      	pop	{r4, r5, pc}
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800038e:	2302      	movs	r3, #2
 8000390:	e7eb      	b.n	800036a <Button_Attach+0x6a>
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	2000004c 	.word	0x2000004c
 8000398:	40021000 	.word	0x40021000
 800039c:	20000054 	.word	0x20000054

080003a0 <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
    {
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    static volatile uint32_t Button_Scan_Time_Stamp = 0;
    Button_Struct_t *PTR = NULL;

    if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 80003a2:	f001 fa9b 	bl	80018dc <HAL_GetTick>
 80003a6:	4c2c      	ldr	r4, [pc, #176]	; (8000458 <Button_Scan+0xb8>)
 80003a8:	6823      	ldr	r3, [r4, #0]
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	2804      	cmp	r0, #4
 80003ae:	d909      	bls.n	80003c4 <Button_Scan+0x24>
	{
	Button_Scan_Time_Stamp = HAL_GetTick();
 80003b0:	f001 fa94 	bl	80018dc <HAL_GetTick>

	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003b4:	2500      	movs	r5, #0
		    PTR->Button_Released_Ticks = 0;

		    }
		else if (PTR->Button_Event != Button_Long_Pressed)
		    {   //long pressed detected
		    PTR->Button_Event = Button_Long_Pressed;
 80003b6:	2703      	movs	r7, #3
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80003b8:	26ff      	movs	r6, #255	; 0xff
	Button_Scan_Time_Stamp = HAL_GetTick();
 80003ba:	6020      	str	r0, [r4, #0]
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <Button_Scan+0xbc>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d800      	bhi.n	80003c6 <Button_Scan+0x26>
			}
		    }
		}
	    }
	}
    }
 80003c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    PTR = Button_Struct_PTR_Array[Index];
 80003c6:	4b26      	ldr	r3, [pc, #152]	; (8000460 <Button_Scan+0xc0>)
 80003c8:	00aa      	lsls	r2, r5, #2
 80003ca:	58d4      	ldr	r4, [r2, r3]
	    if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port, PTR->Button_Pin)
 80003cc:	8821      	ldrh	r1, [r4, #0]
 80003ce:	6860      	ldr	r0, [r4, #4]
 80003d0:	f001 fd8e 	bl	8001ef0 <HAL_GPIO_ReadPin>
 80003d4:	7a22      	ldrb	r2, [r4, #8]
 80003d6:	68e3      	ldr	r3, [r4, #12]
 80003d8:	4282      	cmp	r2, r0
 80003da:	d11c      	bne.n	8000416 <Button_Scan+0x76>
		PTR->Button_Pressed_Ticks++;	//
 80003dc:	3301      	adds	r3, #1
 80003de:	60e3      	str	r3, [r4, #12]
		if (PTR->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_DELAY)
 80003e0:	2bc7      	cmp	r3, #199	; 0xc7
 80003e2:	d80b      	bhi.n	80003fc <Button_Scan+0x5c>
		    if (PTR->Button_Released_Ticks //repressed detected
 80003e4:	6923      	ldr	r3, [r4, #16]
 80003e6:	2b1d      	cmp	r3, #29
 80003e8:	d806      	bhi.n	80003f8 <Button_Scan+0x58>
			PTR->Button_Event = Button_Repressed;
 80003ea:	2302      	movs	r3, #2
			PTR->Button_Event = Button_Pressed;
 80003ec:	7263      	strb	r3, [r4, #9]
		    PTR->Button_Released_Ticks = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	6123      	str	r3, [r4, #16]
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003f2:	3501      	adds	r5, #1
 80003f4:	b2ed      	uxtb	r5, r5
 80003f6:	e7e1      	b.n	80003bc <Button_Scan+0x1c>
			PTR->Button_Event = Button_Pressed;
 80003f8:	2301      	movs	r3, #1
 80003fa:	e7f7      	b.n	80003ec <Button_Scan+0x4c>
		else if (PTR->Button_Event != Button_Long_Pressed)
 80003fc:	7a63      	ldrb	r3, [r4, #9]
 80003fe:	2b03      	cmp	r3, #3
 8000400:	d0f7      	beq.n	80003f2 <Button_Scan+0x52>
		    if (PTR->Callback != NULL)
 8000402:	69a3      	ldr	r3, [r4, #24]
		    PTR->Button_Event = Button_Long_Pressed;
 8000404:	7267      	strb	r7, [r4, #9]
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000406:	7526      	strb	r6, [r4, #20]
		    if (PTR->Callback != NULL)
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f2      	beq.n	80003f2 <Button_Scan+0x52>
			PTR->Callback(PTR->Button_Clicked_Count);
 800040c:	0030      	movs	r0, r6
 800040e:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	7523      	strb	r3, [r4, #20]
 8000414:	e7ed      	b.n	80003f2 <Button_Scan+0x52>
		PTR->Button_Released_Ticks++;
 8000416:	6922      	ldr	r2, [r4, #16]
 8000418:	3201      	adds	r2, #1
 800041a:	6122      	str	r2, [r4, #16]
		if (PTR->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 800041c:	2b0a      	cmp	r3, #10
 800041e:	d907      	bls.n	8000430 <Button_Scan+0x90>
		    PTR->Button_Pressed_Ticks = 0;
 8000420:	2100      	movs	r1, #0
		    if (PTR->Button_Event == Button_Repressed)
 8000422:	7a63      	ldrb	r3, [r4, #9]
		    PTR->Button_Pressed_Ticks = 0;
 8000424:	60e1      	str	r1, [r4, #12]
		    if (PTR->Button_Event == Button_Repressed)
 8000426:	2b02      	cmp	r3, #2
 8000428:	d110      	bne.n	800044c <Button_Scan+0xac>
			PTR->Button_Clicked_Count++;
 800042a:	7d23      	ldrb	r3, [r4, #20]
 800042c:	3301      	adds	r3, #1
			PTR->Button_Clicked_Count = 1;
 800042e:	7523      	strb	r3, [r4, #20]
		if (PTR->Button_Released_Ticks > BUTTON_CLICKED_DELAY)
 8000430:	2a32      	cmp	r2, #50	; 0x32
 8000432:	d9de      	bls.n	80003f2 <Button_Scan+0x52>
		    if (PTR->Callback != NULL
 8000434:	69a3      	ldr	r3, [r4, #24]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0db      	beq.n	80003f2 <Button_Scan+0x52>
			    && PTR->Button_Event != Button_Idle)
 800043a:	7a62      	ldrb	r2, [r4, #9]
 800043c:	2a00      	cmp	r2, #0
 800043e:	d0d8      	beq.n	80003f2 <Button_Scan+0x52>
			PTR->Callback(PTR->Button_Clicked_Count);
 8000440:	7d20      	ldrb	r0, [r4, #20]
 8000442:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	7523      	strb	r3, [r4, #20]
			PTR->Button_Event = Button_Idle;
 8000448:	7263      	strb	r3, [r4, #9]
 800044a:	e7d2      	b.n	80003f2 <Button_Scan+0x52>
		    else if (PTR->Button_Event == Button_Pressed)
 800044c:	2b01      	cmp	r3, #1
 800044e:	d0ee      	beq.n	800042e <Button_Scan+0x8e>
		    else if (PTR->Button_Event == Button_Long_Pressed)
 8000450:	2b03      	cmp	r3, #3
 8000452:	d1ed      	bne.n	8000430 <Button_Scan+0x90>
			PTR->Button_Event = Button_Idle;
 8000454:	7261      	strb	r1, [r4, #9]
 8000456:	e7eb      	b.n	8000430 <Button_Scan+0x90>
 8000458:	20000050 	.word	0x20000050
 800045c:	2000004c 	.word	0x2000004c
 8000460:	20000054 	.word	0x20000054

08000464 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	2214      	movs	r2, #20
 800046a:	2100      	movs	r1, #0
 800046c:	a803      	add	r0, sp, #12
 800046e:	f002 f84c 	bl	800250a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	2080      	movs	r0, #128	; 0x80
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <MX_GPIO_Init+0xb0>)
 8000476:	03c0      	lsls	r0, r0, #15
 8000478:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800047a:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047c:	4301      	orrs	r1, r0
 800047e:	6159      	str	r1, [r3, #20]
 8000480:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000484:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	6959      	ldr	r1, [r3, #20]
 800048e:	0280      	lsls	r0, r0, #10
 8000490:	4301      	orrs	r1, r0
 8000492:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000496:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4002      	ands	r2, r0
 800049e:	9201      	str	r2, [sp, #4]
 80004a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80004a4:	4f1c      	ldr	r7, [pc, #112]	; (8000518 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	430a      	orrs	r2, r1
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80004ac:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80004b4:	0039      	movs	r1, r7
 80004b6:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80004ba:	f001 fd1f 	bl	8001efc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004be:	a903      	add	r1, sp, #12
 80004c0:	4816      	ldr	r0, [pc, #88]	; (800051c <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004c2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004c8:	f001 fc62 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PA10 */
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_GPIO_Init+0xbc>)
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	a903      	add	r1, sp, #12
 80004d0:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 80004d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f001 fc5a 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = Gate_Driver_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	a903      	add	r1, sp, #12
 80004e0:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Gate_Driver_Pin|GPIO_PIN_9;
 80004e4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f001 fc51 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ee:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	a903      	add	r1, sp, #12
 80004f2:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f001 fc49 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 80004fe:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 8000500:	a903      	add	r1, sp, #12
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 8000504:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000506:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 800050a:	f001 fc41 	bl	8001d90 <HAL_GPIO_Init>

}
 800050e:	b009      	add	sp, #36	; 0x24
 8000510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000
 8000518:	00000202 	.word	0x00000202
 800051c:	48001400 	.word	0x48001400
 8000520:	000004d1 	.word	0x000004d1
 8000524:	48000400 	.word	0x48000400

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	2510      	movs	r5, #16
{
 800052c:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	222c      	movs	r2, #44	; 0x2c
 8000530:	2100      	movs	r1, #0
 8000532:	a805      	add	r0, sp, #20
 8000534:	f001 ffe9 	bl	800250a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	002a      	movs	r2, r5
 800053a:	2100      	movs	r1, #0
 800053c:	4668      	mov	r0, sp
 800053e:	f001 ffe4 	bl	800250a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000542:	2312      	movs	r3, #18
 8000544:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000546:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800054c:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800054e:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000554:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000558:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f001 fcd4 	bl	8001f08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	2307      	movs	r3, #7
 8000562:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	0021      	movs	r1, r4
 8000568:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000570:	f001 fefe 	bl	8002370 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000574:	b011      	add	sp, #68	; 0x44
 8000576:	bd30      	pop	{r4, r5, pc}

08000578 <main>:
{
 8000578:	b510      	push	{r4, lr}
  HAL_Init();
 800057a:	f001 f993 	bl	80018a4 <HAL_Init>
  SystemClock_Config();
 800057e:	f7ff ffd3 	bl	8000528 <SystemClock_Config>
  MX_GPIO_Init();
 8000582:	f7ff ff6f 	bl	8000464 <MX_GPIO_Init>
  MX_ADC_Init();
 8000586:	f7ff fe55 	bl	8000234 <MX_ADC_Init>
  HAL_ADC_Start(&hadc);
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <main+0x20>)
 800058c:	f001 fab0 	bl	8001af0 <HAL_ADC_Start>
  Spot_Welder_Main();
 8000590:	f000 ff92 	bl	80014b8 <Spot_Welder_Main>
 8000594:	e7fe      	b.n	8000594 <main+0x1c>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	20000480 	.word	0x20000480

0800059c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800059c:	4770      	bx	lr
	...

080005a0 <Encoder_Button_Callback>:
    Button_Scan();
    }

void Encoder_Button_Callback(uint8_t Clicked_Count)
    {
    Encoder_Clicks = Clicked_Count;
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <Encoder_Button_Callback+0x8>)
 80005a2:	7018      	strb	r0, [r3, #0]
    }
 80005a4:	4770      	bx	lr
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	20000010 	.word	0x20000010

080005ac <Systic_Callback>:
    {
 80005ac:	b510      	push	{r4, lr}
    Encoder_Scan();
 80005ae:	f000 fd61 	bl	8001074 <Encoder_Scan>
    Button_Scan();
 80005b2:	f7ff fef5 	bl	80003a0 <Button_Scan>
    }
 80005b6:	bd10      	pop	{r4, pc}

080005b8 <Menu_Change_Page>:

void Menu_Change_Page(uint8_t page_no)
    {

    Refresh_Screen = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <Menu_Change_Page+0x3c>)
 80005bc:	7013      	strb	r3, [r2, #0]

    switch (page_no)
 80005be:	4298      	cmp	r0, r3
 80005c0:	d002      	beq.n	80005c8 <Menu_Change_Page+0x10>
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d00c      	beq.n	80005e0 <Menu_Change_Page+0x28>
	Page_Screen = 1;
	Screens_In_Page = 4;
	break;
	}

    }
 80005c6:	4770      	bx	lr
	Show_Page = Show_Page1;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <Menu_Change_Page+0x40>)
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <Menu_Change_Page+0x44>)
 80005cc:	601a      	str	r2, [r3, #0]
	Enter_Page_Screen = Enter_Page1_Screen;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <Menu_Change_Page+0x48>)
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <Menu_Change_Page+0x4c>)
 80005d2:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <Menu_Change_Page+0x50>)
 80005d6:	7018      	strb	r0, [r3, #0]
	Screens_In_Page = 4;
 80005d8:	2204      	movs	r2, #4
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <Menu_Change_Page+0x54>)
 80005dc:	701a      	strb	r2, [r3, #0]
    }
 80005de:	e7f2      	b.n	80005c6 <Menu_Change_Page+0xe>
	Show_Page = Show_Page2;
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <Menu_Change_Page+0x40>)
 80005e2:	490b      	ldr	r1, [pc, #44]	; (8000610 <Menu_Change_Page+0x58>)
 80005e4:	6011      	str	r1, [r2, #0]
	Enter_Page_Screen = Enter_Page2_Screen;
 80005e6:	4a06      	ldr	r2, [pc, #24]	; (8000600 <Menu_Change_Page+0x48>)
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <Menu_Change_Page+0x5c>)
 80005ea:	6011      	str	r1, [r2, #0]
	Page_Screen = 1;
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <Menu_Change_Page+0x50>)
 80005ee:	7013      	strb	r3, [r2, #0]
 80005f0:	e7f2      	b.n	80005d8 <Menu_Change_Page+0x20>
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000068 	.word	0x20000068
 80005f8:	200004f4 	.word	0x200004f4
 80005fc:	080008e5 	.word	0x080008e5
 8000600:	200004f8 	.word	0x200004f8
 8000604:	08000cd9 	.word	0x08000cd9
 8000608:	20000011 	.word	0x20000011
 800060c:	20000018 	.word	0x20000018
 8000610:	08000ed1 	.word	0x08000ed1
 8000614:	08000f89 	.word	0x08000f89

08000618 <Menu_Init>:

void Menu_Init()
    {
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <Menu_Init+0x48>)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <Menu_Init+0x4c>)
    {
 800061c:	b510      	push	{r4, lr}
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 800061e:	6003      	str	r3, [r0, #0]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
    Encoder.Encoder_Pin_1 = ENCDR_A_Pin;
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	6043      	str	r3, [r0, #4]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
 8000626:	6083      	str	r3, [r0, #8]
    Encoder.Encoder_Pin_1_Port = ENCDR_A_GPIO_Port;
    Encoder_Attach(&Encoder);
 8000628:	f000 fccc 	bl	8000fc4 <Encoder_Attach>

    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 800062c:	2302      	movs	r3, #2
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
    Encoder_Button.Button_Pressed_Logic = LOW;
 800062e:	2400      	movs	r4, #0
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <Menu_Init+0x50>)
 8000632:	8003      	strh	r3, [r0, #0]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <Menu_Init+0x54>)
    Encoder_Button.Button_Pressed_Logic = LOW;
 8000636:	7204      	strb	r4, [r0, #8]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000638:	6043      	str	r3, [r0, #4]
    Encoder_Button.Callback = Encoder_Button_Callback;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <Menu_Init+0x58>)
 800063c:	6183      	str	r3, [r0, #24]
    Button_Attach(&Encoder_Button);
 800063e:	f7ff fe5f 	bl	8000300 <Button_Attach>
	Show_Page = Show_Page1;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <Menu_Init+0x5c>)
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <Menu_Init+0x60>)
 8000646:	601a      	str	r2, [r3, #0]
	Enter_Page_Screen = Enter_Page1_Screen;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <Menu_Init+0x64>)
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <Menu_Init+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 800064e:	2201      	movs	r2, #1
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <Menu_Init+0x6c>)
 8000652:	701a      	strb	r2, [r3, #0]
	Screens_In_Page = 4;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <Menu_Init+0x70>)
 8000656:	3203      	adds	r2, #3
 8000658:	701a      	strb	r2, [r3, #0]

    Menu_Change_Page(1);
    Refresh_Screen = 0;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <Menu_Init+0x74>)
 800065c:	701c      	strb	r4, [r3, #0]
    }
 800065e:	bd10      	pop	{r4, pc}
 8000660:	200004dc 	.word	0x200004dc
 8000664:	00800040 	.word	0x00800040
 8000668:	200004c0 	.word	0x200004c0
 800066c:	48000400 	.word	0x48000400
 8000670:	080005a1 	.word	0x080005a1
 8000674:	200004f4 	.word	0x200004f4
 8000678:	080008e5 	.word	0x080008e5
 800067c:	200004f8 	.word	0x200004f8
 8000680:	08000cd9 	.word	0x08000cd9
 8000684:	20000011 	.word	0x20000011
 8000688:	20000018 	.word	0x20000018
 800068c:	20000068 	.word	0x20000068

08000690 <Menu_Loop>:

void Menu_Loop()
    {
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    static uint8_t in_screen = 0;


    int16_t count = 0;
    count = Encoder_Get_Count(&Encoder);
 8000692:	4e30      	ldr	r6, [pc, #192]	; (8000754 <Menu_Loop+0xc4>)
 8000694:	0030      	movs	r0, r6
 8000696:	f000 fd4b 	bl	8001130 <Encoder_Get_Count>
    Encoder_Set_Count(&Encoder, 0);
 800069a:	2100      	movs	r1, #0
    count = Encoder_Get_Count(&Encoder);
 800069c:	0007      	movs	r7, r0
    Encoder_Set_Count(&Encoder, 0);
 800069e:	0030      	movs	r0, r6
 80006a0:	f000 fd4b 	bl	800113a <Encoder_Set_Count>

    if (!in_screen)
 80006a4:	4c2c      	ldr	r4, [pc, #176]	; (8000758 <Menu_Loop+0xc8>)
 80006a6:	4d2d      	ldr	r5, [pc, #180]	; (800075c <Menu_Loop+0xcc>)
 80006a8:	7823      	ldrb	r3, [r4, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d138      	bne.n	8000720 <Menu_Loop+0x90>
	{

	if (count < 0)
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	da2a      	bge.n	8000708 <Menu_Loop+0x78>
	    {
	    Page_Screen++;
 80006b2:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <Menu_Loop+0xd0>)
	    if(Page_Screen > Screens_In_Page)
 80006b4:	492b      	ldr	r1, [pc, #172]	; (8000764 <Menu_Loop+0xd4>)
	    Page_Screen++;
 80006b6:	7813      	ldrb	r3, [r2, #0]
	    if(Page_Screen > Screens_In_Page)
 80006b8:	7809      	ldrb	r1, [r1, #0]
	    Page_Screen++;
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	7013      	strb	r3, [r2, #0]
	    if(Page_Screen > Screens_In_Page)
 80006c0:	428b      	cmp	r3, r1
 80006c2:	d900      	bls.n	80006c6 <Menu_Loop+0x36>
		{
		Page_Screen = Screens_In_Page;
 80006c4:	7011      	strb	r1, [r2, #0]
	    Page_Screen--;
	    if(Page_Screen == 0)
		{
		Page_Screen = 1;
		}
	    Show_Page(Page_Screen);
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <Menu_Loop+0xd8>)
 80006c8:	7810      	ldrb	r0, [r2, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4798      	blx	r3
	    }

	if (Encoder_Clicks == 1)
 80006ce:	782b      	ldrb	r3, [r5, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10d      	bne.n	80006f0 <Menu_Loop+0x60>
	    {
	    Encoder_Clicks = 0;
 80006d4:	2700      	movs	r7, #0
	    in_screen = Enter_Page_Screen(Page_Screen, 0, 0);
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <Menu_Loop+0xd0>)
 80006d8:	0039      	movs	r1, r7
 80006da:	7818      	ldrb	r0, [r3, #0]
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <Menu_Loop+0xdc>)
 80006de:	003a      	movs	r2, r7
 80006e0:	681b      	ldr	r3, [r3, #0]
	    Encoder_Clicks = 0;
 80006e2:	702f      	strb	r7, [r5, #0]
	    in_screen = Enter_Page_Screen(Page_Screen, 0, 0);
 80006e4:	4798      	blx	r3
	    Encoder_Set_Count(&Encoder, 0);
 80006e6:	0039      	movs	r1, r7
	    in_screen = Enter_Page_Screen(Page_Screen, 0, 0);
 80006e8:	7020      	strb	r0, [r4, #0]
	    Encoder_Set_Count(&Encoder, 0);
 80006ea:	0030      	movs	r0, r6
 80006ec:	f000 fd25 	bl	800113a <Encoder_Set_Count>
	    }

	if(Refresh_Screen)
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <Menu_Loop+0xe0>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d006      	beq.n	8000706 <Menu_Loop+0x76>
	    {
	    Refresh_Screen = 0;
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	    Show_Page(Page_Screen);
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <Menu_Loop+0xd0>)
 80006fe:	7818      	ldrb	r0, [r3, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <Menu_Loop+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4798      	blx	r3
	    {
	    in_screen = Enter_Page_Screen(Page_Screen, Encoder_Clicks, count);
	    }
	}

    }
 8000706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (count > 0)
 8000708:	2f00      	cmp	r7, #0
 800070a:	d0e0      	beq.n	80006ce <Menu_Loop+0x3e>
	    Page_Screen--;
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <Menu_Loop+0xd0>)
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	3b01      	subs	r3, #1
 8000712:	b2db      	uxtb	r3, r3
	    if(Page_Screen == 0)
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <Menu_Loop+0x8c>
		Page_Screen = 1;
 8000718:	7013      	strb	r3, [r2, #0]
 800071a:	e7d4      	b.n	80006c6 <Menu_Loop+0x36>
 800071c:	2301      	movs	r3, #1
 800071e:	e7fb      	b.n	8000718 <Menu_Loop+0x88>
 8000720:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <Menu_Loop+0xd0>)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <Menu_Loop+0xdc>)
	if (Encoder_Clicks == 1 || count)
 8000724:	7829      	ldrb	r1, [r5, #0]
 8000726:	7810      	ldrb	r0, [r2, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
	    in_screen = Enter_Page_Screen(Page_Screen, Encoder_Clicks, count);
 800072a:	003a      	movs	r2, r7
	if (Encoder_Clicks == 1 || count)
 800072c:	2901      	cmp	r1, #1
 800072e:	d001      	beq.n	8000734 <Menu_Loop+0xa4>
 8000730:	2f00      	cmp	r7, #0
 8000732:	d00b      	beq.n	800074c <Menu_Loop+0xbc>
	    in_screen = Enter_Page_Screen(Page_Screen, Encoder_Clicks, count);
 8000734:	4798      	blx	r3
	    Encoder_Set_Count(&Encoder, 0);
 8000736:	2100      	movs	r1, #0
	    in_screen = Enter_Page_Screen(Page_Screen, Encoder_Clicks, count);
 8000738:	7020      	strb	r0, [r4, #0]
	    Encoder_Set_Count(&Encoder, 0);
 800073a:	0030      	movs	r0, r6
 800073c:	f000 fcfd 	bl	800113a <Encoder_Set_Count>
	    Encoder_Clicks = 0;
 8000740:	2300      	movs	r3, #0
	    Refresh_Screen = 1;
 8000742:	2201      	movs	r2, #1
	    Encoder_Clicks = 0;
 8000744:	702b      	strb	r3, [r5, #0]
	    Refresh_Screen = 1;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <Menu_Loop+0xe0>)
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e7dc      	b.n	8000706 <Menu_Loop+0x76>
	    in_screen = Enter_Page_Screen(Page_Screen, Encoder_Clicks, count);
 800074c:	4798      	blx	r3
 800074e:	7020      	strb	r0, [r4, #0]
    }
 8000750:	e7d9      	b.n	8000706 <Menu_Loop+0x76>
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	200004dc 	.word	0x200004dc
 8000758:	20000069 	.word	0x20000069
 800075c:	20000010 	.word	0x20000010
 8000760:	20000011 	.word	0x20000011
 8000764:	20000018 	.word	0x20000018
 8000768:	200004f4 	.word	0x200004f4
 800076c:	200004f8 	.word	0x200004f8
 8000770:	20000068 	.word	0x20000068

08000774 <Show_Page1_Screen1>:
 */

#include "menu_main.h"

void Show_Page1_Screen1()
    {
 8000774:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 ff00 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800077c:	2100      	movs	r1, #0
 800077e:	0008      	movs	r0, r1
 8000780:	f001 f818 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, Black);
 8000784:	4c0e      	ldr	r4, [pc, #56]	; (80007c0 <Show_Page1_Screen1+0x4c>)
 8000786:	2300      	movs	r3, #0
 8000788:	6862      	ldr	r2, [r4, #4]
 800078a:	6821      	ldr	r1, [r4, #0]
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <Show_Page1_Screen1+0x50>)
 800078e:	f000 fffd 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8000792:	2114      	movs	r1, #20
 8000794:	2000      	movs	r0, #0
 8000796:	f001 f80d 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 800079a:	2301      	movs	r3, #1
 800079c:	6821      	ldr	r1, [r4, #0]
 800079e:	6862      	ldr	r2, [r4, #4]
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <Show_Page1_Screen1+0x54>)
 80007a2:	f000 fff3 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80007a6:	2128      	movs	r1, #40	; 0x28
 80007a8:	2000      	movs	r0, #0
 80007aa:	f001 f803 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80007ae:	cc06      	ldmia	r4!, {r1, r2}
 80007b0:	2301      	movs	r3, #1
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <Show_Page1_Screen1+0x58>)
 80007b4:	f000 ffea 	bl	800178c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80007b8:	f000 feee 	bl	8001598 <ssd1306_UpdateScreen>
    }
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08003a9d 	.word	0x08003a9d
 80007c8:	08003a86 	.word	0x08003a86
 80007cc:	08003aa2 	.word	0x08003aa2

080007d0 <Show_Page1_Screen2>:


void Show_Page1_Screen2()
    {
 80007d0:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fed2 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80007d8:	2100      	movs	r1, #0
 80007da:	0008      	movs	r0, r1
 80007dc:	f000 ffea 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 80007e0:	4c0e      	ldr	r4, [pc, #56]	; (800081c <Show_Page1_Screen2+0x4c>)
 80007e2:	2301      	movs	r3, #1
 80007e4:	6862      	ldr	r2, [r4, #4]
 80007e6:	6821      	ldr	r1, [r4, #0]
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <Show_Page1_Screen2+0x50>)
 80007ea:	f000 ffcf 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80007ee:	2114      	movs	r1, #20
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 ffdf 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, Black);
 80007f6:	2300      	movs	r3, #0
 80007f8:	6821      	ldr	r1, [r4, #0]
 80007fa:	6862      	ldr	r2, [r4, #4]
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <Show_Page1_Screen2+0x54>)
 80007fe:	f000 ffc5 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8000802:	2128      	movs	r1, #40	; 0x28
 8000804:	2000      	movs	r0, #0
 8000806:	f000 ffd5 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 800080a:	cc06      	ldmia	r4!, {r1, r2}
 800080c:	2301      	movs	r3, #1
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <Show_Page1_Screen2+0x58>)
 8000810:	f000 ffbc 	bl	800178c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000814:	f000 fec0 	bl	8001598 <ssd1306_UpdateScreen>
    }
 8000818:	bd10      	pop	{r4, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000000 	.word	0x20000000
 8000820:	08003a9d 	.word	0x08003a9d
 8000824:	08003a86 	.word	0x08003a86
 8000828:	08003aa2 	.word	0x08003aa2

0800082c <Show_Page1_Screen3>:

void Show_Page1_Screen3()
    {
 800082c:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fea4 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	0008      	movs	r0, r1
 8000838:	f000 ffbc 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 800083c:	4c0e      	ldr	r4, [pc, #56]	; (8000878 <Show_Page1_Screen3+0x4c>)
 800083e:	2301      	movs	r3, #1
 8000840:	6862      	ldr	r2, [r4, #4]
 8000842:	6821      	ldr	r1, [r4, #0]
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <Show_Page1_Screen3+0x50>)
 8000846:	f000 ffa1 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800084a:	2114      	movs	r1, #20
 800084c:	2000      	movs	r0, #0
 800084e:	f000 ffb1 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 8000852:	2301      	movs	r3, #1
 8000854:	6821      	ldr	r1, [r4, #0]
 8000856:	6862      	ldr	r2, [r4, #4]
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <Show_Page1_Screen3+0x54>)
 800085a:	f000 ff97 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800085e:	2128      	movs	r1, #40	; 0x28
 8000860:	2000      	movs	r0, #0
 8000862:	f000 ffa7 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, Black);
 8000866:	cc06      	ldmia	r4!, {r1, r2}
 8000868:	2300      	movs	r3, #0
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <Show_Page1_Screen3+0x58>)
 800086c:	f000 ff8e 	bl	800178c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000870:	f000 fe92 	bl	8001598 <ssd1306_UpdateScreen>

    }
 8000874:	bd10      	pop	{r4, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000000 	.word	0x20000000
 800087c:	08003a9d 	.word	0x08003a9d
 8000880:	08003a86 	.word	0x08003a86
 8000884:	08003aa2 	.word	0x08003aa2

08000888 <Show_Page1_Screen4>:

void Show_Page1_Screen4()
    {
 8000888:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fe76 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000890:	2100      	movs	r1, #0
 8000892:	0008      	movs	r0, r1
 8000894:	f000 ff8e 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 8000898:	4c0e      	ldr	r4, [pc, #56]	; (80008d4 <Show_Page1_Screen4+0x4c>)
 800089a:	2301      	movs	r3, #1
 800089c:	6862      	ldr	r2, [r4, #4]
 800089e:	6821      	ldr	r1, [r4, #0]
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <Show_Page1_Screen4+0x50>)
 80008a2:	f000 ff73 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80008a6:	2114      	movs	r1, #20
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 ff83 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80008ae:	2301      	movs	r3, #1
 80008b0:	6821      	ldr	r1, [r4, #0]
 80008b2:	6862      	ldr	r2, [r4, #4]
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <Show_Page1_Screen4+0x54>)
 80008b6:	f000 ff69 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80008ba:	2128      	movs	r1, #40	; 0x28
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 ff79 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, Black);
 80008c2:	cc06      	ldmia	r4!, {r1, r2}
 80008c4:	2300      	movs	r3, #0
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <Show_Page1_Screen4+0x58>)
 80008c8:	f000 ff60 	bl	800178c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80008cc:	f000 fe64 	bl	8001598 <ssd1306_UpdateScreen>

    }
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000000 	.word	0x20000000
 80008d8:	08003a86 	.word	0x08003a86
 80008dc:	08003aa2 	.word	0x08003aa2
 80008e0:	08003ac5 	.word	0x08003ac5

080008e4 <Show_Page1>:

void Show_Page1(uint8_t screen)
    {

    switch (screen)
 80008e4:	3801      	subs	r0, #1
    {
 80008e6:	b510      	push	{r4, lr}
    switch (screen)
 80008e8:	2803      	cmp	r0, #3
 80008ea:	d805      	bhi.n	80008f8 <Show_Page1+0x14>
 80008ec:	f7ff fc0c 	bl	8000108 <__gnu_thumb1_case_uqi>
 80008f0:	0b080502 	.word	0x0b080502
	{
    case 1:
	Show_Page1_Screen1();
 80008f4:	f7ff ff3e 	bl	8000774 <Show_Page1_Screen1>
	break;
    case 4:
	Show_Page1_Screen4();
	break;
	}
    }
 80008f8:	bd10      	pop	{r4, pc}
	Show_Page1_Screen2();
 80008fa:	f7ff ff69 	bl	80007d0 <Show_Page1_Screen2>
	break;
 80008fe:	e7fb      	b.n	80008f8 <Show_Page1+0x14>
	Show_Page1_Screen3();
 8000900:	f7ff ff94 	bl	800082c <Show_Page1_Screen3>
	break;
 8000904:	e7f8      	b.n	80008f8 <Show_Page1+0x14>
	Show_Page1_Screen4();
 8000906:	f7ff ffbf 	bl	8000888 <Show_Page1_Screen4>
    }
 800090a:	e7f5      	b.n	80008f8 <Show_Page1+0x14>

0800090c <Enter_Page1_Screen1>:
    uint8_t xreturn = 1;
    char temp[10];

    int16_t bat_voltage;

    if (button == 1)
 800090c:	3801      	subs	r0, #1
 800090e:	1e43      	subs	r3, r0, #1
 8000910:	4198      	sbcs	r0, r3
    {
 8000912:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t xreturn = 1;
 8000914:	b2c3      	uxtb	r3, r0
    {
 8000916:	b087      	sub	sp, #28
 8000918:	000c      	movs	r4, r1
    uint8_t xreturn = 1;
 800091a:	9301      	str	r3, [sp, #4]
	{
	xreturn = 0; // exit loop
	}

    Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 800091c:	f000 fd60 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000920:	1900      	adds	r0, r0, r4
 8000922:	b200      	sxth	r0, r0
 8000924:	f000 fd4e 	bl	80013c4 <Set_Main_Pulse_Duration>

    HAL_ADC_PollForConversion(&hadc, 10);
 8000928:	4c9a      	ldr	r4, [pc, #616]	; (8000b94 <Enter_Page1_Screen1+0x288>)
 800092a:	210a      	movs	r1, #10
 800092c:	0020      	movs	r0, r4
 800092e:	f001 f90b 	bl	8001b48 <HAL_ADC_PollForConversion>
    bat_voltage = HAL_ADC_GetValue(&hadc) * 13;
 8000932:	0020      	movs	r0, r4
 8000934:	f001 f966 	bl	8001c04 <HAL_ADC_GetValue>
 8000938:	270d      	movs	r7, #13
 800093a:	4347      	muls	r7, r0

    if (bat_voltage < Get_Batt_Alarm())
 800093c:	b23f      	sxth	r7, r7
 800093e:	f000 fd7d 	bl	800143c <Get_Batt_Alarm>
 8000942:	4287      	cmp	r7, r0
 8000944:	da01      	bge.n	800094a <Enter_Page1_Screen1+0x3e>
	{
	Disble_Welder();
 8000946:	f000 fd7f 	bl	8001448 <Disble_Welder>
	}

    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 800094a:	f000 fd95 	bl	8001478 <Get_Foot_Switch_Status>
 800094e:	4d92      	ldr	r5, [pc, #584]	; (8000b98 <Enter_Page1_Screen1+0x28c>)
 8000950:	2800      	cmp	r0, #0
 8000952:	d035      	beq.n	80009c0 <Enter_Page1_Screen1+0xb4>
	{

	if (Get_Welder_Status())
 8000954:	f000 fd7e 	bl	8001454 <Get_Welder_Status>
 8000958:	4c90      	ldr	r4, [pc, #576]	; (8000b9c <Enter_Page1_Screen1+0x290>)
 800095a:	1e06      	subs	r6, r0, #0
 800095c:	d000      	beq.n	8000960 <Enter_Page1_Screen1+0x54>
 800095e:	e0a4      	b.n	8000aaa <Enter_Page1_Screen1+0x19e>
		ssd1306_UpdateScreen();
		}
	    }
	else
	    {
	    ssd1306_Fill(Black);
 8000960:	f000 fe0c 	bl	800157c <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000964:	0031      	movs	r1, r6
 8000966:	0030      	movs	r0, r6
 8000968:	f000 ff24 	bl	80017b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("Battery Low", Font_7x10, White);
 800096c:	6862      	ldr	r2, [r4, #4]
 800096e:	2301      	movs	r3, #1
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <Enter_Page1_Screen1+0x294>)
 8000974:	f000 ff0a 	bl	800178c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 15);
 8000978:	0030      	movs	r0, r6
 800097a:	210f      	movs	r1, #15
 800097c:	f000 ff1a 	bl	80017b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("Under Voltage", Font_7x10, White);
 8000980:	6862      	ldr	r2, [r4, #4]
 8000982:	2301      	movs	r3, #1
 8000984:	6821      	ldr	r1, [r4, #0]
 8000986:	4887      	ldr	r0, [pc, #540]	; (8000ba4 <Enter_Page1_Screen1+0x298>)
 8000988:	f000 ff00 	bl	800178c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 30);
 800098c:	0030      	movs	r0, r6
 800098e:	211e      	movs	r1, #30
 8000990:	f000 ff10 	bl	80017b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("Lock Out", Font_7x10, White);
 8000994:	2301      	movs	r3, #1
 8000996:	6821      	ldr	r1, [r4, #0]
 8000998:	6862      	ldr	r2, [r4, #4]
 800099a:	4883      	ldr	r0, [pc, #524]	; (8000ba8 <Enter_Page1_Screen1+0x29c>)
 800099c:	f000 fef6 	bl	800178c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 45);
 80009a0:	0030      	movs	r0, r6
 80009a2:	212d      	movs	r1, #45	; 0x2d
 80009a4:	f000 ff06 	bl	80017b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("Reboot Welder", Font_7x10, White);
 80009a8:	cc06      	ldmia	r4!, {r1, r2}
 80009aa:	2301      	movs	r3, #1
 80009ac:	487f      	ldr	r0, [pc, #508]	; (8000bac <Enter_Page1_Screen1+0x2a0>)
 80009ae:	f000 feed 	bl	800178c <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 80009b2:	f000 fdf1 	bl	8001598 <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 80009b6:	20fa      	movs	r0, #250	; 0xfa
 80009b8:	00c0      	lsls	r0, r0, #3
 80009ba:	f000 ff95 	bl	80018e8 <HAL_Delay>
 80009be:	e003      	b.n	80009c8 <Enter_Page1_Screen1+0xbc>
    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 80009c0:	f000 fd6c 	bl	800149c <Get_Auto_Puse_In_Status>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d1c5      	bne.n	8000954 <Enter_Page1_Screen1+0x48>
	    }

	}

    ssd1306_Fill(Black);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fdd7 	bl	800157c <ssd1306_Fill>

    ssd1306_SetCursor(45, 0);
 80009ce:	2100      	movs	r1, #0
 80009d0:	202d      	movs	r0, #45	; 0x2d
 80009d2:	f000 feef 	bl	80017b4 <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 80009d6:	f000 fd03 	bl	80013e0 <Get_Main_Pulse_Duration>
 80009da:	a903      	add	r1, sp, #12
 80009dc:	220a      	movs	r2, #10
 80009de:	f001 fd87 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 80009e2:	2301      	movs	r3, #1
 80009e4:	6829      	ldr	r1, [r5, #0]
 80009e6:	686a      	ldr	r2, [r5, #4]
 80009e8:	a803      	add	r0, sp, #12
 80009ea:	f000 fecf 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString("ms", Font_11x18, White);
 80009ee:	cd06      	ldmia	r5!, {r1, r2}
 80009f0:	2301      	movs	r3, #1
 80009f2:	486f      	ldr	r0, [pc, #444]	; (8000bb0 <Enter_Page1_Screen1+0x2a4>)
 80009f4:	f000 feca 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 80009f8:	2114      	movs	r1, #20
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 feda 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Battery:", Font_7x10, White);
 8000a00:	4c66      	ldr	r4, [pc, #408]	; (8000b9c <Enter_Page1_Screen1+0x290>)
 8000a02:	2301      	movs	r3, #1
 8000a04:	6862      	ldr	r2, [r4, #4]
 8000a06:	6821      	ldr	r1, [r4, #0]
 8000a08:	486a      	ldr	r0, [pc, #424]	; (8000bb4 <Enter_Page1_Screen1+0x2a8>)
 8000a0a:	f000 febf 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(75, 20);
 8000a0e:	2114      	movs	r1, #20
 8000a10:	204b      	movs	r0, #75	; 0x4b
 8000a12:	f000 fecf 	bl	80017b4 <ssd1306_SetCursor>
    itoa(bat_voltage, temp, 10);
 8000a16:	a903      	add	r1, sp, #12
 8000a18:	220a      	movs	r2, #10
 8000a1a:	0038      	movs	r0, r7
 8000a1c:	f001 fd68 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000a20:	6821      	ldr	r1, [r4, #0]
 8000a22:	6862      	ldr	r2, [r4, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	a803      	add	r0, sp, #12
 8000a28:	f000 feb0 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString("mV", Font_7x10, White);
 8000a2c:	6862      	ldr	r2, [r4, #4]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	6821      	ldr	r1, [r4, #0]
 8000a32:	4861      	ldr	r0, [pc, #388]	; (8000bb8 <Enter_Page1_Screen1+0x2ac>)
 8000a34:	f000 feaa 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 35);
 8000a38:	2123      	movs	r1, #35	; 0x23
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 feba 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Tot Welds:", Font_7x10, White);
 8000a40:	6862      	ldr	r2, [r4, #4]
 8000a42:	2301      	movs	r3, #1
 8000a44:	6821      	ldr	r1, [r4, #0]
 8000a46:	485d      	ldr	r0, [pc, #372]	; (8000bbc <Enter_Page1_Screen1+0x2b0>)
 8000a48:	f000 fea0 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(75, 35);
 8000a4c:	2123      	movs	r1, #35	; 0x23
 8000a4e:	204b      	movs	r0, #75	; 0x4b
 8000a50:	f000 feb0 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("125", Font_7x10, White);
 8000a54:	6862      	ldr	r2, [r4, #4]
 8000a56:	2301      	movs	r3, #1
 8000a58:	6821      	ldr	r1, [r4, #0]
 8000a5a:	4859      	ldr	r0, [pc, #356]	; (8000bc0 <Enter_Page1_Screen1+0x2b4>)
 8000a5c:	f000 fe96 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000a60:	2132      	movs	r1, #50	; 0x32
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 fea6 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto, Font_7x10, White);
 8000a68:	6821      	ldr	r1, [r4, #0]
 8000a6a:	6862      	ldr	r2, [r4, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4855      	ldr	r0, [pc, #340]	; (8000bc4 <Enter_Page1_Screen1+0x2b8>)
 8000a70:	f000 fe8c 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString(STR_Space, Font_7x10, White);
 8000a74:	6821      	ldr	r1, [r4, #0]
 8000a76:	6862      	ldr	r2, [r4, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <Enter_Page1_Screen1+0x2bc>)
 8000a7c:	f000 fe86 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString(STR_Auto_Value, Font_7x10, White);
 8000a80:	4852      	ldr	r0, [pc, #328]	; (8000bcc <Enter_Page1_Screen1+0x2c0>)
 8000a82:	2301      	movs	r3, #1
 8000a84:	6821      	ldr	r1, [r4, #0]
 8000a86:	6862      	ldr	r2, [r4, #4]
 8000a88:	6800      	ldr	r0, [r0, #0]
 8000a8a:	f000 fe7f 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(100, 50);
 8000a8e:	2132      	movs	r1, #50	; 0x32
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f000 fe8f 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(">>", Font_7x10, White);
 8000a96:	cc06      	ldmia	r4!, {r1, r2}
 8000a98:	2301      	movs	r3, #1
 8000a9a:	484d      	ldr	r0, [pc, #308]	; (8000bd0 <Enter_Page1_Screen1+0x2c4>)
 8000a9c:	f000 fe76 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000aa0:	f000 fd7a 	bl	8001598 <ssd1306_UpdateScreen>

    return xreturn;
    }
 8000aa4:	9801      	ldr	r0, [sp, #4]
 8000aa6:	b007      	add	sp, #28
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    HAL_Delay(Get_Auto_Pulse_Delay());
 8000aaa:	f000 fc85 	bl	80013b8 <Get_Auto_Pulse_Delay>
 8000aae:	f000 ff1b 	bl	80018e8 <HAL_Delay>
	    ssd1306_Fill(Black);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fd62 	bl	800157c <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	0008      	movs	r0, r1
 8000abc:	f000 fe7a 	bl	80017b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("Pulse:", Font_11x18, White);
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	6829      	ldr	r1, [r5, #0]
 8000ac4:	686a      	ldr	r2, [r5, #4]
 8000ac6:	4843      	ldr	r0, [pc, #268]	; (8000bd4 <Enter_Page1_Screen1+0x2c8>)
 8000ac8:	f000 fe60 	bl	800178c <ssd1306_WriteString>
	    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000acc:	f000 fc88 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	a903      	add	r1, sp, #12
 8000ad4:	f001 fd0c 	bl	80024f0 <itoa>
	    ssd1306_WriteString(temp, Font_11x18, White);
 8000ad8:	2301      	movs	r3, #1
 8000ada:	6829      	ldr	r1, [r5, #0]
 8000adc:	686a      	ldr	r2, [r5, #4]
 8000ade:	a803      	add	r0, sp, #12
 8000ae0:	f000 fe54 	bl	800178c <ssd1306_WriteString>
	    ssd1306_WriteString("ms", Font_11x18, White);
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	6829      	ldr	r1, [r5, #0]
 8000ae8:	686a      	ldr	r2, [r5, #4]
 8000aea:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <Enter_Page1_Screen1+0x2a4>)
 8000aec:	f000 fe4e 	bl	800178c <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000af0:	f000 fd52 	bl	8001598 <ssd1306_UpdateScreen>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000af4:	2090      	movs	r0, #144	; 0x90
 8000af6:	2201      	movs	r2, #1
 8000af8:	2102      	movs	r1, #2
 8000afa:	05c0      	lsls	r0, r0, #23
 8000afc:	f001 f9fe 	bl	8001efc <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Main_Pulse_Duration());
 8000b00:	f000 fc6e 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000b04:	f000 fef0 	bl	80018e8 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000b08:	2090      	movs	r0, #144	; 0x90
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	05c0      	lsls	r0, r0, #23
 8000b0e:	2102      	movs	r1, #2
 8000b10:	f001 f9f4 	bl	8001efc <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f000 fee7 	bl	80018e8 <HAL_Delay>
	    while (Get_Auto_Puse_In_Status())
 8000b1a:	f000 fcbf 	bl	800149c <Get_Auto_Puse_In_Status>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d11e      	bne.n	8000b60 <Enter_Page1_Screen1+0x254>
	    while (Get_Foot_Switch_Status())
 8000b22:	f000 fca9 	bl	8001478 <Get_Foot_Switch_Status>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d100      	bne.n	8000b2c <Enter_Page1_Screen1+0x220>
 8000b2a:	e74d      	b.n	80009c8 <Enter_Page1_Screen1+0xbc>
		ssd1306_Fill(Black);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 fd25 	bl	800157c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	0008      	movs	r0, r1
 8000b36:	f000 fe3d 	bl	80017b4 <ssd1306_SetCursor>
		ssd1306_WriteString("Release", Font_7x10, White);
 8000b3a:	6862      	ldr	r2, [r4, #4]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	6821      	ldr	r1, [r4, #0]
 8000b40:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <Enter_Page1_Screen1+0x2cc>)
 8000b42:	f000 fe23 	bl	800178c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000b46:	210f      	movs	r1, #15
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fe33 	bl	80017b4 <ssd1306_SetCursor>
		ssd1306_WriteString("Foot SW", Font_7x10, White);
 8000b4e:	2301      	movs	r3, #1
 8000b50:	6821      	ldr	r1, [r4, #0]
 8000b52:	6862      	ldr	r2, [r4, #4]
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <Enter_Page1_Screen1+0x2d0>)
 8000b56:	f000 fe19 	bl	800178c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b5a:	f000 fd1d 	bl	8001598 <ssd1306_UpdateScreen>
 8000b5e:	e7e0      	b.n	8000b22 <Enter_Page1_Screen1+0x216>
		ssd1306_Fill(Black);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fd0b 	bl	800157c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000b66:	2100      	movs	r1, #0
 8000b68:	0008      	movs	r0, r1
 8000b6a:	f000 fe23 	bl	80017b4 <ssd1306_SetCursor>
		ssd1306_WriteString("Disconnect", Font_7x10, White);
 8000b6e:	6862      	ldr	r2, [r4, #4]
 8000b70:	2301      	movs	r3, #1
 8000b72:	6821      	ldr	r1, [r4, #0]
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <Enter_Page1_Screen1+0x2d4>)
 8000b76:	f000 fe09 	bl	800178c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fe19 	bl	80017b4 <ssd1306_SetCursor>
		ssd1306_WriteString("Now", Font_7x10, White);
 8000b82:	2301      	movs	r3, #1
 8000b84:	6821      	ldr	r1, [r4, #0]
 8000b86:	6862      	ldr	r2, [r4, #4]
 8000b88:	4816      	ldr	r0, [pc, #88]	; (8000be4 <Enter_Page1_Screen1+0x2d8>)
 8000b8a:	f000 fdff 	bl	800178c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b8e:	f000 fd03 	bl	8001598 <ssd1306_UpdateScreen>
 8000b92:	e7c2      	b.n	8000b1a <Enter_Page1_Screen1+0x20e>
 8000b94:	20000480 	.word	0x20000480
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	08003afb 	.word	0x08003afb
 8000ba4:	08003b07 	.word	0x08003b07
 8000ba8:	08003b15 	.word	0x08003b15
 8000bac:	08003b1e 	.word	0x08003b1e
 8000bb0:	08003ad9 	.word	0x08003ad9
 8000bb4:	08003b2c 	.word	0x08003b2c
 8000bb8:	08003b48 	.word	0x08003b48
 8000bbc:	08003b35 	.word	0x08003b35
 8000bc0:	08003b40 	.word	0x08003b40
 8000bc4:	08003a80 	.word	0x08003a80
 8000bc8:	08003ad0 	.word	0x08003ad0
 8000bcc:	20000014 	.word	0x20000014
 8000bd0:	08003b44 	.word	0x08003b44
 8000bd4:	08003ad2 	.word	0x08003ad2
 8000bd8:	08003aeb 	.word	0x08003aeb
 8000bdc:	08003af3 	.word	0x08003af3
 8000be0:	08003adc 	.word	0x08003adc
 8000be4:	08003ae7 	.word	0x08003ae7

08000be8 <Enter_Page1_Screen3>:
    Menu_Change_Page(2);
    return 0;
    }

uint8_t Enter_Page1_Screen3(uint8_t button, int16_t count)
    {
 8000be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000bea:	000d      	movs	r5, r1
    if (button == 1)
	{
	xreturn = 0; // execution complete
	}

    Set_Batt_Alarm(Get_Batt_Alarm() + (count * 10));
 8000bec:	260a      	movs	r6, #10
    {
 8000bee:	0004      	movs	r4, r0
    Set_Batt_Alarm(Get_Batt_Alarm() + (count * 10));
 8000bf0:	f000 fc24 	bl	800143c <Get_Batt_Alarm>
 8000bf4:	4375      	muls	r5, r6
 8000bf6:	1940      	adds	r0, r0, r5
 8000bf8:	b200      	sxth	r0, r0
 8000bfa:	f000 fc0b 	bl	8001414 <Set_Batt_Alarm>

    ssd1306_Fill(Black);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fcbc 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	0008      	movs	r0, r1
 8000c08:	f000 fdd4 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 8000c0c:	4d11      	ldr	r5, [pc, #68]	; (8000c54 <Enter_Page1_Screen3+0x6c>)
 8000c0e:	2301      	movs	r3, #1
 8000c10:	686a      	ldr	r2, [r5, #4]
 8000c12:	6829      	ldr	r1, [r5, #0]
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <Enter_Page1_Screen3+0x70>)
 8000c16:	f000 fdb9 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000c1a:	2114      	movs	r1, #20
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fdc9 	bl	80017b4 <ssd1306_SetCursor>
    itoa(Get_Batt_Alarm(), temp, 10);
 8000c22:	f000 fc0b 	bl	800143c <Get_Batt_Alarm>
 8000c26:	0032      	movs	r2, r6
 8000c28:	a901      	add	r1, sp, #4
 8000c2a:	f001 fc61 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000c2e:	2301      	movs	r3, #1
 8000c30:	6829      	ldr	r1, [r5, #0]
 8000c32:	686a      	ldr	r2, [r5, #4]
 8000c34:	a801      	add	r0, sp, #4
 8000c36:	f000 fda9 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString(" mV", Font_11x18, White);
 8000c3a:	cd06      	ldmia	r5!, {r1, r2}
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <Enter_Page1_Screen3+0x74>)
    if (button == 1)
 8000c40:	3c01      	subs	r4, #1
    ssd1306_WriteString(" mV", Font_11x18, White);
 8000c42:	f000 fda3 	bl	800178c <ssd1306_WriteString>
    if (button == 1)
 8000c46:	1e60      	subs	r0, r4, #1
 8000c48:	4184      	sbcs	r4, r0
    ssd1306_UpdateScreen();
 8000c4a:	f000 fca5 	bl	8001598 <ssd1306_UpdateScreen>

    return xreturn;
 8000c4e:	b2e0      	uxtb	r0, r4
    }
 8000c50:	b004      	add	sp, #16
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	08003aa2 	.word	0x08003aa2
 8000c5c:	08003b47 	.word	0x08003b47

08000c60 <Enter_Page1_Screen4>:


uint8_t Enter_Page1_Screen4(uint8_t button, int16_t count)
    {
 8000c60:	b530      	push	{r4, r5, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	000d      	movs	r5, r1
 8000c66:	0004      	movs	r4, r0

    uint8_t xreturn = 1;
    char temp[10];

    Set_Short_Pulse_Duration(Get_Short_Pulse_Duration() + (count));
 8000c68:	f000 fbce 	bl	8001408 <Get_Short_Pulse_Duration>
 8000c6c:	1940      	adds	r0, r0, r5
 8000c6e:	b200      	sxth	r0, r0
 8000c70:	f000 fbbc 	bl	80013ec <Set_Short_Pulse_Duration>
    if (button == 1)
	{
	xreturn = 0; //execution complete
	}

    ssd1306_Fill(Black);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fc81 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	0008      	movs	r0, r1
 8000c7e:	f000 fd99 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, White);
 8000c82:	4d12      	ldr	r5, [pc, #72]	; (8000ccc <Enter_Page1_Screen4+0x6c>)
 8000c84:	2301      	movs	r3, #1
 8000c86:	686a      	ldr	r2, [r5, #4]
 8000c88:	6829      	ldr	r1, [r5, #0]
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <Enter_Page1_Screen4+0x70>)
 8000c8c:	f000 fd7e 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000c90:	2114      	movs	r1, #20
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 fd8e 	bl	80017b4 <ssd1306_SetCursor>
    itoa(Get_Short_Pulse_Duration(), temp, 10);
 8000c98:	f000 fbb6 	bl	8001408 <Get_Short_Pulse_Duration>
 8000c9c:	a901      	add	r1, sp, #4
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	f001 fc26 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	6829      	ldr	r1, [r5, #0]
 8000ca8:	686a      	ldr	r2, [r5, #4]
 8000caa:	a801      	add	r0, sp, #4
 8000cac:	f000 fd6e 	bl	800178c <ssd1306_WriteString>
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000cb0:	cd06      	ldmia	r5!, {r1, r2}
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <Enter_Page1_Screen4+0x74>)
    if (button == 1)
 8000cb6:	3c01      	subs	r4, #1
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000cb8:	f000 fd68 	bl	800178c <ssd1306_WriteString>
    if (button == 1)
 8000cbc:	1e60      	subs	r0, r4, #1
 8000cbe:	4184      	sbcs	r4, r0
    ssd1306_UpdateScreen();
 8000cc0:	f000 fc6a 	bl	8001598 <ssd1306_UpdateScreen>

    return xreturn;
 8000cc4:	b2e0      	uxtb	r0, r4
    }
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bd30      	pop	{r4, r5, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	08003ac5 	.word	0x08003ac5
 8000cd4:	08003b4b 	.word	0x08003b4b

08000cd8 <Enter_Page1_Screen>:
uint8_t Enter_Page1_Screen(uint8_t screen, uint8_t button, int16_t count)
    {

    uint8_t xreturn = 0;

    switch (screen)
 8000cd8:	1e43      	subs	r3, r0, #1
    {
 8000cda:	b510      	push	{r4, lr}
    uint8_t xreturn = 0;
 8000cdc:	2000      	movs	r0, #0
    {
 8000cde:	000c      	movs	r4, r1
 8000ce0:	0011      	movs	r1, r2
    switch (screen)
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d807      	bhi.n	8000cf6 <Enter_Page1_Screen+0x1e>
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fa0e 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000cec:	0f0b0602 	.word	0x0f0b0602
	{
    case 1:
	xreturn = Enter_Page1_Screen1(button, count);
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	f7ff fe0b 	bl	800090c <Enter_Page1_Screen1>
	xreturn = Enter_Page1_Screen4(button, count);
	break;
	}

    return xreturn;
    }
 8000cf6:	bd10      	pop	{r4, pc}
    Menu_Change_Page(2);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fc5d 	bl	80005b8 <Menu_Change_Page>
	xreturn = Enter_Page1_Screen2(button, count);
 8000cfe:	2000      	movs	r0, #0
	break;
 8000d00:	e7f9      	b.n	8000cf6 <Enter_Page1_Screen+0x1e>
	xreturn = Enter_Page1_Screen3(button, count);
 8000d02:	0020      	movs	r0, r4
 8000d04:	f7ff ff70 	bl	8000be8 <Enter_Page1_Screen3>
	break;
 8000d08:	e7f5      	b.n	8000cf6 <Enter_Page1_Screen+0x1e>
	xreturn = Enter_Page1_Screen4(button, count);
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f7ff ffa8 	bl	8000c60 <Enter_Page1_Screen4>
	break;
 8000d10:	e7f1      	b.n	8000cf6 <Enter_Page1_Screen+0x1e>
	...

08000d14 <Show_Page2_Comman>:
 */

#include "menu_main.h"

void Show_Page2_Comman()
    {
 8000d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];

    ssd1306_Fill(Black);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 fc30 	bl	800157c <ssd1306_Fill>

    ssd1306_SetCursor(0, 5);
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fd48 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, White);
 8000d24:	4c28      	ldr	r4, [pc, #160]	; (8000dc8 <Show_Page2_Comman+0xb4>)
 8000d26:	2301      	movs	r3, #1
 8000d28:	6862      	ldr	r2, [r4, #4]
 8000d2a:	6821      	ldr	r1, [r4, #0]
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <Show_Page2_Comman+0xb8>)
 8000d2e:	f000 fd2d 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000d32:	2114      	movs	r1, #20
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 fd3d 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, White);
 8000d3a:	6862      	ldr	r2, [r4, #4]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	6821      	ldr	r1, [r4, #0]
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <Show_Page2_Comman+0xbc>)
 8000d42:	f000 fd23 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000d46:	2114      	movs	r1, #20
 8000d48:	2050      	movs	r0, #80	; 0x50
 8000d4a:	f000 fd33 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Value, Font_7x10, White);
 8000d4e:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <Show_Page2_Comman+0xc0>)
 8000d50:	6862      	ldr	r2, [r4, #4]
 8000d52:	2301      	movs	r3, #1
 8000d54:	6821      	ldr	r1, [r4, #0]
 8000d56:	6800      	ldr	r0, [r0, #0]
 8000d58:	f000 fd18 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 35);
 8000d5c:	2123      	movs	r1, #35	; 0x23
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fd28 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, White);
 8000d64:	2301      	movs	r3, #1
 8000d66:	6862      	ldr	r2, [r4, #4]
 8000d68:	6821      	ldr	r1, [r4, #0]
 8000d6a:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <Show_Page2_Comman+0xc4>)
 8000d6c:	f000 fd0e 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000d70:	2123      	movs	r1, #35	; 0x23
 8000d72:	2050      	movs	r0, #80	; 0x50
 8000d74:	f000 fd1e 	bl	80017b4 <ssd1306_SetCursor>
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000d78:	f000 fb1e 	bl	80013b8 <Get_Auto_Pulse_Delay>
 8000d7c:	a901      	add	r1, sp, #4
 8000d7e:	220a      	movs	r2, #10
 8000d80:	f001 fbb6 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000d84:	6862      	ldr	r2, [r4, #4]
 8000d86:	2301      	movs	r3, #1
 8000d88:	6821      	ldr	r1, [r4, #0]
 8000d8a:	a801      	add	r0, sp, #4
 8000d8c:	f000 fcfe 	bl	800178c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000d90:	2132      	movs	r1, #50	; 0x32
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 fd0e 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, White);
 8000d98:	2301      	movs	r3, #1
 8000d9a:	6862      	ldr	r2, [r4, #4]
 8000d9c:	6821      	ldr	r1, [r4, #0]
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <Show_Page2_Comman+0xc8>)
 8000da0:	f000 fcf4 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8000da4:	2132      	movs	r1, #50	; 0x32
 8000da6:	2050      	movs	r0, #80	; 0x50
 8000da8:	f000 fd04 	bl	80017b4 <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000dac:	f000 fb18 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000db0:	a901      	add	r1, sp, #4
 8000db2:	220a      	movs	r2, #10
 8000db4:	f001 fb9c 	bl	80024f0 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000db8:	cc06      	ldmia	r4!, {r1, r2}
 8000dba:	2301      	movs	r3, #1
 8000dbc:	a801      	add	r0, sp, #4
 8000dbe:	f000 fce5 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000dc2:	f000 fbe9 	bl	8001598 <ssd1306_UpdateScreen>
    }
 8000dc6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	08003a9d 	.word	0x08003a9d
 8000dd0:	08003a91 	.word	0x08003a91
 8000dd4:	20000014 	.word	0x20000014
 8000dd8:	08003aad 	.word	0x08003aad
 8000ddc:	08003ab4 	.word	0x08003ab4

08000de0 <Show_Page2_Screen1>:

void Show_Page2_Screen1()
    {
 8000de0:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 5);
 8000de2:	2105      	movs	r1, #5
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fce5 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, Black);
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <Show_Page2_Screen1+0x20>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	6811      	ldr	r1, [r2, #0]
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <Show_Page2_Screen1+0x24>)
 8000df2:	6852      	ldr	r2, [r2, #4]
 8000df4:	f000 fcca 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000df8:	f000 fbce 	bl	8001598 <ssd1306_UpdateScreen>
    }
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000008 	.word	0x20000008
 8000e04:	08003a9d 	.word	0x08003a9d

08000e08 <Show_Page2_Screen2>:

void Show_Page2_Screen2()
    {
 8000e08:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 20);
 8000e0a:	2114      	movs	r1, #20
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fcd1 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, Black);
 8000e12:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <Show_Page2_Screen2+0x34>)
 8000e14:	2300      	movs	r3, #0
 8000e16:	6821      	ldr	r1, [r4, #0]
 8000e18:	6862      	ldr	r2, [r4, #4]
 8000e1a:	4809      	ldr	r0, [pc, #36]	; (8000e40 <Show_Page2_Screen2+0x38>)
 8000e1c:	f000 fcb6 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000e20:	2114      	movs	r1, #20
 8000e22:	2050      	movs	r0, #80	; 0x50
 8000e24:	f000 fcc6 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Value, Font_7x10, Black);
 8000e28:	cc06      	ldmia	r4!, {r1, r2}
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <Show_Page2_Screen2+0x3c>)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6800      	ldr	r0, [r0, #0]
 8000e30:	f000 fcac 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000e34:	f000 fbb0 	bl	8001598 <ssd1306_UpdateScreen>
    }
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	08003a91 	.word	0x08003a91
 8000e44:	20000014 	.word	0x20000014

08000e48 <Show_Page2_Screen3>:

void Show_Page2_Screen3()
    {
 8000e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000e4a:	f000 fab5 	bl	80013b8 <Get_Auto_Pulse_Delay>
 8000e4e:	220a      	movs	r2, #10
 8000e50:	a901      	add	r1, sp, #4
 8000e52:	f001 fb4d 	bl	80024f0 <itoa>

    ssd1306_SetCursor(0, 35);
 8000e56:	2123      	movs	r1, #35	; 0x23
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 fcab 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, Black);
 8000e5e:	4c09      	ldr	r4, [pc, #36]	; (8000e84 <Show_Page2_Screen3+0x3c>)
 8000e60:	2300      	movs	r3, #0
 8000e62:	6821      	ldr	r1, [r4, #0]
 8000e64:	6862      	ldr	r2, [r4, #4]
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <Show_Page2_Screen3+0x40>)
 8000e68:	f000 fc90 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000e6c:	2123      	movs	r1, #35	; 0x23
 8000e6e:	2050      	movs	r0, #80	; 0x50
 8000e70:	f000 fca0 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8000e74:	cc06      	ldmia	r4!, {r1, r2}
 8000e76:	2300      	movs	r3, #0
 8000e78:	a801      	add	r0, sp, #4
 8000e7a:	f000 fc87 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000e7e:	f000 fb8b 	bl	8001598 <ssd1306_UpdateScreen>

    }
 8000e82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000e84:	20000008 	.word	0x20000008
 8000e88:	08003aad 	.word	0x08003aad

08000e8c <Show_Page2_Screen4>:

void Show_Page2_Screen4()
    {
 8000e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000e8e:	f000 faa7 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000e92:	220a      	movs	r2, #10
 8000e94:	a901      	add	r1, sp, #4
 8000e96:	f001 fb2b 	bl	80024f0 <itoa>

    ssd1306_SetCursor(0, 50);
 8000e9a:	2132      	movs	r1, #50	; 0x32
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 fc89 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, Black);
 8000ea2:	4c09      	ldr	r4, [pc, #36]	; (8000ec8 <Show_Page2_Screen4+0x3c>)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6821      	ldr	r1, [r4, #0]
 8000ea8:	6862      	ldr	r2, [r4, #4]
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <Show_Page2_Screen4+0x40>)
 8000eac:	f000 fc6e 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8000eb0:	2132      	movs	r1, #50	; 0x32
 8000eb2:	2050      	movs	r0, #80	; 0x50
 8000eb4:	f000 fc7e 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8000eb8:	cc06      	ldmia	r4!, {r1, r2}
 8000eba:	2300      	movs	r3, #0
 8000ebc:	a801      	add	r0, sp, #4
 8000ebe:	f000 fc65 	bl	800178c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000ec2:	f000 fb69 	bl	8001598 <ssd1306_UpdateScreen>
    }
 8000ec6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	08003ab4 	.word	0x08003ab4

08000ed0 <Show_Page2>:

void Show_Page2(uint8_t screen)
    {

    switch (screen)
 8000ed0:	3801      	subs	r0, #1
    {
 8000ed2:	b510      	push	{r4, lr}
    switch (screen)
 8000ed4:	2803      	cmp	r0, #3
 8000ed6:	d807      	bhi.n	8000ee8 <Show_Page2+0x18>
 8000ed8:	f7ff f916 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000edc:	110c0702 	.word	0x110c0702
	{
    break;
case 1:
    Show_Page2_Comman();
 8000ee0:	f7ff ff18 	bl	8000d14 <Show_Page2_Comman>
    Show_Page2_Screen1();
 8000ee4:	f7ff ff7c 	bl	8000de0 <Show_Page2_Screen1>
case 4:
    Show_Page2_Comman();
    Show_Page2_Screen4();
    break;
    }
}
 8000ee8:	bd10      	pop	{r4, pc}
    Show_Page2_Comman();
 8000eea:	f7ff ff13 	bl	8000d14 <Show_Page2_Comman>
    Show_Page2_Screen2();
 8000eee:	f7ff ff8b 	bl	8000e08 <Show_Page2_Screen2>
    break;
 8000ef2:	e7f9      	b.n	8000ee8 <Show_Page2+0x18>
    Show_Page2_Comman();
 8000ef4:	f7ff ff0e 	bl	8000d14 <Show_Page2_Comman>
    Show_Page2_Screen3();
 8000ef8:	f7ff ffa6 	bl	8000e48 <Show_Page2_Screen3>
    break;
 8000efc:	e7f4      	b.n	8000ee8 <Show_Page2+0x18>
    Show_Page2_Comman();
 8000efe:	f7ff ff09 	bl	8000d14 <Show_Page2_Comman>
    Show_Page2_Screen4();
 8000f02:	f7ff ffc3 	bl	8000e8c <Show_Page2_Screen4>
}
 8000f06:	e7ef      	b.n	8000ee8 <Show_Page2+0x18>

08000f08 <Enter_Page2_Screen2>:
Menu_Change_Page(1);
return 0; // execution complete
}

uint8_t Enter_Page2_Screen2(uint8_t button, int16_t count)
{
 8000f08:	b510      	push	{r4, lr}

static uint8_t toggle = 0;

if (toggle)
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <Enter_Page2_Screen2+0x30>)
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <Enter_Page2_Screen2+0x34>)
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d00b      	beq.n	8000f2c <Enter_Page2_Screen2+0x24>
    {
    toggle = 0;
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    Disble_Auto_Welder();
 8000f18:	f000 faa2 	bl	8001460 <Disble_Auto_Welder>
    STR_Auto_Value = STR_OFF;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <Enter_Page2_Screen2+0x38>)
    }
else
    {
    toggle = 1;
    Enable_Auto_Welder();
    STR_Auto_Value = STR_ON;
 8000f1e:	6023      	str	r3, [r4, #0]
    }
Show_Page2_Comman();
 8000f20:	f7ff fef8 	bl	8000d14 <Show_Page2_Comman>
Show_Page2_Screen2();
 8000f24:	f7ff ff70 	bl	8000e08 <Show_Page2_Screen2>

return 0; // execution complete

}
 8000f28:	2000      	movs	r0, #0
 8000f2a:	bd10      	pop	{r4, pc}
    toggle = 1;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    Enable_Auto_Welder();
 8000f30:	f000 fa9c 	bl	800146c <Enable_Auto_Welder>
    STR_Auto_Value = STR_ON;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <Enter_Page2_Screen2+0x3c>)
 8000f36:	e7f2      	b.n	8000f1e <Enter_Page2_Screen2+0x16>
 8000f38:	2000006a 	.word	0x2000006a
 8000f3c:	20000014 	.word	0x20000014
 8000f40:	08003abe 	.word	0x08003abe
 8000f44:	08003ac2 	.word	0x08003ac2

08000f48 <Enter_Page2_Screen3>:

uint8_t Enter_Page2_Screen3(uint8_t button, int16_t count)
{
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	000d      	movs	r5, r1
 8000f4c:	0004      	movs	r4, r0

uint8_t xreturn = 1;

Set_Auto_Pulse_Delay(count + Get_Auto_Pulse_Delay());
 8000f4e:	f000 fa33 	bl	80013b8 <Get_Auto_Pulse_Delay>
 8000f52:	1940      	adds	r0, r0, r5
 8000f54:	b200      	sxth	r0, r0

if (button == 1)
 8000f56:	3c01      	subs	r4, #1
Set_Auto_Pulse_Delay(count + Get_Auto_Pulse_Delay());
 8000f58:	f000 fa1c 	bl	8001394 <Set_Auto_Pulse_Delay>
if (button == 1)
 8000f5c:	1e60      	subs	r0, r4, #1
 8000f5e:	4184      	sbcs	r4, r0
    {
    xreturn = 0;
    }

Show_Page2_Screen3();
 8000f60:	f7ff ff72 	bl	8000e48 <Show_Page2_Screen3>

return xreturn;
 8000f64:	b2e0      	uxtb	r0, r4

}
 8000f66:	bd70      	pop	{r4, r5, r6, pc}

08000f68 <Enter_Page2_Screen4>:

uint8_t Enter_Page2_Screen4(uint8_t button, int16_t count)
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	000d      	movs	r5, r1
 8000f6c:	0004      	movs	r4, r0
if (button == 1)
    {
    xreturn = 0;
    }

Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 8000f6e:	f000 fa37 	bl	80013e0 <Get_Main_Pulse_Duration>
 8000f72:	1940      	adds	r0, r0, r5
 8000f74:	b200      	sxth	r0, r0
if (button == 1)
 8000f76:	3c01      	subs	r4, #1
Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 8000f78:	f000 fa24 	bl	80013c4 <Set_Main_Pulse_Duration>
if (button == 1)
 8000f7c:	1e60      	subs	r0, r4, #1
 8000f7e:	4184      	sbcs	r4, r0

Show_Page2_Screen4();
 8000f80:	f7ff ff84 	bl	8000e8c <Show_Page2_Screen4>

return xreturn;
 8000f84:	b2e0      	uxtb	r0, r4
}
 8000f86:	bd70      	pop	{r4, r5, r6, pc}

08000f88 <Enter_Page2_Screen>:
uint8_t Enter_Page2_Screen(uint8_t screen, uint8_t button, int16_t count)
{

uint8_t xreturn = 0;

switch (screen)
 8000f88:	1e43      	subs	r3, r0, #1
{
 8000f8a:	b510      	push	{r4, lr}
uint8_t xreturn = 0;
 8000f8c:	2000      	movs	r0, #0
{
 8000f8e:	000c      	movs	r4, r1
 8000f90:	0011      	movs	r1, r2
switch (screen)
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d808      	bhi.n	8000fa8 <Enter_Page2_Screen+0x20>
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff f8b6 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f9c:	0f0b0702 	.word	0x0f0b0702
Menu_Change_Page(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff fb09 	bl	80005b8 <Menu_Change_Page>
    {
case 1:
    xreturn = Enter_Page2_Screen1(button, count);
 8000fa6:	2000      	movs	r0, #0
    xreturn = Enter_Page2_Screen4(button, count);
    break;
    }

return xreturn;
}
 8000fa8:	bd10      	pop	{r4, pc}
    xreturn = Enter_Page2_Screen2(button, count);
 8000faa:	0020      	movs	r0, r4
 8000fac:	f7ff ffac 	bl	8000f08 <Enter_Page2_Screen2>
    break;
 8000fb0:	e7fa      	b.n	8000fa8 <Enter_Page2_Screen+0x20>
    xreturn = Enter_Page2_Screen3(button, count);
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff ffc8 	bl	8000f48 <Enter_Page2_Screen3>
    break;
 8000fb8:	e7f6      	b.n	8000fa8 <Enter_Page2_Screen+0x20>
    xreturn = Enter_Page2_Screen4(button, count);
 8000fba:	0020      	movs	r0, r4
 8000fbc:	f7ff ffd4 	bl	8000f68 <Enter_Page2_Screen4>
    break;
 8000fc0:	e7f2      	b.n	8000fa8 <Enter_Page2_Screen+0x20>
	...

08000fc4 <Encoder_Attach>:
static Encoder_Struct_t *Encoder_Struct_PTR_Array[MAX_ENCODERS];

static uint8_t Attached_Encoders = 0;

uint8_t Encoder_Attach(Encoder_Struct_t *Encoder_Struct_PTR)
    {
 8000fc4:	b570      	push	{r4, r5, r6, lr}
    //init GPIOs as input

    GPIO_InitTypeDef GPIO_InitStruct;

    if (Attached_Encoders < MAX_ENCODERS)
 8000fc6:	4d28      	ldr	r5, [pc, #160]	; (8001068 <Encoder_Attach+0xa4>)
    {
 8000fc8:	0004      	movs	r4, r0
    if (Attached_Encoders < MAX_ENCODERS)
 8000fca:	782b      	ldrb	r3, [r5, #0]
    {
 8000fcc:	b08a      	sub	sp, #40	; 0x28
	return (Attached_Encoders - 1); //return encoder ID
	}
    else
	{
	//Error
	return (255); //return error
 8000fce:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Encoders < MAX_ENCODERS)
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d846      	bhi.n	8001062 <Encoder_Attach+0x9e>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000fd4:	2080      	movs	r0, #128	; 0x80
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <Encoder_Attach+0xa8>)
 8000fd8:	0300      	lsls	r0, r0, #12
 8000fda:	6959      	ldr	r1, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2600      	movs	r6, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	6159      	str	r1, [r3, #20]
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	4002      	ands	r2, r0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000fe6:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000fec:	6959      	ldr	r1, [r3, #20]
 8000fee:	0340      	lsls	r0, r0, #13
 8000ff0:	4301      	orrs	r1, r0
 8000ff2:	6159      	str	r1, [r3, #20]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	4002      	ands	r2, r0
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000ff8:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000ffe:	6959      	ldr	r1, [r3, #20]
 8001000:	0280      	lsls	r0, r0, #10
 8001002:	4301      	orrs	r1, r0
 8001004:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001006:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001008:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800100a:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800100c:	4002      	ands	r2, r0
 800100e:	9203      	str	r2, [sp, #12]
 8001010:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001012:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001014:	6860      	ldr	r0, [r4, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001016:	430a      	orrs	r2, r1
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	695b      	ldr	r3, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	9606      	str	r6, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800101e:	400b      	ands	r3, r1
 8001020:	9304      	str	r3, [sp, #16]
 8001022:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8001024:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001026:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8001028:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102a:	2301      	movs	r3, #1
 800102c:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 800102e:	f000 feaf 	bl	8001d90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8001032:	8863      	ldrh	r3, [r4, #2]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8001034:	a905      	add	r1, sp, #20
 8001036:	68a0      	ldr	r0, [r4, #8]
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8001038:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 800103a:	f000 fea9 	bl	8001d90 <HAL_GPIO_Init>
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 800103e:	8821      	ldrh	r1, [r4, #0]
	Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
 8001040:	6126      	str	r6, [r4, #16]
	Encoder_Struct_PTR->Encoder_Count = 0;
 8001042:	82a6      	strh	r6, [r4, #20]
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 8001044:	6860      	ldr	r0, [r4, #4]
 8001046:	f000 ff53 	bl	8001ef0 <HAL_GPIO_ReadPin>
	Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 800104a:	8861      	ldrh	r1, [r4, #2]
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 800104c:	7320      	strb	r0, [r4, #12]
	Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 800104e:	68a0      	ldr	r0, [r4, #8]
 8001050:	f000 ff4e 	bl	8001ef0 <HAL_GPIO_ReadPin>
 8001054:	7360      	strb	r0, [r4, #13]
	Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 8001056:	7828      	ldrb	r0, [r5, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <Encoder_Attach+0xac>)
 800105a:	0082      	lsls	r2, r0, #2
 800105c:	50d4      	str	r4, [r2, r3]
	Attached_Encoders++;
 800105e:	1c43      	adds	r3, r0, #1
 8001060:	702b      	strb	r3, [r5, #0]
	}

    }
 8001062:	b00a      	add	sp, #40	; 0x28
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	2000006b 	.word	0x2000006b
 800106c:	40021000 	.word	0x40021000
 8001070:	2000006c 	.word	0x2000006c

08001074 <Encoder_Scan>:

/* call in millis callback or systick callback */
void Encoder_Scan()
    {
 8001074:	b570      	push	{r4, r5, r6, lr}

    Encoder_Struct_t *PTR = NULL;

    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8001076:	2500      	movs	r5, #0
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <Encoder_Scan+0xb4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	42ab      	cmp	r3, r5
 800107e:	d800      	bhi.n	8001082 <Encoder_Scan+0xe>
		PTR->Encoder_Time_Stamp = HAL_GetTick();
		}
	    }
	}

    }
 8001080:	bd70      	pop	{r4, r5, r6, pc}
	PTR = Encoder_Struct_PTR_Array[Index];
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <Encoder_Scan+0xb8>)
 8001084:	00aa      	lsls	r2, r5, #2
 8001086:	58d4      	ldr	r4, [r2, r3]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 8001088:	8821      	ldrh	r1, [r4, #0]
 800108a:	6860      	ldr	r0, [r4, #4]
 800108c:	f000 ff30 	bl	8001ef0 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_0__State)
 8001090:	7b23      	ldrb	r3, [r4, #12]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 8001092:	4298      	cmp	r0, r3
 8001094:	d013      	beq.n	80010be <Encoder_Scan+0x4a>
	    PTR->Encoder_Pin_0__State = !PTR->Encoder_Pin_0__State;
 8001096:	425a      	negs	r2, r3
 8001098:	415a      	adcs	r2, r3
 800109a:	7322      	strb	r2, [r4, #12]
	    if (PTR->Encoder_Pin_0__State && !PTR->Encoder_Pin_1__State)
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10e      	bne.n	80010be <Encoder_Scan+0x4a>
 80010a0:	7b63      	ldrb	r3, [r4, #13]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10b      	bne.n	80010be <Encoder_Scan+0x4a>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 80010a6:	f000 fc19 	bl	80018dc <HAL_GetTick>
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	1ac0      	subs	r0, r0, r3
 80010ae:	280a      	cmp	r0, #10
 80010b0:	d923      	bls.n	80010fa <Encoder_Scan+0x86>
		    PTR->Encoder_Count += 1;
 80010b2:	8aa3      	ldrh	r3, [r4, #20]
 80010b4:	3301      	adds	r3, #1
		    PTR->Encoder_Count += 50;
 80010b6:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 80010b8:	f000 fc10 	bl	80018dc <HAL_GetTick>
 80010bc:	6120      	str	r0, [r4, #16]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 80010be:	8861      	ldrh	r1, [r4, #2]
 80010c0:	68a0      	ldr	r0, [r4, #8]
 80010c2:	f000 ff15 	bl	8001ef0 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_1__State)
 80010c6:	7b63      	ldrb	r3, [r4, #13]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	d013      	beq.n	80010f4 <Encoder_Scan+0x80>
	    PTR->Encoder_Pin_1__State = !PTR->Encoder_Pin_1__State;
 80010cc:	425a      	negs	r2, r3
 80010ce:	415a      	adcs	r2, r3
 80010d0:	7362      	strb	r2, [r4, #13]
	    if (PTR->Encoder_Pin_1__State && !PTR->Encoder_Pin_0__State)
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10e      	bne.n	80010f4 <Encoder_Scan+0x80>
 80010d6:	7b23      	ldrb	r3, [r4, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10b      	bne.n	80010f4 <Encoder_Scan+0x80>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 80010dc:	f000 fbfe 	bl	80018dc <HAL_GetTick>
 80010e0:	6923      	ldr	r3, [r4, #16]
 80010e2:	1ac0      	subs	r0, r0, r3
 80010e4:	280a      	cmp	r0, #10
 80010e6:	d913      	bls.n	8001110 <Encoder_Scan+0x9c>
		    PTR->Encoder_Count -= 1;
 80010e8:	8aa3      	ldrh	r3, [r4, #20]
 80010ea:	3b01      	subs	r3, #1
		    PTR->Encoder_Count -= 50;
 80010ec:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 80010ee:	f000 fbf5 	bl	80018dc <HAL_GetTick>
 80010f2:	6120      	str	r0, [r4, #16]
    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 80010f4:	3501      	adds	r5, #1
 80010f6:	b2ed      	uxtb	r5, r5
 80010f8:	e7be      	b.n	8001078 <Encoder_Scan+0x4>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 80010fa:	f000 fbef 	bl	80018dc <HAL_GetTick>
 80010fe:	6923      	ldr	r3, [r4, #16]
 8001100:	1ac0      	subs	r0, r0, r3
 8001102:	8aa3      	ldrh	r3, [r4, #20]
 8001104:	2805      	cmp	r0, #5
 8001106:	d901      	bls.n	800110c <Encoder_Scan+0x98>
		    PTR->Encoder_Count += 10;
 8001108:	330a      	adds	r3, #10
 800110a:	e7d4      	b.n	80010b6 <Encoder_Scan+0x42>
		    PTR->Encoder_Count += 50;
 800110c:	3332      	adds	r3, #50	; 0x32
 800110e:	e7d2      	b.n	80010b6 <Encoder_Scan+0x42>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 8001110:	f000 fbe4 	bl	80018dc <HAL_GetTick>
 8001114:	6923      	ldr	r3, [r4, #16]
 8001116:	1ac0      	subs	r0, r0, r3
 8001118:	8aa3      	ldrh	r3, [r4, #20]
 800111a:	2805      	cmp	r0, #5
 800111c:	d901      	bls.n	8001122 <Encoder_Scan+0xae>
		    PTR->Encoder_Count -= 10;
 800111e:	3b0a      	subs	r3, #10
 8001120:	e7e4      	b.n	80010ec <Encoder_Scan+0x78>
		    PTR->Encoder_Count -= 50;
 8001122:	3b32      	subs	r3, #50	; 0x32
 8001124:	e7e2      	b.n	80010ec <Encoder_Scan+0x78>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	2000006b 	.word	0x2000006b
 800112c:	2000006c 	.word	0x2000006c

08001130 <Encoder_Get_Count>:

int16_t Encoder_Get_Count(Encoder_Struct_t *PTR)
    {
 8001130:	1e03      	subs	r3, r0, #0

    if (PTR != NULL)
 8001132:	d001      	beq.n	8001138 <Encoder_Get_Count+0x8>
	{
	return PTR->Encoder_Count;
 8001134:	2014      	movs	r0, #20
 8001136:	5e18      	ldrsh	r0, [r3, r0]
    else
	{
	//Error
	return 0;
	}
    }
 8001138:	4770      	bx	lr

0800113a <Encoder_Set_Count>:

/* to reset*/
void Encoder_Set_Count(Encoder_Struct_t *PTR, int16_t count)
    {

    if (PTR != NULL)
 800113a:	2800      	cmp	r0, #0
 800113c:	d000      	beq.n	8001140 <Encoder_Set_Count+0x6>
	{
	PTR->Encoder_Count = count;
 800113e:	8281      	strh	r1, [r0, #20]
	}
    else
	{
	//Error
	}
    }
 8001140:	4770      	bx	lr

08001142 <Soft_I2C_SDA_High>:
#include "soft_i2c.h"
#include "delay_us.h"


void Soft_I2C_SDA_High(Soft_I2C_t* i2c_handle)
    {
 8001142:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001144:	2201      	movs	r2, #1
 8001146:	8981      	ldrh	r1, [r0, #12]
 8001148:	6880      	ldr	r0, [r0, #8]
 800114a:	f000 fed7 	bl	8001efc <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 800114e:	bd10      	pop	{r4, pc}

08001150 <Soft_I2C_SDA_Low>:

void Soft_I2C_SDA_Low(Soft_I2C_t* i2c_handle)
    {
 8001150:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001152:	2200      	movs	r2, #0
 8001154:	8981      	ldrh	r1, [r0, #12]
 8001156:	6880      	ldr	r0, [r0, #8]
 8001158:	f000 fed0 	bl	8001efc <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 800115c:	bd10      	pop	{r4, pc}

0800115e <Soft_I2C_SDA_Read>:

uint8_t Soft_I2C_SDA_Read(Soft_I2C_t* i2c_handle)
    {
 800115e:	b510      	push	{r4, lr}
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 8001160:	8981      	ldrh	r1, [r0, #12]
 8001162:	6880      	ldr	r0, [r0, #8]
 8001164:	f000 fec4 	bl	8001ef0 <HAL_GPIO_ReadPin>
    }
 8001168:	bd10      	pop	{r4, pc}

0800116a <Soft_I2C_SCL_High>:

void Soft_I2C_SCL_High(Soft_I2C_t* i2c_handle)
    {
 800116a:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800116c:	2201      	movs	r2, #1
 800116e:	8881      	ldrh	r1, [r0, #4]
 8001170:	6800      	ldr	r0, [r0, #0]
 8001172:	f000 fec3 	bl	8001efc <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 8001176:	bd10      	pop	{r4, pc}

08001178 <Soft_I2C_SCL_Low>:

void Soft_I2C_SCL_Low(Soft_I2C_t* i2c_handle)
    {
 8001178:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800117a:	2200      	movs	r2, #0
 800117c:	8881      	ldrh	r1, [r0, #4]
 800117e:	6800      	ldr	r0, [r0, #0]
 8001180:	f000 febc 	bl	8001efc <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 8001184:	bd10      	pop	{r4, pc}
	...

08001188 <Soft_I2C_Init>:
    {
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin);
    }

void Soft_I2C_Init(Soft_I2C_t* i2c_handle)
    {
 8001188:	b510      	push	{r4, lr}
 800118a:	0004      	movs	r4, r0

    GPIO_InitTypeDef GPIO_Init;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 800118c:	2080      	movs	r0, #128	; 0x80
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <Soft_I2C_Init+0x84>)
 8001190:	0300      	lsls	r0, r0, #12
 8001192:	6959      	ldr	r1, [r3, #20]
    {
 8001194:	b08a      	sub	sp, #40	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8001196:	4301      	orrs	r1, r0
 8001198:	6159      	str	r1, [r3, #20]
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOD_CLK_ENABLE()
 800119e:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE()
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 80011a4:	6959      	ldr	r1, [r3, #20]
 80011a6:	0340      	lsls	r0, r0, #13
 80011a8:	4301      	orrs	r1, r0
 80011aa:	6159      	str	r1, [r3, #20]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80011b0:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE()
 80011b2:	9202      	str	r2, [sp, #8]
 80011b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80011b6:	6959      	ldr	r1, [r3, #20]
 80011b8:	0280      	lsls	r0, r0, #10
 80011ba:	4301      	orrs	r1, r0
 80011bc:	6159      	str	r1, [r3, #20]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80011be:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80011c0:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80011c2:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80011c4:	4002      	ands	r2, r0
 80011c6:	9203      	str	r2, [sp, #12]
 80011c8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80011ca:	695a      	ldr	r2, [r3, #20]
    ;
    Soft_I2C_SDA_High(i2c_handle);
 80011cc:	0020      	movs	r0, r4
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80011ce:	430a      	orrs	r2, r1
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	400b      	ands	r3, r1
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	9b04      	ldr	r3, [sp, #16]
    Soft_I2C_SDA_High(i2c_handle);
 80011da:	f7ff ffb2 	bl	8001142 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 80011de:	0020      	movs	r0, r4
 80011e0:	f7ff ffc3 	bl	800116a <Soft_I2C_SCL_High>

    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
 80011e4:	2311      	movs	r3, #17
 80011e6:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull  = GPIO_PULLUP;
 80011e8:	3b10      	subs	r3, #16
 80011ea:	9307      	str	r3, [sp, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	9308      	str	r3, [sp, #32]

    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80011ee:	89a3      	ldrh	r3, [r4, #12]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80011f0:	a905      	add	r1, sp, #20
 80011f2:	68a0      	ldr	r0, [r4, #8]
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80011f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80011f6:	f000 fdcb 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 80011fa:	88a3      	ldrh	r3, [r4, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 80011fc:	a905      	add	r1, sp, #20
 80011fe:	6820      	ldr	r0, [r4, #0]
    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 8001200:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 8001202:	f000 fdc5 	bl	8001d90 <HAL_GPIO_Init>
    }
 8001206:	b00a      	add	sp, #40	; 0x28
 8001208:	bd10      	pop	{r4, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	40021000 	.word	0x40021000

08001210 <Soft_I2C_Start>:


/*generate start condition */

uint8_t Soft_I2C_Start(Soft_I2C_t* i2c_handle)
    {
 8001210:	b510      	push	{r4, lr}
 8001212:	0004      	movs	r4, r0

    Soft_I2C_SCL_High(i2c_handle);
 8001214:	f7ff ffa9 	bl	800116a <Soft_I2C_SCL_High>
    Soft_I2C_SDA_Low(i2c_handle);
 8001218:	0020      	movs	r0, r4
 800121a:	f7ff ff99 	bl	8001150 <Soft_I2C_SDA_Low>
    asm("nop");
 800121e:	46c0      	nop			; (mov r8, r8)

    Soft_I2C_Delay();

    if (Soft_I2C_SDA_Read(i2c_handle))
 8001220:	0020      	movs	r0, r4
 8001222:	f7ff ff9c 	bl	800115e <Soft_I2C_SDA_Read>
 8001226:	1e43      	subs	r3, r0, #1
 8001228:	4198      	sbcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}

    return SOFT_I2C_OK;
    }
 800122a:	b2c0      	uxtb	r0, r0
 800122c:	bd10      	pop	{r4, pc}

0800122e <Soft_I2C_Stop>:

/*generate stop condition */

void Soft_I2C_Stop(Soft_I2C_t* i2c_handle)
    {
 800122e:	b510      	push	{r4, lr}
 8001230:	0004      	movs	r4, r0
    Soft_I2C_SCL_Low(i2c_handle);
 8001232:	f7ff ffa1 	bl	8001178 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 8001236:	0020      	movs	r0, r4
 8001238:	f7ff ff8a 	bl	8001150 <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 800123c:	0020      	movs	r0, r4
 800123e:	f7ff ff94 	bl	800116a <Soft_I2C_SCL_High>
    asm("nop");
 8001242:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SDA_High(i2c_handle);
 8001244:	0020      	movs	r0, r4
 8001246:	f7ff ff7c 	bl	8001142 <Soft_I2C_SDA_High>
    }
 800124a:	bd10      	pop	{r4, pc}

0800124c <Soft_I2C_Wait_ACK>:

uint8_t Soft_I2C_Wait_ACK(Soft_I2C_t* i2c_handle)
    {
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	0004      	movs	r4, r0

    uint16_t timeOut = 5000;

    Soft_I2C_SCL_Low(i2c_handle);
 8001250:	f7ff ff92 	bl	8001178 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 8001254:	0020      	movs	r0, r4
 8001256:	f7ff ff74 	bl	8001142 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 800125a:	0020      	movs	r0, r4
 800125c:	f7ff ff85 	bl	800116a <Soft_I2C_SCL_High>
    asm("nop");
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	4d0a      	ldr	r5, [pc, #40]	; (800128c <Soft_I2C_Wait_ACK+0x40>)
    Soft_I2C_Delay();

    while (Soft_I2C_SDA_Read(i2c_handle))
 8001264:	0020      	movs	r0, r4
 8001266:	f7ff ff7a 	bl	800115e <Soft_I2C_SDA_Read>
 800126a:	1e06      	subs	r6, r0, #0
 800126c:	d103      	bne.n	8001276 <Soft_I2C_Wait_ACK+0x2a>
	    Soft_I2C_Stop(i2c_handle);
	    return SOFT_I2C_ERR;
	    }
	}

    Soft_I2C_SCL_Low(i2c_handle);
 800126e:	0020      	movs	r0, r4
 8001270:	f7ff ff82 	bl	8001178 <Soft_I2C_SCL_Low>

    return SOFT_I2C_OK;
 8001274:	e007      	b.n	8001286 <Soft_I2C_Wait_ACK+0x3a>
 8001276:	3d01      	subs	r5, #1
 8001278:	b2ad      	uxth	r5, r5
	if (timeOut == 0)
 800127a:	2d00      	cmp	r5, #0
 800127c:	d1f2      	bne.n	8001264 <Soft_I2C_Wait_ACK+0x18>
	    Soft_I2C_Stop(i2c_handle);
 800127e:	0020      	movs	r0, r4
 8001280:	f7ff ffd5 	bl	800122e <Soft_I2C_Stop>
	    return SOFT_I2C_ERR;
 8001284:	2601      	movs	r6, #1

    }
 8001286:	0030      	movs	r0, r6
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	00001388 	.word	0x00001388

08001290 <Soft_I2C_Send_Byte>:
    Soft_I2C_Delay();

    }

uint8_t Soft_I2C_Send_Byte(Soft_I2C_t* i2c_handle, uint8_t byte)
    {
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	0004      	movs	r4, r0
 8001294:	000e      	movs	r6, r1

    uint8_t count = 8;

    Soft_I2C_SCL_Low(i2c_handle);

    while (count--)
 8001296:	2509      	movs	r5, #9
    Soft_I2C_SCL_Low(i2c_handle);
 8001298:	f7ff ff6e 	bl	8001178 <Soft_I2C_SCL_Low>
 800129c:	3d01      	subs	r5, #1
 800129e:	b2ed      	uxtb	r5, r5
    while (count--)
 80012a0:	2d00      	cmp	r5, #0
 80012a2:	d107      	bne.n	80012b4 <Soft_I2C_Send_Byte+0x24>
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	Soft_I2C_SCL_Low(i2c_handle);
	Soft_I2C_Delay();
	}
    if (Soft_I2C_Wait_ACK(i2c_handle) == SOFT_I2C_ERR)
 80012a4:	0020      	movs	r0, r4
 80012a6:	f7ff ffd1 	bl	800124c <Soft_I2C_Wait_ACK>
 80012aa:	3801      	subs	r0, #1
 80012ac:	4243      	negs	r3, r0
 80012ae:	4158      	adcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}
    return SOFT_I2C_OK;
    }
 80012b0:	b2c0      	uxtb	r0, r0
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
	if (byte & 0x80)
 80012b4:	b273      	sxtb	r3, r6
	    Soft_I2C_SDA_High(i2c_handle);
 80012b6:	0020      	movs	r0, r4
	if (byte & 0x80)
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da0c      	bge.n	80012d6 <Soft_I2C_Send_Byte+0x46>
	    Soft_I2C_SDA_High(i2c_handle);
 80012bc:	f7ff ff41 	bl	8001142 <Soft_I2C_SDA_High>
	Soft_I2C_SCL_High(i2c_handle);
 80012c0:	0020      	movs	r0, r4
	byte <<= 1;
 80012c2:	0076      	lsls	r6, r6, #1
	Soft_I2C_SCL_High(i2c_handle);
 80012c4:	f7ff ff51 	bl	800116a <Soft_I2C_SCL_High>
	byte <<= 1;
 80012c8:	b2f6      	uxtb	r6, r6
    asm("nop");
 80012ca:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_Low(i2c_handle);
 80012cc:	0020      	movs	r0, r4
 80012ce:	f7ff ff53 	bl	8001178 <Soft_I2C_SCL_Low>
    asm("nop");
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	e7e2      	b.n	800129c <Soft_I2C_Send_Byte+0xc>
	    Soft_I2C_SDA_Low(i2c_handle);
 80012d6:	f7ff ff3b 	bl	8001150 <Soft_I2C_SDA_Low>
 80012da:	e7f1      	b.n	80012c0 <Soft_I2C_Send_Byte+0x30>

080012dc <Soft_I2C_Write_Byte>:

uint8_t Soft_I2C_Write_Byte(Soft_I2C_t* i2c_handle,
	                    uint8_t     slave_address,
	                    uint8_t     register_address,
			    uint8_t     *byte)
    {
 80012dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012de:	0004      	movs	r4, r0
 80012e0:	9101      	str	r1, [sp, #4]
 80012e2:	0017      	movs	r7, r2
 80012e4:	001e      	movs	r6, r3

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 80012e6:	f7ff ff93 	bl	8001210 <Soft_I2C_Start>
 80012ea:	0005      	movs	r5, r0
 80012ec:	2801      	cmp	r0, #1
 80012ee:	d104      	bne.n	80012fa <Soft_I2C_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(i2c_handle);
 80012f0:	0020      	movs	r0, r4
 80012f2:	f7ff ff9c 	bl	800122e <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 80012f6:	0028      	movs	r0, r5
 80012f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80012fa:	9901      	ldr	r1, [sp, #4]
 80012fc:	0020      	movs	r0, r4
 80012fe:	f7ff ffc7 	bl	8001290 <Soft_I2C_Send_Byte>
 8001302:	2801      	cmp	r0, #1
 8001304:	d101      	bne.n	800130a <Soft_I2C_Write_Byte+0x2e>
	return SOFT_I2C_ERR;
 8001306:	2501      	movs	r5, #1
 8001308:	e7f5      	b.n	80012f6 <Soft_I2C_Write_Byte+0x1a>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 800130a:	0039      	movs	r1, r7
 800130c:	0020      	movs	r0, r4
 800130e:	f7ff ffbf 	bl	8001290 <Soft_I2C_Send_Byte>
 8001312:	2801      	cmp	r0, #1
 8001314:	d0f7      	beq.n	8001306 <Soft_I2C_Write_Byte+0x2a>
    if (byte)
 8001316:	2e00      	cmp	r6, #0
 8001318:	d104      	bne.n	8001324 <Soft_I2C_Write_Byte+0x48>
    Soft_I2C_Stop(i2c_handle);
 800131a:	0020      	movs	r0, r4
 800131c:	f7ff ff87 	bl	800122e <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 8001320:	2500      	movs	r5, #0
 8001322:	e7e8      	b.n	80012f6 <Soft_I2C_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(i2c_handle, *byte) == SOFT_I2C_ERR)
 8001324:	7831      	ldrb	r1, [r6, #0]
 8001326:	0020      	movs	r0, r4
 8001328:	f7ff ffb2 	bl	8001290 <Soft_I2C_Send_Byte>
 800132c:	2801      	cmp	r0, #1
 800132e:	d1f4      	bne.n	800131a <Soft_I2C_Write_Byte+0x3e>
 8001330:	e7e9      	b.n	8001306 <Soft_I2C_Write_Byte+0x2a>

08001332 <Soft_I2C_Write_Bytes>:
uint8_t Soft_I2C_Write_Bytes(Soft_I2C_t* i2c_handle,
	                     uint8_t     slave_address,
	                     uint8_t     register_address,
			     uint8_t     *buf,
			     uint8_t     num)
    {
 8001332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	ab08      	add	r3, sp, #32
 8001338:	0004      	movs	r4, r0
 800133a:	000f      	movs	r7, r1
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	781e      	ldrb	r6, [r3, #0]

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 8001340:	f7ff ff66 	bl	8001210 <Soft_I2C_Start>
 8001344:	0005      	movs	r5, r0
 8001346:	2801      	cmp	r0, #1
 8001348:	d104      	bne.n	8001354 <Soft_I2C_Write_Bytes+0x22>
	{
	Soft_I2C_Stop(i2c_handle);
 800134a:	0020      	movs	r0, r4
 800134c:	f7ff ff6f 	bl	800122e <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 8001350:	0028      	movs	r0, r5
 8001352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 8001354:	0039      	movs	r1, r7
 8001356:	0020      	movs	r0, r4
 8001358:	f7ff ff9a 	bl	8001290 <Soft_I2C_Send_Byte>
 800135c:	2801      	cmp	r0, #1
 800135e:	d101      	bne.n	8001364 <Soft_I2C_Write_Bytes+0x32>
	return SOFT_I2C_ERR;
 8001360:	2501      	movs	r5, #1
 8001362:	e7f5      	b.n	8001350 <Soft_I2C_Write_Bytes+0x1e>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 8001364:	9900      	ldr	r1, [sp, #0]
 8001366:	0020      	movs	r0, r4
 8001368:	f7ff ff92 	bl	8001290 <Soft_I2C_Send_Byte>
 800136c:	2801      	cmp	r0, #1
 800136e:	d0f7      	beq.n	8001360 <Soft_I2C_Write_Bytes+0x2e>
 8001370:	9d01      	ldr	r5, [sp, #4]
 8001372:	19ae      	adds	r6, r5, r6
    while (num--)
 8001374:	42b5      	cmp	r5, r6
 8001376:	d104      	bne.n	8001382 <Soft_I2C_Write_Bytes+0x50>
    Soft_I2C_Stop(i2c_handle);
 8001378:	0020      	movs	r0, r4
 800137a:	f7ff ff58 	bl	800122e <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 800137e:	2500      	movs	r5, #0
 8001380:	e7e6      	b.n	8001350 <Soft_I2C_Write_Bytes+0x1e>
	if (Soft_I2C_Send_Byte(i2c_handle, *buf++) == SOFT_I2C_ERR)
 8001382:	7829      	ldrb	r1, [r5, #0]
 8001384:	0020      	movs	r0, r4
 8001386:	f7ff ff83 	bl	8001290 <Soft_I2C_Send_Byte>
 800138a:	3501      	adds	r5, #1
 800138c:	2801      	cmp	r0, #1
 800138e:	d1f1      	bne.n	8001374 <Soft_I2C_Write_Bytes+0x42>
 8001390:	e7e6      	b.n	8001360 <Soft_I2C_Write_Bytes+0x2e>
	...

08001394 <Set_Auto_Pulse_Delay>:

#define SOFT_I2C_SCL_PIN		GPIO_PIN_9
#define SOFT_I2C_SCL_PORT		GPIOA

void Set_Auto_Pulse_Delay(int16_t delay)
    {
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <Set_Auto_Pulse_Delay+0x1c>)
 8001396:	1c03      	adds	r3, r0, #0
 8001398:	4290      	cmp	r0, r2
 800139a:	dd00      	ble.n	800139e <Set_Auto_Pulse_Delay+0xa>
 800139c:	1c13      	adds	r3, r2, #0
	}
    if (delay > 10000)
	{
	delay = 10000;
	}
    Auto_Pulse_Delay = delay;
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	b219      	sxth	r1, r3
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	4291      	cmp	r1, r2
 80013a6:	da00      	bge.n	80013aa <Set_Auto_Pulse_Delay+0x16>
 80013a8:	1c13      	adds	r3, r2, #0
 80013aa:	4a02      	ldr	r2, [pc, #8]	; (80013b4 <Set_Auto_Pulse_Delay+0x20>)
 80013ac:	8013      	strh	r3, [r2, #0]
    }
 80013ae:	4770      	bx	lr
 80013b0:	00002710 	.word	0x00002710
 80013b4:	2000001a 	.word	0x2000001a

080013b8 <Get_Auto_Pulse_Delay>:

uint16_t Get_Auto_Pulse_Delay()
    {
    return Auto_Pulse_Delay;
 80013b8:	4b01      	ldr	r3, [pc, #4]	; (80013c0 <Get_Auto_Pulse_Delay+0x8>)
 80013ba:	8818      	ldrh	r0, [r3, #0]
    }
 80013bc:	4770      	bx	lr
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	2000001a 	.word	0x2000001a

080013c4 <Set_Main_Pulse_Duration>:


void Set_Main_Pulse_Duration(int16_t duration)
    {
 80013c4:	1c03      	adds	r3, r0, #0
 80013c6:	2832      	cmp	r0, #50	; 0x32
 80013c8:	dd00      	ble.n	80013cc <Set_Main_Pulse_Duration+0x8>
 80013ca:	2332      	movs	r3, #50	; 0x32
	}
    if (duration > 50)
	{
	duration = 50;
	}
    Main_Pulse_Duration = duration;
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	dc00      	bgt.n	80013d4 <Set_Main_Pulse_Duration+0x10>
 80013d2:	2301      	movs	r3, #1
 80013d4:	4a01      	ldr	r2, [pc, #4]	; (80013dc <Set_Main_Pulse_Duration+0x18>)
 80013d6:	8013      	strh	r3, [r2, #0]
    }
 80013d8:	4770      	bx	lr
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	2000001e 	.word	0x2000001e

080013e0 <Get_Main_Pulse_Duration>:

uint16_t Get_Main_Pulse_Duration()
    {
    return Main_Pulse_Duration;
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <Get_Main_Pulse_Duration+0x8>)
 80013e2:	8818      	ldrh	r0, [r3, #0]
    }
 80013e4:	4770      	bx	lr
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	2000001e 	.word	0x2000001e

080013ec <Set_Short_Pulse_Duration>:

void Set_Short_Pulse_Duration(int16_t duration)
    {
 80013ec:	1c03      	adds	r3, r0, #0
 80013ee:	2814      	cmp	r0, #20
 80013f0:	dd00      	ble.n	80013f4 <Set_Short_Pulse_Duration+0x8>
 80013f2:	2314      	movs	r3, #20
	}
    if (duration > 20)
	{
	duration = 20;
	}
    Short_Pulse_Duration = duration;
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	dc00      	bgt.n	80013fc <Set_Short_Pulse_Duration+0x10>
 80013fa:	2301      	movs	r3, #1
 80013fc:	4a01      	ldr	r2, [pc, #4]	; (8001404 <Set_Short_Pulse_Duration+0x18>)
 80013fe:	8013      	strh	r3, [r2, #0]
    }
 8001400:	4770      	bx	lr
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20000020 	.word	0x20000020

08001408 <Get_Short_Pulse_Duration>:

uint16_t Get_Short_Pulse_Duration()
    {
    return Short_Pulse_Duration;
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <Get_Short_Pulse_Duration+0x8>)
 800140a:	8818      	ldrh	r0, [r3, #0]
    }
 800140c:	4770      	bx	lr
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000020 	.word	0x20000020

08001414 <Set_Batt_Alarm>:


void Set_Batt_Alarm(int16_t voltage)
    {
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <Set_Batt_Alarm+0x1c>)
 8001416:	1c03      	adds	r3, r0, #0
 8001418:	4290      	cmp	r0, r2
 800141a:	dd00      	ble.n	800141e <Set_Batt_Alarm+0xa>
 800141c:	1c13      	adds	r3, r2, #0
	}
    if (voltage > 13000)
	{
	voltage = 13000;
	}
    Batt_Alarm = voltage;
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <Set_Batt_Alarm+0x20>)
 8001420:	b219      	sxth	r1, r3
 8001422:	4291      	cmp	r1, r2
 8001424:	da00      	bge.n	8001428 <Set_Batt_Alarm+0x14>
 8001426:	1c13      	adds	r3, r2, #0
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <Set_Batt_Alarm+0x24>)
 800142a:	8013      	strh	r3, [r2, #0]
    }
 800142c:	4770      	bx	lr
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	000032c8 	.word	0x000032c8
 8001434:	00002710 	.word	0x00002710
 8001438:	2000001c 	.word	0x2000001c

0800143c <Get_Batt_Alarm>:

uint16_t Get_Batt_Alarm()
    {
    return Batt_Alarm;
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <Get_Batt_Alarm+0x8>)
 800143e:	8818      	ldrh	r0, [r3, #0]
    }
 8001440:	4770      	bx	lr
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	2000001c 	.word	0x2000001c

08001448 <Disble_Welder>:

void Disble_Welder()
    {
    Welder_Enable_Flag = 0;
 8001448:	2200      	movs	r2, #0
 800144a:	4b01      	ldr	r3, [pc, #4]	; (8001450 <Disble_Welder+0x8>)
 800144c:	701a      	strb	r2, [r3, #0]
    }
 800144e:	4770      	bx	lr
 8001450:	20000022 	.word	0x20000022

08001454 <Get_Welder_Status>:

uint8_t Get_Welder_Status()
    {
    return Welder_Enable_Flag;
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <Get_Welder_Status+0x8>)
 8001456:	7818      	ldrb	r0, [r3, #0]
    }
 8001458:	4770      	bx	lr
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	20000022 	.word	0x20000022

08001460 <Disble_Auto_Welder>:

void Disble_Auto_Welder()
    {
    Welder_Auto_Flag = 0;
 8001460:	2200      	movs	r2, #0
 8001462:	4b01      	ldr	r3, [pc, #4]	; (8001468 <Disble_Auto_Welder+0x8>)
 8001464:	701a      	strb	r2, [r3, #0]
    }
 8001466:	4770      	bx	lr
 8001468:	20000078 	.word	0x20000078

0800146c <Enable_Auto_Welder>:

void Enable_Auto_Welder()
    {
    Welder_Auto_Flag = 1;
 800146c:	2201      	movs	r2, #1
 800146e:	4b01      	ldr	r3, [pc, #4]	; (8001474 <Enable_Auto_Welder+0x8>)
 8001470:	701a      	strb	r2, [r3, #0]
    }
 8001472:	4770      	bx	lr
 8001474:	20000078 	.word	0x20000078

08001478 <Get_Foot_Switch_Status>:
    {
    if (!Get_Auto_Status())
	{
	return HAL_GPIO_ReadPin(Foot_Switch_GPIO_Port, Foot_Switch_Pin)?0:1;
	}
    return 0;
 8001478:	2000      	movs	r0, #0
    {
 800147a:	b510      	push	{r4, lr}
    return Welder_Auto_Flag;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <Get_Foot_Switch_Status+0x20>)
    if (!Get_Auto_Status())
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4283      	cmp	r3, r0
 8001482:	d107      	bne.n	8001494 <Get_Foot_Switch_Status+0x1c>
	return HAL_GPIO_ReadPin(Foot_Switch_GPIO_Port, Foot_Switch_Pin)?0:1;
 8001484:	2090      	movs	r0, #144	; 0x90
 8001486:	2110      	movs	r1, #16
 8001488:	05c0      	lsls	r0, r0, #23
 800148a:	f000 fd31 	bl	8001ef0 <HAL_GPIO_ReadPin>
 800148e:	4243      	negs	r3, r0
 8001490:	4158      	adcs	r0, r3
 8001492:	b2c0      	uxtb	r0, r0
    }
 8001494:	bd10      	pop	{r4, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	20000078 	.word	0x20000078

0800149c <Get_Auto_Puse_In_Status>:

uint8_t Get_Auto_Puse_In_Status()
    {
 800149c:	b510      	push	{r4, lr}
    return Welder_Auto_Flag;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <Get_Auto_Puse_In_Status+0x18>)
 80014a0:	7818      	ldrb	r0, [r3, #0]
    if (Get_Auto_Status())
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d004      	beq.n	80014b0 <Get_Auto_Puse_In_Status+0x14>
	{
	return HAL_GPIO_ReadPin(Auto_Pulse_In_GPIO_Port, Auto_Pulse_In_Pin);
 80014a6:	2090      	movs	r0, #144	; 0x90
 80014a8:	2101      	movs	r1, #1
 80014aa:	05c0      	lsls	r0, r0, #23
 80014ac:	f000 fd20 	bl	8001ef0 <HAL_GPIO_ReadPin>
	}
    return 0;
    }
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	20000078 	.word	0x20000078

080014b8 <Spot_Welder_Main>:

void Spot_Welder_Main()
    {

    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	4822      	ldr	r0, [pc, #136]	; (8001544 <Spot_Welder_Main+0x8c>)
 80014bc:	009b      	lsls	r3, r3, #2
    {
 80014be:	b510      	push	{r4, lr}
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;

    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 80014c0:	2280      	movs	r2, #128	; 0x80
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 80014c2:	8083      	strh	r3, [r0, #4]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 80014c4:	2390      	movs	r3, #144	; 0x90
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 80014c6:	00d2      	lsls	r2, r2, #3
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	6003      	str	r3, [r0, #0]
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 80014cc:	8182      	strh	r2, [r0, #12]
    Soft_I2C1.GPIO_SDA_Port = SOFT_I2C_SDA_PORT;
 80014ce:	6083      	str	r3, [r0, #8]

    Soft_I2C_Init(&Soft_I2C1);
 80014d0:	f7ff fe5a 	bl	8001188 <Soft_I2C_Init>

    ssd1306_Init();
 80014d4:	f000 f884 	bl	80015e0 <ssd1306_Init>

    ssd1306_Fill(Black);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f84f 	bl	800157c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	0008      	movs	r0, r1
 80014e2:	f000 f967 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("  Arduino", Font_11x18, White);
 80014e6:	4c18      	ldr	r4, [pc, #96]	; (8001548 <Spot_Welder_Main+0x90>)
 80014e8:	2301      	movs	r3, #1
 80014ea:	6862      	ldr	r2, [r4, #4]
 80014ec:	6821      	ldr	r1, [r4, #0]
 80014ee:	4817      	ldr	r0, [pc, #92]	; (800154c <Spot_Welder_Main+0x94>)
 80014f0:	f000 f94c 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80014f4:	2114      	movs	r1, #20
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f95c 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Spot Welder", Font_11x18, White);
 80014fc:	2301      	movs	r3, #1
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	6862      	ldr	r2, [r4, #4]
 8001502:	4813      	ldr	r0, [pc, #76]	; (8001550 <Spot_Welder_Main+0x98>)
 8001504:	f000 f942 	bl	800178c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8001508:	2128      	movs	r1, #40	; 0x28
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f952 	bl	80017b4 <ssd1306_SetCursor>
    ssd1306_WriteString("    V3", Font_11x18, White);
 8001510:	cc06      	ldmia	r4!, {r1, r2}
 8001512:	2301      	movs	r3, #1
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <Spot_Welder_Main+0x9c>)
 8001516:	f000 f939 	bl	800178c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800151a:	f000 f83d 	bl	8001598 <ssd1306_UpdateScreen>

    Menu_Init();
 800151e:	f7ff f87b 	bl	8000618 <Menu_Init>

    HAL_Delay(2000);
 8001522:	20fa      	movs	r0, #250	; 0xfa
 8001524:	00c0      	lsls	r0, r0, #3
 8001526:	f000 f9df 	bl	80018e8 <HAL_Delay>
    while (1)
	{

	static uint32_t Scan_Time_Stamp = 0;

	if (HAL_GetTick() - Scan_Time_Stamp > (100 - 1))
 800152a:	f000 f9d7 	bl	80018dc <HAL_GetTick>
 800152e:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <Spot_Welder_Main+0xa0>)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	1ac0      	subs	r0, r0, r3
 8001534:	2863      	cmp	r0, #99	; 0x63
 8001536:	d9f8      	bls.n	800152a <Spot_Welder_Main+0x72>
	    {

	    Scan_Time_Stamp = HAL_GetTick();
 8001538:	f000 f9d0 	bl	80018dc <HAL_GetTick>
 800153c:	6020      	str	r0, [r4, #0]

	    Menu_Loop();
 800153e:	f7ff f8a7 	bl	8000690 <Menu_Loop>
 8001542:	e7f2      	b.n	800152a <Spot_Welder_Main+0x72>
 8001544:	200004fc 	.word	0x200004fc
 8001548:	20000000 	.word	0x20000000
 800154c:	08003b50 	.word	0x08003b50
 8001550:	08003b5a 	.word	0x08003b5a
 8001554:	08003b66 	.word	0x08003b66
 8001558:	20000074 	.word	0x20000074

0800155c <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 800155c:	b507      	push	{r0, r1, r2, lr}
 800155e:	466b      	mov	r3, sp
 8001560:	3307      	adds	r3, #7
 8001562:	7018      	strb	r0, [r3, #0]
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 8001564:	2200      	movs	r2, #0
 8001566:	2178      	movs	r1, #120	; 0x78
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <ssd1306_WriteCommand+0x1c>)
 800156a:	f7ff feb7 	bl	80012dc <Soft_I2C_Write_Byte>
 800156e:	2801      	cmp	r0, #1
 8001570:	d101      	bne.n	8001576 <ssd1306_WriteCommand+0x1a>
    {
    	Error_Handler();
 8001572:	f7ff f813 	bl	800059c <Error_Handler>
    }
}
 8001576:	bd07      	pop	{r0, r1, r2, pc}
 8001578:	200004fc 	.word	0x200004fc

0800157c <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800157c:	1e42      	subs	r2, r0, #1
 800157e:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <ssd1306_Fill+0x18>)
 8001586:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001588:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800158a:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800158c:	3301      	adds	r3, #1
 800158e:	4293      	cmp	r3, r2
 8001590:	d1fb      	bne.n	800158a <ssd1306_Fill+0xe>
	}
}
 8001592:	4770      	bx	lr
 8001594:	20000080 	.word	0x20000080

08001598 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800159a:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 800159c:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 800159e:	0020      	movs	r0, r4
 80015a0:	3850      	subs	r0, #80	; 0x50
 80015a2:	b2c0      	uxtb	r0, r0
 80015a4:	f7ff ffda 	bl	800155c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ffd7 	bl	800155c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80015ae:	2010      	movs	r0, #16
 80015b0:	f7ff ffd4 	bl	800155c <ssd1306_WriteCommand>
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <ssd1306_UpdateScreen+0x40>)
 80015b6:	01e3      	lsls	r3, r4, #7
 80015b8:	189b      	adds	r3, r3, r2
 80015ba:	9500      	str	r5, [sp, #0]
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	2178      	movs	r1, #120	; 0x78
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <ssd1306_UpdateScreen+0x44>)
 80015c2:	f7ff feb6 	bl	8001332 <Soft_I2C_Write_Bytes>
 80015c6:	2801      	cmp	r0, #1
 80015c8:	d101      	bne.n	80015ce <ssd1306_UpdateScreen+0x36>
	    {
	    	Error_Handler();
 80015ca:	f7fe ffe7 	bl	800059c <Error_Handler>
 80015ce:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 80015d0:	2c08      	cmp	r4, #8
 80015d2:	d1e4      	bne.n	800159e <ssd1306_UpdateScreen+0x6>
	    }
	}
}
 80015d4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000080 	.word	0x20000080
 80015dc:	200004fc 	.word	0x200004fc

080015e0 <ssd1306_Init>:
{	
 80015e0:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(0xAE); //display off
 80015e2:	20ae      	movs	r0, #174	; 0xae
 80015e4:	f7ff ffba 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80015e8:	2020      	movs	r0, #32
 80015ea:	f7ff ffb7 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015ee:	2010      	movs	r0, #16
 80015f0:	f7ff ffb4 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015f4:	20b0      	movs	r0, #176	; 0xb0
 80015f6:	f7ff ffb1 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015fa:	20c8      	movs	r0, #200	; 0xc8
 80015fc:	f7ff ffae 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ffab 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001606:	2010      	movs	r0, #16
 8001608:	f7ff ffa8 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800160c:	2040      	movs	r0, #64	; 0x40
 800160e:	f7ff ffa5 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001612:	2081      	movs	r0, #129	; 0x81
 8001614:	f7ff ffa2 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001618:	20ff      	movs	r0, #255	; 0xff
 800161a:	f7ff ff9f 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800161e:	20a1      	movs	r0, #161	; 0xa1
 8001620:	f7ff ff9c 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001624:	20a6      	movs	r0, #166	; 0xa6
 8001626:	f7ff ff99 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800162a:	20a8      	movs	r0, #168	; 0xa8
 800162c:	f7ff ff96 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001630:	203f      	movs	r0, #63	; 0x3f
 8001632:	f7ff ff93 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001636:	20a4      	movs	r0, #164	; 0xa4
 8001638:	f7ff ff90 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800163c:	20d3      	movs	r0, #211	; 0xd3
 800163e:	f7ff ff8d 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff ff8a 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001648:	20d5      	movs	r0, #213	; 0xd5
 800164a:	f7ff ff87 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800164e:	20f0      	movs	r0, #240	; 0xf0
 8001650:	f7ff ff84 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001654:	20d9      	movs	r0, #217	; 0xd9
 8001656:	f7ff ff81 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800165a:	2022      	movs	r0, #34	; 0x22
 800165c:	f7ff ff7e 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001660:	20da      	movs	r0, #218	; 0xda
 8001662:	f7ff ff7b 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001666:	2012      	movs	r0, #18
 8001668:	f7ff ff78 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800166c:	20db      	movs	r0, #219	; 0xdb
 800166e:	f7ff ff75 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001672:	2020      	movs	r0, #32
 8001674:	f7ff ff72 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001678:	208d      	movs	r0, #141	; 0x8d
 800167a:	f7ff ff6f 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800167e:	2014      	movs	r0, #20
 8001680:	f7ff ff6c 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001684:	20af      	movs	r0, #175	; 0xaf
 8001686:	f7ff ff69 	bl	800155c <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ff76 	bl	800157c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001690:	f7ff ff82 	bl	8001598 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001694:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8001696:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <ssd1306_Init+0xc4>)
 800169a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800169c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800169e:	7158      	strb	r0, [r3, #5]
}
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	2000007a 	.word	0x2000007a

080016a8 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80016a8:	b243      	sxtb	r3, r0
{
 80016aa:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db16      	blt.n	80016de <ssd1306_DrawPixel+0x36>
 80016b0:	293f      	cmp	r1, #63	; 0x3f
 80016b2:	d814      	bhi.n	80016de <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <ssd1306_DrawPixel+0x40>)
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 80016bc:	4253      	negs	r3, r2
 80016be:	415a      	adcs	r2, r3
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	2407      	movs	r4, #7
 80016c4:	08cb      	lsrs	r3, r1, #3
 80016c6:	400c      	ands	r4, r1
 80016c8:	2101      	movs	r1, #1
 80016ca:	40a1      	lsls	r1, r4
 80016cc:	01db      	lsls	r3, r3, #7
 80016ce:	4d07      	ldr	r5, [pc, #28]	; (80016ec <ssd1306_DrawPixel+0x44>)
 80016d0:	1818      	adds	r0, r3, r0
 80016d2:	562e      	ldrsb	r6, [r5, r0]
 80016d4:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 80016d6:	2a01      	cmp	r2, #1
 80016d8:	d102      	bne.n	80016e0 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016da:	4333      	orrs	r3, r6
 80016dc:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 80016de:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016e0:	439e      	bics	r6, r3
 80016e2:	542e      	strb	r6, [r5, r0]
 80016e4:	e7fb      	b.n	80016de <ssd1306_DrawPixel+0x36>
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	2000007a 	.word	0x2000007a
 80016ec:	20000080 	.word	0x20000080

080016f0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	9303      	str	r3, [sp, #12]
 80016f6:	b2cb      	uxtb	r3, r1
 80016f8:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <ssd1306_WriteChar+0x98>)
{
 80016fc:	9106      	str	r1, [sp, #24]
 80016fe:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001700:	9901      	ldr	r1, [sp, #4]
 8001702:	881a      	ldrh	r2, [r3, #0]
{
 8001704:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	1852      	adds	r2, r2, r1
 800170a:	2a7f      	cmp	r2, #127	; 0x7f
 800170c:	dc3a      	bgt.n	8001784 <ssd1306_WriteChar+0x94>
 800170e:	aa06      	add	r2, sp, #24
 8001710:	7852      	ldrb	r2, [r2, #1]
 8001712:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001714:	885c      	ldrh	r4, [r3, #2]
 8001716:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001718:	2b3f      	cmp	r3, #63	; 0x3f
 800171a:	dc33      	bgt.n	8001784 <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800171c:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 800171e:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001720:	3b20      	subs	r3, #32
 8001722:	435a      	muls	r2, r3
 8001724:	b2e4      	uxtb	r4, r4
 8001726:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 8001728:	9b02      	ldr	r3, [sp, #8]
 800172a:	42bb      	cmp	r3, r7
 800172c:	d808      	bhi.n	8001740 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 800172e:	9a01      	ldr	r2, [sp, #4]
 8001730:	9b00      	ldr	r3, [sp, #0]
 8001732:	4694      	mov	ip, r2
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <ssd1306_WriteChar+0x98>)
 8001736:	4463      	add	r3, ip
 8001738:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 800173a:	0030      	movs	r0, r6
 800173c:	b009      	add	sp, #36	; 0x24
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8001740:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001742:	9b04      	ldr	r3, [sp, #16]
 8001744:	9a07      	ldr	r2, [sp, #28]
 8001746:	19db      	adds	r3, r3, r7
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	5a9b      	ldrh	r3, [r3, r2]
 800174c:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 800174e:	9b01      	ldr	r3, [sp, #4]
 8001750:	42ab      	cmp	r3, r5
 8001752:	d803      	bhi.n	800175c <ssd1306_WriteChar+0x6c>
 8001754:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 8001756:	3701      	adds	r7, #1
 8001758:	b2e4      	uxtb	r4, r4
 800175a:	e7e5      	b.n	8001728 <ssd1306_WriteChar+0x38>
 800175c:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	18e8      	adds	r0, r5, r3
 8001762:	9b05      	ldr	r3, [sp, #20]
 8001764:	0212      	lsls	r2, r2, #8
 8001766:	40ab      	lsls	r3, r5
 8001768:	b2c0      	uxtb	r0, r0
 800176a:	4213      	tst	r3, r2
 800176c:	d005      	beq.n	800177a <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800176e:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001770:	0021      	movs	r1, r4
 8001772:	f7ff ff99 	bl	80016a8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001776:	3501      	adds	r5, #1
 8001778:	e7e9      	b.n	800174e <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800177a:	9a03      	ldr	r2, [sp, #12]
 800177c:	4253      	negs	r3, r2
 800177e:	415a      	adcs	r2, r3
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	e7f5      	b.n	8001770 <ssd1306_WriteChar+0x80>
		return 0;
 8001784:	2600      	movs	r6, #0
 8001786:	e7d8      	b.n	800173a <ssd1306_WriteChar+0x4a>
 8001788:	2000007a 	.word	0x2000007a

0800178c <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800178c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800178e:	0004      	movs	r4, r0
 8001790:	001d      	movs	r5, r3
 8001792:	9100      	str	r1, [sp, #0]
 8001794:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8001796:	7820      	ldrb	r0, [r4, #0]
 8001798:	2800      	cmp	r0, #0
 800179a:	d100      	bne.n	800179e <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 800179c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800179e:	002b      	movs	r3, r5
 80017a0:	9900      	ldr	r1, [sp, #0]
 80017a2:	9a01      	ldr	r2, [sp, #4]
 80017a4:	f7ff ffa4 	bl	80016f0 <ssd1306_WriteChar>
 80017a8:	0003      	movs	r3, r0
 80017aa:	7820      	ldrb	r0, [r4, #0]
 80017ac:	4283      	cmp	r3, r0
 80017ae:	d1f5      	bne.n	800179c <ssd1306_WriteString+0x10>
		str++;
 80017b0:	3401      	adds	r4, #1
 80017b2:	e7f0      	b.n	8001796 <ssd1306_WriteString+0xa>

080017b4 <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <ssd1306_SetCursor+0x8>)
 80017b6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80017b8:	8059      	strh	r1, [r3, #2]
}
 80017ba:	4770      	bx	lr
 80017bc:	2000007a 	.word	0x2000007a

080017c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	2001      	movs	r0, #1
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_MspInit+0x2c>)
{
 80017c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	6999      	ldr	r1, [r3, #24]
 80017c8:	4301      	orrs	r1, r0
 80017ca:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4002      	ands	r2, r0
 80017d4:	9200      	str	r2, [sp, #0]
 80017d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	430a      	orrs	r2, r1
 80017dc:	61da      	str	r2, [r3, #28]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	400b      	ands	r3, r1
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	b002      	add	sp, #8
 80017e8:	4770      	bx	lr
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40021000 	.word	0x40021000

080017f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f0:	4770      	bx	lr

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler>

080017f4 <SVC_Handler>:
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 f863 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systic_Callback();
 80017fe:	f7fe fed5 	bl	80005ac <Systic_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	bd10      	pop	{r4, pc}

08001804 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001804:	4770      	bx	lr
	...

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001832:	f7ff ffe7 	bl	8001804 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001836:	f000 fe1f 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183a:	f7fe fe9d 	bl	8000578 <main>

0800183e <LoopForever>:

LoopForever:
    b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800184c:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8001850:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001854:	20000510 	.word	0x20000510

08001858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_IRQHandler>
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	20fa      	movs	r0, #250	; 0xfa
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_InitTick+0x3c>)
 8001864:	0080      	lsls	r0, r0, #2
 8001866:	7819      	ldrb	r1, [r3, #0]
 8001868:	f7fe fc58 	bl	800011c <__udivsi3>
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_InitTick+0x40>)
 800186e:	0001      	movs	r1, r0
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f7fe fc53 	bl	800011c <__udivsi3>
 8001876:	f000 fa71 	bl	8001d5c <HAL_SYSTICK_Config>
 800187a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187e:	2c00      	cmp	r4, #0
 8001880:	d109      	bne.n	8001896 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	2d03      	cmp	r5, #3
 8001884:	d807      	bhi.n	8001896 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001886:	3802      	subs	r0, #2
 8001888:	0022      	movs	r2, r4
 800188a:	0029      	movs	r1, r5
 800188c:	f000 fa3c 	bl	8001d08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	0020      	movs	r0, r4
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_InitTick+0x44>)
 8001894:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001896:	bd70      	pop	{r4, r5, r6, pc}
 8001898:	20000028 	.word	0x20000028
 800189c:	20000024 	.word	0x20000024
 80018a0:	2000002c 	.word	0x2000002c

080018a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	2310      	movs	r3, #16
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_Init+0x1c>)
{
 80018a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018aa:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ac:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ae:	430b      	orrs	r3, r1
 80018b0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	f7ff ffd3 	bl	800185c <HAL_InitTick>
  HAL_MspInit();
 80018b6:	f7ff ff83 	bl	80017c0 <HAL_MspInit>
}
 80018ba:	2000      	movs	r0, #0
 80018bc:	bd10      	pop	{r4, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x10>)
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_IncTick+0x14>)
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	185b      	adds	r3, r3, r1
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	4770      	bx	lr
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	2000050c 	.word	0x2000050c
 80018d8:	20000028 	.word	0x20000028

080018dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <HAL_GetTick+0x8>)
 80018de:	6818      	ldr	r0, [r3, #0]
}
 80018e0:	4770      	bx	lr
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	2000050c 	.word	0x2000050c

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fff6 	bl	80018dc <HAL_GetTick>
 80018f0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	1c63      	adds	r3, r4, #1
 80018f4:	d002      	beq.n	80018fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_Delay+0x20>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	1b40      	subs	r0, r0, r5
 8001902:	42a0      	cmp	r0, r4
 8001904:	d3fa      	bcc.n	80018fc <HAL_Delay+0x14>
  {
  }
}
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	20000028 	.word	0x20000028

0800190c <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800190c:	2300      	movs	r3, #0
{
 800190e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001910:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001912:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001914:	6803      	ldr	r3, [r0, #0]
{
 8001916:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	400a      	ands	r2, r1
 800191c:	2a01      	cmp	r2, #1
 800191e:	d107      	bne.n	8001930 <ADC_Enable+0x24>
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	4211      	tst	r1, r2
 8001924:	d001      	beq.n	800192a <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001926:	2000      	movs	r0, #0
}
 8001928:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	d4fa      	bmi.n	8001926 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <ADC_Enable+0x8c>)
 8001934:	4211      	tst	r1, r2
 8001936:	d008      	beq.n	800194a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800193e:	4313      	orrs	r3, r2
 8001940:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001944:	4303      	orrs	r3, r0
 8001946:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001948:	e7ee      	b.n	8001928 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800194a:	2201      	movs	r2, #1
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <ADC_Enable+0x90>)
 8001954:	4912      	ldr	r1, [pc, #72]	; (80019a0 <ADC_Enable+0x94>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	f7fe fbe0 	bl	800011c <__udivsi3>
 800195c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d115      	bne.n	8001990 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001964:	f7ff ffba 	bl	80018dc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001968:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800196a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	422b      	tst	r3, r5
 8001972:	d1d8      	bne.n	8001926 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001974:	f7ff ffb2 	bl	80018dc <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f6      	bls.n	800196c <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197e:	2310      	movs	r3, #16
 8001980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001984:	4313      	orrs	r3, r2
 8001986:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800198a:	432b      	orrs	r3, r5
 800198c:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800198e:	e7cb      	b.n	8001928 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001990:	9b01      	ldr	r3, [sp, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	e7e2      	b.n	800195e <ADC_Enable+0x52>
 8001998:	80000017 	.word	0x80000017
 800199c:	20000024 	.word	0x20000024
 80019a0:	000f4240 	.word	0x000f4240

080019a4 <HAL_ADC_Init>:
{
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80019aa:	2c00      	cmp	r4, #0
 80019ac:	d07e      	beq.n	8001aac <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80019b4:	0022      	movs	r2, r4
 80019b6:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80019ba:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80019bc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80019be:	f7fe fc71 	bl	80002a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019c4:	06db      	lsls	r3, r3, #27
 80019c6:	d500      	bpl.n	80019ca <HAL_ADC_Init+0x26>
 80019c8:	e085      	b.n	8001ad6 <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019ca:	2204      	movs	r2, #4
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	6898      	ldr	r0, [r3, #8]
 80019d0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80019d2:	d000      	beq.n	80019d6 <HAL_ADC_Init+0x32>
 80019d4:	e07f      	b.n	8001ad6 <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019d8:	4942      	ldr	r1, [pc, #264]	; (8001ae4 <HAL_ADC_Init+0x140>)
 80019da:	4011      	ands	r1, r2
 80019dc:	2202      	movs	r2, #2
 80019de:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80019e0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80019e2:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	400a      	ands	r2, r1
 80019e8:	2a01      	cmp	r2, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_Init+0x54>
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	4211      	tst	r1, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_ADC_Init+0x6c>
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	0412      	lsls	r2, r2, #16
 80019f6:	d40b      	bmi.n	8001a10 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80019f8:	2118      	movs	r1, #24
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	438a      	bics	r2, r1
 80019fe:	68a1      	ldr	r1, [r4, #8]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	6862      	ldr	r2, [r4, #4]
 8001a08:	0089      	lsls	r1, r1, #2
 8001a0a:	0889      	lsrs	r1, r1, #2
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_ADC_Init+0x144>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a18:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a1a:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a1c:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a1e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a20:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a24:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a26:	3a01      	subs	r2, #1
 8001a28:	1e56      	subs	r6, r2, #1
 8001a2a:	41b2      	sbcs	r2, r6
 8001a2c:	0316      	lsls	r6, r2, #12
 8001a2e:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a30:	034f      	lsls	r7, r1, #13
 8001a32:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a34:	6922      	ldr	r2, [r4, #16]
 8001a36:	432f      	orrs	r7, r5
 8001a38:	2a02      	cmp	r2, #2
 8001a3a:	d100      	bne.n	8001a3e <HAL_ADC_Init+0x9a>
 8001a3c:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001a3e:	1d62      	adds	r2, r4, #5
 8001a40:	7fd2      	ldrb	r2, [r2, #31]
 8001a42:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a44:	433a      	orrs	r2, r7
 8001a46:	4332      	orrs	r2, r6
 8001a48:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a4a:	7ee0      	ldrb	r0, [r4, #27]
 8001a4c:	2801      	cmp	r0, #1
 8001a4e:	d104      	bne.n	8001a5a <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d12c      	bne.n	8001aae <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0249      	lsls	r1, r1, #9
 8001a58:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5a:	20c2      	movs	r0, #194	; 0xc2
 8001a5c:	69e1      	ldr	r1, [r4, #28]
 8001a5e:	30ff      	adds	r0, #255	; 0xff
 8001a60:	4281      	cmp	r1, r0
 8001a62:	d002      	beq.n	8001a6a <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a64:	6a20      	ldr	r0, [r4, #32]
 8001a66:	4301      	orrs	r1, r0
 8001a68:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a6a:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a6c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a6e:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a70:	4311      	orrs	r1, r2
 8001a72:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a76:	4281      	cmp	r1, r0
 8001a78:	d002      	beq.n	8001a80 <HAL_ADC_Init+0xdc>
 8001a7a:	1e48      	subs	r0, r1, #1
 8001a7c:	2806      	cmp	r0, #6
 8001a7e:	d807      	bhi.n	8001a90 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a80:	2507      	movs	r5, #7
 8001a82:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a84:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a86:	43a8      	bics	r0, r5
 8001a88:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a8a:	6958      	ldr	r0, [r3, #20]
 8001a8c:	4301      	orrs	r1, r0
 8001a8e:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_ADC_Init+0x148>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d111      	bne.n	8001abe <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9e:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aae:	2120      	movs	r1, #32
 8001ab0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001ab2:	4329      	orrs	r1, r5
 8001ab4:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ab8:	4308      	orrs	r0, r1
 8001aba:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001abc:	e7cd      	b.n	8001a5a <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001abe:	2212      	movs	r2, #18
 8001ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	2310      	movs	r3, #16
 8001aca:	4313      	orrs	r3, r2
 8001acc:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ad0:	4303      	orrs	r3, r0
 8001ad2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001ad4:	e7ea      	b.n	8001aac <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001ada:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001adc:	4313      	orrs	r3, r2
 8001ade:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ae0:	e7e4      	b.n	8001aac <HAL_ADC_Init+0x108>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	fffffefd 	.word	0xfffffefd
 8001ae8:	fffe0219 	.word	0xfffe0219
 8001aec:	833fffe7 	.word	0x833fffe7

08001af0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af0:	6803      	ldr	r3, [r0, #0]
{
 8001af2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af4:	689b      	ldr	r3, [r3, #8]
{
 8001af6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001af8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001afa:	075b      	lsls	r3, r3, #29
 8001afc:	d41a      	bmi.n	8001b34 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001afe:	0025      	movs	r5, r4
 8001b00:	3534      	adds	r5, #52	; 0x34
 8001b02:	782b      	ldrb	r3, [r5, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d015      	beq.n	8001b34 <HAL_ADC_Start+0x44>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b0c:	7e63      	ldrb	r3, [r4, #25]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d111      	bne.n	8001b36 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001b18:	401a      	ands	r2, r3
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b20:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001b22:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b24:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8001b26:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001b28:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b2a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b2c:	6899      	ldr	r1, [r3, #8]
 8001b2e:	3a18      	subs	r2, #24
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
}
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001b36:	0020      	movs	r0, r4
 8001b38:	f7ff fee8 	bl	800190c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d0e8      	beq.n	8001b12 <HAL_ADC_Start+0x22>
 8001b40:	e7f8      	b.n	8001b34 <HAL_ADC_Start+0x44>
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	fffff0fe 	.word	0xfffff0fe

08001b48 <HAL_ADC_PollForConversion>:
{
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b4a:	6945      	ldr	r5, [r0, #20]
{
 8001b4c:	0004      	movs	r4, r0
 8001b4e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b50:	2d08      	cmp	r5, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001b54:	6803      	ldr	r3, [r0, #0]
 8001b56:	2001      	movs	r0, #1
 8001b58:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b5a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001b5c:	4203      	tst	r3, r0
 8001b5e:	d007      	beq.n	8001b70 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	2320      	movs	r3, #32
 8001b62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001b64:	3434      	adds	r4, #52	; 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b66:	4313      	orrs	r3, r2
 8001b68:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	7023      	strb	r3, [r4, #0]
}
 8001b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001b70:	f7ff feb4 	bl	80018dc <HAL_GetTick>
 8001b74:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4215      	tst	r5, r2
 8001b7c:	d023      	beq.n	8001bc6 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	430a      	orrs	r2, r1
 8001b86:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b88:	22c0      	movs	r2, #192	; 0xc0
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	4211      	tst	r1, r2
 8001b90:	d112      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x70>
 8001b92:	7ea2      	ldrb	r2, [r4, #26]
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	0712      	lsls	r2, r2, #28
 8001b9c:	d50c      	bpl.n	8001bb8 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	0752      	lsls	r2, r2, #29
 8001ba2:	d423      	bmi.n	8001bec <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	438a      	bics	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001bac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bae:	4914      	ldr	r1, [pc, #80]	; (8001c00 <HAL_ADC_PollForConversion+0xb8>)
 8001bb0:	4011      	ands	r1, r2
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	63a2      	str	r2, [r4, #56]	; 0x38
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001bba:	7e22      	ldrb	r2, [r4, #24]
 8001bbc:	4282      	cmp	r2, r0
 8001bbe:	d1d6      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e7d3      	b.n	8001b6e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001bc6:	1c72      	adds	r2, r6, #1
 8001bc8:	d0d6      	beq.n	8001b78 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d108      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bce:	2304      	movs	r3, #4
 8001bd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8001bd2:	3434      	adds	r4, #52	; 0x34
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001bd8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001bda:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8001bdc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001bde:	e7c6      	b.n	8001b6e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001be0:	f7ff fe7c 	bl	80018dc <HAL_GetTick>
 8001be4:	1bc0      	subs	r0, r0, r7
 8001be6:	42b0      	cmp	r0, r6
 8001be8:	d9c5      	bls.n	8001b76 <HAL_ADC_PollForConversion+0x2e>
 8001bea:	e7f0      	b.n	8001bce <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bec:	2220      	movs	r2, #32
 8001bee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001bfc:	e7dc      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x70>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	fffffefe 	.word	0xfffffefe

08001c04 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_ADC_ConfigChannel>:
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001c0e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001c10:	0004      	movs	r4, r0
{
 8001c12:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001c14:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001c16:	3434      	adds	r4, #52	; 0x34
 8001c18:	7823      	ldrb	r3, [r4, #0]
{
 8001c1a:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d02f      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c24:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c26:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8001c28:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c2a:	68bd      	ldr	r5, [r7, #8]
 8001c2c:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8001c2e:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c30:	4005      	ands	r5, r0
 8001c32:	d159      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0xdc>
 8001c34:	680e      	ldr	r6, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c36:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <HAL_ADC_ConfigChannel+0xe8>)
 8001c38:	40b3      	lsls	r3, r6
 8001c3a:	0032      	movs	r2, r6
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	684b      	ldr	r3, [r1, #4]
 8001c40:	3a10      	subs	r2, #16
 8001c42:	4283      	cmp	r3, r0
 8001c44:	d03d      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	9801      	ldr	r0, [sp, #4]
 8001c4a:	4318      	orrs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c4c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c4e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c50:	055b      	lsls	r3, r3, #21
 8001c52:	459c      	cmp	ip, r3
 8001c54:	d010      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x6c>
 8001c56:	4663      	mov	r3, ip
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d90c      	bls.n	8001c78 <HAL_ADC_ConfigChannel+0x6c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c5e:	688b      	ldr	r3, [r1, #8]
 8001c60:	2107      	movs	r1, #7
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	4008      	ands	r0, r1
 8001c66:	4283      	cmp	r3, r0
 8001c68:	d006      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x6c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c6a:	6978      	ldr	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c6c:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c6e:	4388      	bics	r0, r1
 8001c70:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	4303      	orrs	r3, r0
 8001c76:	617b      	str	r3, [r7, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c78:	2a01      	cmp	r2, #1
 8001c7a:	d904      	bls.n	8001c86 <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	7023      	strb	r3, [r4, #0]
}
 8001c82:	b005      	add	sp, #20
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c86:	0033      	movs	r3, r6
 8001c88:	3b10      	subs	r3, #16
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	4183      	sbcs	r3, r0
 8001c8e:	2080      	movs	r0, #128	; 0x80
 8001c90:	4919      	ldr	r1, [pc, #100]	; (8001cf8 <HAL_ADC_ConfigChannel+0xec>)
 8001c92:	425b      	negs	r3, r3
 8001c94:	680a      	ldr	r2, [r1, #0]
 8001c96:	059b      	lsls	r3, r3, #22
 8001c98:	0400      	lsls	r0, r0, #16
 8001c9a:	181b      	adds	r3, r3, r0
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ca0:	2e10      	cmp	r6, #16
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_ADC_ConfigChannel+0xf0>)
 8001ca6:	4916      	ldr	r1, [pc, #88]	; (8001d00 <HAL_ADC_ConfigChannel+0xf4>)
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	f7fe fa37 	bl	800011c <__udivsi3>
 8001cae:	230a      	movs	r3, #10
 8001cb0:	4358      	muls	r0, r3
 8001cb2:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8001cb4:	9b03      	ldr	r3, [sp, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0e0      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8001cba:	9b03      	ldr	r3, [sp, #12]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	e7f8      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cc4:	9b01      	ldr	r3, [sp, #4]
 8001cc6:	4399      	bics	r1, r3
 8001cc8:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cca:	2a01      	cmp	r2, #1
 8001ccc:	d8d6      	bhi.n	8001c7c <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001cce:	1e53      	subs	r3, r2, #1
 8001cd0:	419a      	sbcs	r2, r3
 8001cd2:	4253      	negs	r3, r2
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <HAL_ADC_ConfigChannel+0xec>)
 8001cd8:	03d2      	lsls	r2, r2, #15
 8001cda:	4013      	ands	r3, r2
 8001cdc:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_ADC_ConfigChannel+0xf8>)
 8001cde:	6808      	ldr	r0, [r1, #0]
 8001ce0:	189b      	adds	r3, r3, r2
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	e7c9      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	2120      	movs	r1, #32
 8001cea:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001cec:	4301      	orrs	r1, r0
 8001cee:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	e7c4      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x72>
 8001cf4:	00001001 	.word	0x00001001
 8001cf8:	40012708 	.word	0x40012708
 8001cfc:	20000024 	.word	0x20000024
 8001d00:	000f4240 	.word	0x000f4240
 8001d04:	ff7fffff 	.word	0xff7fffff

08001d08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d08:	b530      	push	{r4, r5, lr}
 8001d0a:	25ff      	movs	r5, #255	; 0xff
 8001d0c:	2403      	movs	r4, #3
 8001d0e:	002a      	movs	r2, r5
 8001d10:	b2c3      	uxtb	r3, r0
 8001d12:	401c      	ands	r4, r3
 8001d14:	00e4      	lsls	r4, r4, #3
 8001d16:	40a2      	lsls	r2, r4
 8001d18:	0189      	lsls	r1, r1, #6
 8001d1a:	4029      	ands	r1, r5
 8001d1c:	43d2      	mvns	r2, r2
 8001d1e:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001d20:	2800      	cmp	r0, #0
 8001d22:	db0a      	blt.n	8001d3a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d24:	24c0      	movs	r4, #192	; 0xc0
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_NVIC_SetPriority+0x4c>)
 8001d28:	0880      	lsrs	r0, r0, #2
 8001d2a:	0080      	lsls	r0, r0, #2
 8001d2c:	18c0      	adds	r0, r0, r3
 8001d2e:	00a4      	lsls	r4, r4, #2
 8001d30:	5903      	ldr	r3, [r0, r4]
 8001d32:	401a      	ands	r2, r3
 8001d34:	4311      	orrs	r1, r2
 8001d36:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001d38:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	4003      	ands	r3, r0
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_NVIC_SetPriority+0x50>)
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	181b      	adds	r3, r3, r0
 8001d48:	69d8      	ldr	r0, [r3, #28]
 8001d4a:	4002      	ands	r2, r0
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	61d9      	str	r1, [r3, #28]
 8001d50:	e7f2      	b.n	8001d38 <HAL_NVIC_SetPriority+0x30>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_SYSTICK_Config+0x28>)
 8001d5e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d60:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d80d      	bhi.n	8001d82 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d66:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d6e:	6a03      	ldr	r3, [r0, #32]
 8001d70:	0609      	lsls	r1, r1, #24
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	430b      	orrs	r3, r1
 8001d78:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d80:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d82:	4770      	bx	lr
 8001d84:	00ffffff 	.word	0x00ffffff
 8001d88:	e000e010 	.word	0xe000e010
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	680b      	ldr	r3, [r1, #0]
{ 
 8001d94:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8001d98:	2300      	movs	r3, #0
{ 
 8001d9a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	9a03      	ldr	r2, [sp, #12]
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8001da2:	b007      	add	sp, #28
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da6:	2201      	movs	r2, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	9902      	ldr	r1, [sp, #8]
 8001dae:	9a03      	ldr	r2, [sp, #12]
 8001db0:	400a      	ands	r2, r1
 8001db2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001db4:	d100      	bne.n	8001db8 <HAL_GPIO_Init+0x28>
 8001db6:	e08c      	b.n	8001ed2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	9a01      	ldr	r2, [sp, #4]
 8001dba:	2110      	movs	r1, #16
 8001dbc:	6852      	ldr	r2, [r2, #4]
 8001dbe:	0016      	movs	r6, r2
 8001dc0:	438e      	bics	r6, r1
 8001dc2:	2e02      	cmp	r6, #2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc6:	2507      	movs	r5, #7
 8001dc8:	401d      	ands	r5, r3
 8001dca:	00ad      	lsls	r5, r5, #2
 8001dcc:	3901      	subs	r1, #1
 8001dce:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001dd0:	08dc      	lsrs	r4, r3, #3
 8001dd2:	00a4      	lsls	r4, r4, #2
 8001dd4:	1904      	adds	r4, r0, r4
 8001dd6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dda:	9901      	ldr	r1, [sp, #4]
 8001ddc:	6909      	ldr	r1, [r1, #16]
 8001dde:	40a9      	lsls	r1, r5
 8001de0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001de2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de4:	2403      	movs	r4, #3
 8001de6:	005f      	lsls	r7, r3, #1
 8001de8:	40bc      	lsls	r4, r7
 8001dea:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001dec:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dee:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df0:	4025      	ands	r5, r4
 8001df2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df4:	2503      	movs	r5, #3
 8001df6:	4015      	ands	r5, r2
 8001df8:	40bd      	lsls	r5, r7
 8001dfa:	4661      	mov	r1, ip
 8001dfc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001dfe:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	2e01      	cmp	r6, #1
 8001e02:	d80f      	bhi.n	8001e24 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001e06:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e08:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e0a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0c:	40bd      	lsls	r5, r7
 8001e0e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001e10:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e12:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e14:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e16:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e18:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	400d      	ands	r5, r1
 8001e1e:	409d      	lsls	r5, r3
 8001e20:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001e22:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e24:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e26:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e28:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e30:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001e34:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	420a      	tst	r2, r1
 8001e38:	d04b      	beq.n	8001ed2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4c26      	ldr	r4, [pc, #152]	; (8001ed8 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e42:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	430d      	orrs	r5, r1
 8001e46:	61a5      	str	r5, [r4, #24]
 8001e48:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e4a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4c:	400c      	ands	r4, r1
 8001e4e:	9405      	str	r4, [sp, #20]
 8001e50:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e52:	240f      	movs	r4, #15
 8001e54:	4921      	ldr	r1, [pc, #132]	; (8001edc <HAL_GPIO_Init+0x14c>)
 8001e56:	00ad      	lsls	r5, r5, #2
 8001e58:	00b6      	lsls	r6, r6, #2
 8001e5a:	186d      	adds	r5, r5, r1
 8001e5c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e60:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e62:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e64:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e66:	2400      	movs	r4, #0
 8001e68:	4288      	cmp	r0, r1
 8001e6a:	d00c      	beq.n	8001e86 <HAL_GPIO_Init+0xf6>
 8001e6c:	491c      	ldr	r1, [pc, #112]	; (8001ee0 <HAL_GPIO_Init+0x150>)
 8001e6e:	3401      	adds	r4, #1
 8001e70:	4288      	cmp	r0, r1
 8001e72:	d008      	beq.n	8001e86 <HAL_GPIO_Init+0xf6>
 8001e74:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <HAL_GPIO_Init+0x154>)
 8001e76:	3401      	adds	r4, #1
 8001e78:	4288      	cmp	r0, r1
 8001e7a:	d004      	beq.n	8001e86 <HAL_GPIO_Init+0xf6>
 8001e7c:	491a      	ldr	r1, [pc, #104]	; (8001ee8 <HAL_GPIO_Init+0x158>)
 8001e7e:	3403      	adds	r4, #3
 8001e80:	4288      	cmp	r0, r1
 8001e82:	d100      	bne.n	8001e86 <HAL_GPIO_Init+0xf6>
 8001e84:	3c02      	subs	r4, #2
 8001e86:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001e88:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8a:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001e8c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001e90:	4c16      	ldr	r4, [pc, #88]	; (8001eec <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8001e92:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001e94:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001e96:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e98:	03d1      	lsls	r1, r2, #15
 8001e9a:	d401      	bmi.n	8001ea0 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001e9c:	003e      	movs	r6, r7
 8001e9e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001ea0:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001ea2:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8001ea4:	9e00      	ldr	r6, [sp, #0]
 8001ea6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	0391      	lsls	r1, r2, #14
 8001eaa:	d401      	bmi.n	8001eb0 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8001eac:	003e      	movs	r6, r7
 8001eae:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001eb0:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001eb2:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8001eb4:	9e00      	ldr	r6, [sp, #0]
 8001eb6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	02d1      	lsls	r1, r2, #11
 8001eba:	d401      	bmi.n	8001ec0 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001ebc:	003e      	movs	r6, r7
 8001ebe:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001ec0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001ec2:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001ec4:	9f00      	ldr	r7, [sp, #0]
 8001ec6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	0292      	lsls	r2, r2, #10
 8001eca:	d401      	bmi.n	8001ed0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001ecc:	402e      	ands	r6, r5
 8001ece:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001ed0:	60e7      	str	r7, [r4, #12]
    position++;
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	e762      	b.n	8001d9c <HAL_GPIO_Init+0xc>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	48000c00 	.word	0x48000c00
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef0:	6900      	ldr	r0, [r0, #16]
 8001ef2:	4008      	ands	r0, r1
 8001ef4:	1e41      	subs	r1, r0, #1
 8001ef6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001ef8:	b2c0      	uxtb	r0, r0
  }
 8001efa:	4770      	bx	lr

08001efc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efc:	2a00      	cmp	r2, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f00:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f02:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f04:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f06:	e7fc      	b.n	8001f02 <HAL_GPIO_WritePin+0x6>

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	0004      	movs	r4, r0
 8001f0c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001f14:	b005      	add	sp, #20
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	07db      	lsls	r3, r3, #31
 8001f1c:	d42e      	bmi.n	8001f7c <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	079b      	lsls	r3, r3, #30
 8001f22:	d47e      	bmi.n	8002022 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	071b      	lsls	r3, r3, #28
 8001f28:	d500      	bpl.n	8001f2c <HAL_RCC_OscConfig+0x24>
 8001f2a:	e0ba      	b.n	80020a2 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	075b      	lsls	r3, r3, #29
 8001f30:	d500      	bpl.n	8001f34 <HAL_RCC_OscConfig+0x2c>
 8001f32:	e0dd      	b.n	80020f0 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	06db      	lsls	r3, r3, #27
 8001f38:	d51a      	bpl.n	8001f70 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f3a:	6962      	ldr	r2, [r4, #20]
 8001f3c:	4db4      	ldr	r5, [pc, #720]	; (8002210 <HAL_RCC_OscConfig+0x308>)
 8001f3e:	2304      	movs	r3, #4
 8001f40:	2a01      	cmp	r2, #1
 8001f42:	d000      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3e>
 8001f44:	e149      	b.n	80021da <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f46:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f48:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001f4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f50:	431a      	orrs	r2, r3
 8001f52:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001f54:	f7ff fcc2 	bl	80018dc <HAL_GetTick>
 8001f58:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f5c:	4233      	tst	r3, r6
 8001f5e:	d100      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5a>
 8001f60:	e134      	b.n	80021cc <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f62:	21f8      	movs	r1, #248	; 0xf8
 8001f64:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f66:	69a3      	ldr	r3, [r4, #24]
 8001f68:	438a      	bics	r2, r1
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	6a23      	ldr	r3, [r4, #32]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d000      	beq.n	8001f78 <HAL_RCC_OscConfig+0x70>
 8001f76:	e157      	b.n	8002228 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8001f78:	2000      	movs	r0, #0
 8001f7a:	e7cb      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f7c:	210c      	movs	r1, #12
 8001f7e:	4da4      	ldr	r5, [pc, #656]	; (8002210 <HAL_RCC_OscConfig+0x308>)
 8001f80:	686a      	ldr	r2, [r5, #4]
 8001f82:	400a      	ands	r2, r1
 8001f84:	2a04      	cmp	r2, #4
 8001f86:	d006      	beq.n	8001f96 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	686b      	ldr	r3, [r5, #4]
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d109      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x9c>
 8001f90:	686b      	ldr	r3, [r5, #4]
 8001f92:	03db      	lsls	r3, r3, #15
 8001f94:	d506      	bpl.n	8001fa4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	039b      	lsls	r3, r3, #14
 8001f9a:	d5c0      	bpl.n	8001f1e <HAL_RCC_OscConfig+0x16>
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1bd      	bne.n	8001f1e <HAL_RCC_OscConfig+0x16>
 8001fa2:	e7b6      	b.n	8001f12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d113      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xca>
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	682a      	ldr	r2, [r5, #0]
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fc92 	bl	80018dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001fba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbc:	02b6      	lsls	r6, r6, #10
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	4233      	tst	r3, r6
 8001fc2:	d1ac      	bne.n	8001f1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fc8a 	bl	80018dc <HAL_GetTick>
 8001fc8:	1bc0      	subs	r0, r0, r7
 8001fca:	2864      	cmp	r0, #100	; 0x64
 8001fcc:	d9f7      	bls.n	8001fbe <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8001fce:	2003      	movs	r0, #3
 8001fd0:	e7a0      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_OscConfig+0xfa>
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	4a8e      	ldr	r2, [pc, #568]	; (8002214 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fdc:	4013      	ands	r3, r2
 8001fde:	602b      	str	r3, [r5, #0]
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	4a8d      	ldr	r2, [pc, #564]	; (8002218 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc77 	bl	80018dc <HAL_GetTick>
 8001fee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	4233      	tst	r3, r6
 8001ff4:	d093      	beq.n	8001f1e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fc71 	bl	80018dc <HAL_GetTick>
 8001ffa:	1bc0      	subs	r0, r0, r7
 8001ffc:	2864      	cmp	r0, #100	; 0x64
 8001ffe:	d9f7      	bls.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 8002000:	e7e5      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	2b05      	cmp	r3, #5
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0x10a>
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	682a      	ldr	r2, [r5, #0]
 800200a:	02db      	lsls	r3, r3, #11
 800200c:	4313      	orrs	r3, r2
 800200e:	602b      	str	r3, [r5, #0]
 8002010:	e7cb      	b.n	8001faa <HAL_RCC_OscConfig+0xa2>
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	4a7f      	ldr	r2, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x30c>)
 8002016:	4013      	ands	r3, r2
 8002018:	602b      	str	r3, [r5, #0]
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	4a7e      	ldr	r2, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x310>)
 800201e:	4013      	ands	r3, r2
 8002020:	e7c7      	b.n	8001fb2 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002022:	220c      	movs	r2, #12
 8002024:	4d7a      	ldr	r5, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x308>)
 8002026:	686b      	ldr	r3, [r5, #4]
 8002028:	4213      	tst	r3, r2
 800202a:	d006      	beq.n	800203a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800202c:	686b      	ldr	r3, [r5, #4]
 800202e:	4013      	ands	r3, r2
 8002030:	2b08      	cmp	r3, #8
 8002032:	d111      	bne.n	8002058 <HAL_RCC_OscConfig+0x150>
 8002034:	686b      	ldr	r3, [r5, #4]
 8002036:	03db      	lsls	r3, r3, #15
 8002038:	d40e      	bmi.n	8002058 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	682b      	ldr	r3, [r5, #0]
 800203c:	079b      	lsls	r3, r3, #30
 800203e:	d503      	bpl.n	8002048 <HAL_RCC_OscConfig+0x140>
 8002040:	68e3      	ldr	r3, [r4, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d000      	beq.n	8002048 <HAL_RCC_OscConfig+0x140>
 8002046:	e764      	b.n	8001f12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	21f8      	movs	r1, #248	; 0xf8
 800204a:	682a      	ldr	r2, [r5, #0]
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	438a      	bics	r2, r1
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4313      	orrs	r3, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	e765      	b.n	8001f24 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002058:	68e2      	ldr	r2, [r4, #12]
 800205a:	2301      	movs	r3, #1
 800205c:	2a00      	cmp	r2, #0
 800205e:	d00f      	beq.n	8002080 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002060:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8002064:	4313      	orrs	r3, r2
 8002066:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002068:	f7ff fc38 	bl	80018dc <HAL_GetTick>
 800206c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	4233      	tst	r3, r6
 8002072:	d1e9      	bne.n	8002048 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002074:	f7ff fc32 	bl	80018dc <HAL_GetTick>
 8002078:	1bc0      	subs	r0, r0, r7
 800207a:	2802      	cmp	r0, #2
 800207c:	d9f7      	bls.n	800206e <HAL_RCC_OscConfig+0x166>
 800207e:	e7a6      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8002080:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8002084:	439a      	bics	r2, r3
 8002086:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002088:	f7ff fc28 	bl	80018dc <HAL_GetTick>
 800208c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	682b      	ldr	r3, [r5, #0]
 8002090:	4233      	tst	r3, r6
 8002092:	d100      	bne.n	8002096 <HAL_RCC_OscConfig+0x18e>
 8002094:	e746      	b.n	8001f24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc21 	bl	80018dc <HAL_GetTick>
 800209a:	1bc0      	subs	r0, r0, r7
 800209c:	2802      	cmp	r0, #2
 800209e:	d9f6      	bls.n	800208e <HAL_RCC_OscConfig+0x186>
 80020a0:	e795      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	69e2      	ldr	r2, [r4, #28]
 80020a4:	2301      	movs	r3, #1
 80020a6:	4d5a      	ldr	r5, [pc, #360]	; (8002210 <HAL_RCC_OscConfig+0x308>)
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d010      	beq.n	80020ce <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80020ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80020b0:	4313      	orrs	r3, r2
 80020b2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80020b4:	f7ff fc12 	bl	80018dc <HAL_GetTick>
 80020b8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80020bc:	4233      	tst	r3, r6
 80020be:	d000      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1ba>
 80020c0:	e734      	b.n	8001f2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7ff fc0b 	bl	80018dc <HAL_GetTick>
 80020c6:	1bc0      	subs	r0, r0, r7
 80020c8:	2802      	cmp	r0, #2
 80020ca:	d9f6      	bls.n	80020ba <HAL_RCC_OscConfig+0x1b2>
 80020cc:	e77f      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 80020ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80020d2:	439a      	bics	r2, r3
 80020d4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80020d6:	f7ff fc01 	bl	80018dc <HAL_GetTick>
 80020da:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80020de:	4233      	tst	r3, r6
 80020e0:	d100      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1dc>
 80020e2:	e723      	b.n	8001f2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff fbfa 	bl	80018dc <HAL_GetTick>
 80020e8:	1bc0      	subs	r0, r0, r7
 80020ea:	2802      	cmp	r0, #2
 80020ec:	d9f6      	bls.n	80020dc <HAL_RCC_OscConfig+0x1d4>
 80020ee:	e76e      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f4:	4d46      	ldr	r5, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x308>)
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fc:	4213      	tst	r3, r2
 80020fe:	d108      	bne.n	8002112 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	69eb      	ldr	r3, [r5, #28]
 8002102:	4313      	orrs	r3, r2
 8002104:	61eb      	str	r3, [r5, #28]
 8002106:	69eb      	ldr	r3, [r5, #28]
 8002108:	4013      	ands	r3, r2
 800210a:	9303      	str	r3, [sp, #12]
 800210c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	2780      	movs	r7, #128	; 0x80
 8002114:	4e41      	ldr	r6, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x314>)
 8002116:	007f      	lsls	r7, r7, #1
 8002118:	6833      	ldr	r3, [r6, #0]
 800211a:	423b      	tst	r3, r7
 800211c:	d006      	beq.n	800212c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	68a3      	ldr	r3, [r4, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d113      	bne.n	800214c <HAL_RCC_OscConfig+0x244>
 8002124:	6a2a      	ldr	r2, [r5, #32]
 8002126:	4313      	orrs	r3, r2
 8002128:	622b      	str	r3, [r5, #32]
 800212a:	e030      	b.n	800218e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	433b      	orrs	r3, r7
 8002130:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002132:	f7ff fbd3 	bl	80018dc <HAL_GetTick>
 8002136:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	6833      	ldr	r3, [r6, #0]
 800213a:	423b      	tst	r3, r7
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fbcd 	bl	80018dc <HAL_GetTick>
 8002142:	9b01      	ldr	r3, [sp, #4]
 8002144:	1ac0      	subs	r0, r0, r3
 8002146:	2864      	cmp	r0, #100	; 0x64
 8002148:	d9f6      	bls.n	8002138 <HAL_RCC_OscConfig+0x230>
 800214a:	e740      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
 800214c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214e:	2b00      	cmp	r3, #0
 8002150:	d114      	bne.n	800217c <HAL_RCC_OscConfig+0x274>
 8002152:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	4393      	bics	r3, r2
 8002158:	622b      	str	r3, [r5, #32]
 800215a:	6a2b      	ldr	r3, [r5, #32]
 800215c:	3203      	adds	r2, #3
 800215e:	4393      	bics	r3, r2
 8002160:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002162:	f7ff fbbb 	bl	80018dc <HAL_GetTick>
 8002166:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	6a2b      	ldr	r3, [r5, #32]
 800216a:	423b      	tst	r3, r7
 800216c:	d025      	beq.n	80021ba <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff fbb5 	bl	80018dc <HAL_GetTick>
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x318>)
 8002174:	1b80      	subs	r0, r0, r6
 8002176:	4298      	cmp	r0, r3
 8002178:	d9f6      	bls.n	8002168 <HAL_RCC_OscConfig+0x260>
 800217a:	e728      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x290>
 8002180:	6a29      	ldr	r1, [r5, #32]
 8002182:	3b01      	subs	r3, #1
 8002184:	430b      	orrs	r3, r1
 8002186:	622b      	str	r3, [r5, #32]
 8002188:	6a2b      	ldr	r3, [r5, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800218e:	f7ff fba5 	bl	80018dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002194:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00d      	b.n	80021b4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	6a2b      	ldr	r3, [r5, #32]
 800219a:	4393      	bics	r3, r2
 800219c:	2204      	movs	r2, #4
 800219e:	622b      	str	r3, [r5, #32]
 80021a0:	6a2b      	ldr	r3, [r5, #32]
 80021a2:	4393      	bics	r3, r2
 80021a4:	e7c0      	b.n	8002128 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fb99 	bl	80018dc <HAL_GetTick>
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x318>)
 80021ac:	1b80      	subs	r0, r0, r6
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d900      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2ac>
 80021b2:	e70c      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	6a2b      	ldr	r3, [r5, #32]
 80021b6:	423b      	tst	r3, r7
 80021b8:	d0f5      	beq.n	80021a6 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 80021ba:	9b00      	ldr	r3, [sp, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d000      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2ba>
 80021c0:	e6b8      	b.n	8001f34 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	69eb      	ldr	r3, [r5, #28]
 80021c4:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_RCC_OscConfig+0x31c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	61eb      	str	r3, [r5, #28]
 80021ca:	e6b3      	b.n	8001f34 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021cc:	f7ff fb86 	bl	80018dc <HAL_GetTick>
 80021d0:	1bc0      	subs	r0, r0, r7
 80021d2:	2802      	cmp	r0, #2
 80021d4:	d800      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x2d0>
 80021d6:	e6c0      	b.n	8001f5a <HAL_RCC_OscConfig+0x52>
 80021d8:	e6f9      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021da:	3205      	adds	r2, #5
 80021dc:	d103      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 80021de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021e0:	439a      	bics	r2, r3
 80021e2:	636a      	str	r2, [r5, #52]	; 0x34
 80021e4:	e6bd      	b.n	8001f62 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80021e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021e8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ea:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80021ec:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ee:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80021f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021f2:	4393      	bics	r3, r2
 80021f4:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb71 	bl	80018dc <HAL_GetTick>
 80021fa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021fe:	4233      	tst	r3, r6
 8002200:	d100      	bne.n	8002204 <HAL_RCC_OscConfig+0x2fc>
 8002202:	e6b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002204:	f7ff fb6a 	bl	80018dc <HAL_GetTick>
 8002208:	1bc0      	subs	r0, r0, r7
 800220a:	2802      	cmp	r0, #2
 800220c:	d9f6      	bls.n	80021fc <HAL_RCC_OscConfig+0x2f4>
 800220e:	e6de      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
 8002210:	40021000 	.word	0x40021000
 8002214:	fffeffff 	.word	0xfffeffff
 8002218:	fffbffff 	.word	0xfffbffff
 800221c:	40007000 	.word	0x40007000
 8002220:	00001388 	.word	0x00001388
 8002224:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002228:	200c      	movs	r0, #12
 800222a:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_RCC_OscConfig+0x3f8>)
 800222c:	6851      	ldr	r1, [r2, #4]
 800222e:	0015      	movs	r5, r2
 8002230:	4001      	ands	r1, r0
 8002232:	2908      	cmp	r1, #8
 8002234:	d047      	beq.n	80022c6 <HAL_RCC_OscConfig+0x3be>
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	2b02      	cmp	r3, #2
 800223a:	d132      	bne.n	80022a2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 800223c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002240:	4013      	ands	r3, r2
 8002242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002244:	f7ff fb4a 	bl	80018dc <HAL_GetTick>
 8002248:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	04b6      	lsls	r6, r6, #18
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	4233      	tst	r3, r6
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	220f      	movs	r2, #15
 8002254:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002256:	4393      	bics	r3, r2
 8002258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800225a:	4313      	orrs	r3, r2
 800225c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800225e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002262:	686a      	ldr	r2, [r5, #4]
 8002264:	430b      	orrs	r3, r1
 8002266:	4928      	ldr	r1, [pc, #160]	; (8002308 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226a:	400a      	ands	r2, r1
 800226c:	4313      	orrs	r3, r2
 800226e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	682a      	ldr	r2, [r5, #0]
 8002274:	045b      	lsls	r3, r3, #17
 8002276:	4313      	orrs	r3, r2
 8002278:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800227a:	f7ff fb2f 	bl	80018dc <HAL_GetTick>
 800227e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	04a4      	lsls	r4, r4, #18
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	4223      	tst	r3, r4
 8002286:	d000      	beq.n	800228a <HAL_RCC_OscConfig+0x382>
 8002288:	e676      	b.n	8001f78 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb27 	bl	80018dc <HAL_GetTick>
 800228e:	1b80      	subs	r0, r0, r6
 8002290:	2802      	cmp	r0, #2
 8002292:	d9f6      	bls.n	8002282 <HAL_RCC_OscConfig+0x37a>
 8002294:	e69b      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb21 	bl	80018dc <HAL_GetTick>
 800229a:	1bc0      	subs	r0, r0, r7
 800229c:	2802      	cmp	r0, #2
 800229e:	d9d5      	bls.n	800224c <HAL_RCC_OscConfig+0x344>
 80022a0:	e695      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 80022a2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4013      	ands	r3, r2
 80022a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022aa:	f7ff fb17 	bl	80018dc <HAL_GetTick>
 80022ae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	04a4      	lsls	r4, r4, #18
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	4223      	tst	r3, r4
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x3b2>
 80022b8:	e65e      	b.n	8001f78 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fb0f 	bl	80018dc <HAL_GetTick>
 80022be:	1b80      	subs	r0, r0, r6
 80022c0:	2802      	cmp	r0, #2
 80022c2:	d9f6      	bls.n	80022b2 <HAL_RCC_OscConfig+0x3aa>
 80022c4:	e683      	b.n	8001fce <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 80022c6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x3c6>
 80022cc:	e622      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80022d0:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80022d4:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80022d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d8:	4019      	ands	r1, r3
        return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022dc:	42a9      	cmp	r1, r5
 80022de:	d000      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3da>
 80022e0:	e618      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022e2:	210f      	movs	r1, #15
 80022e4:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80022e8:	428a      	cmp	r2, r1
 80022ea:	d000      	beq.n	80022ee <HAL_RCC_OscConfig+0x3e6>
 80022ec:	e612      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022ee:	20f0      	movs	r0, #240	; 0xf0
 80022f0:	0380      	lsls	r0, r0, #14
 80022f2:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022f6:	1a1b      	subs	r3, r3, r0
 80022f8:	1e58      	subs	r0, r3, #1
 80022fa:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 80022fc:	b2d8      	uxtb	r0, r3
 80022fe:	e609      	b.n	8001f14 <HAL_RCC_OscConfig+0xc>
 8002300:	40021000 	.word	0x40021000
 8002304:	feffffff 	.word	0xfeffffff
 8002308:	ffc2ffff 	.word	0xffc2ffff

0800230c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800230e:	4c14      	ldr	r4, [pc, #80]	; (8002360 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002310:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002312:	2210      	movs	r2, #16
 8002314:	0021      	movs	r1, r4
 8002316:	4668      	mov	r0, sp
 8002318:	f000 f8ee 	bl	80024f8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800231c:	0021      	movs	r1, r4
 800231e:	ad04      	add	r5, sp, #16
 8002320:	2210      	movs	r2, #16
 8002322:	3110      	adds	r1, #16
 8002324:	0028      	movs	r0, r5
 8002326:	f000 f8e7 	bl	80024f8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800232a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800232c:	4e0d      	ldr	r6, [pc, #52]	; (8002364 <HAL_RCC_GetSysClockFreq+0x58>)
 800232e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002330:	401a      	ands	r2, r3
 8002332:	2a08      	cmp	r2, #8
 8002334:	d111      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002336:	200f      	movs	r0, #15
 8002338:	466a      	mov	r2, sp
 800233a:	0c99      	lsrs	r1, r3, #18
 800233c:	4001      	ands	r1, r0
 800233e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002340:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002342:	4002      	ands	r2, r0
 8002344:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002346:	03db      	lsls	r3, r3, #15
 8002348:	d505      	bpl.n	8002356 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <HAL_RCC_GetSysClockFreq+0x5c>)
 800234c:	f7fd fee6 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002350:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002352:	b008      	add	sp, #32
 8002354:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_RCC_GetSysClockFreq+0x60>)
 8002358:	e7fa      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800235c:	e7f9      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x46>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	08002598 	.word	0x08002598
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	003d0900 	.word	0x003d0900

08002370 <HAL_RCC_ClockConfig>:
{
 8002370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002372:	0005      	movs	r5, r0
 8002374:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8002376:	2800      	cmp	r0, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
}
 800237c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237e:	2201      	movs	r2, #1
 8002380:	4c37      	ldr	r4, [pc, #220]	; (8002460 <HAL_RCC_ClockConfig+0xf0>)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	4013      	ands	r3, r2
 8002386:	428b      	cmp	r3, r1
 8002388:	d31c      	bcc.n	80023c4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238a:	6829      	ldr	r1, [r5, #0]
 800238c:	078b      	lsls	r3, r1, #30
 800238e:	d422      	bmi.n	80023d6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002390:	07cb      	lsls	r3, r1, #31
 8002392:	d42f      	bmi.n	80023f4 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	2301      	movs	r3, #1
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	401a      	ands	r2, r3
 800239a:	42ba      	cmp	r2, r7
 800239c:	d851      	bhi.n	8002442 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	4c30      	ldr	r4, [pc, #192]	; (8002464 <HAL_RCC_ClockConfig+0xf4>)
 80023a2:	075b      	lsls	r3, r3, #29
 80023a4:	d454      	bmi.n	8002450 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a6:	f7ff ffb1 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_RCC_ClockConfig+0xf8>)
 80023ae:	061b      	lsls	r3, r3, #24
 80023b0:	0f1b      	lsrs	r3, r3, #28
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	40d8      	lsrs	r0, r3
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0xfc>)
 80023b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff fa4e 	bl	800185c <HAL_InitTick>
  return HAL_OK;
 80023c0:	2000      	movs	r0, #0
 80023c2:	e7db      	b.n	800237c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	4393      	bics	r3, r2
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	4013      	ands	r3, r2
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d1d2      	bne.n	800237a <HAL_RCC_ClockConfig+0xa>
 80023d4:	e7d9      	b.n	800238a <HAL_RCC_ClockConfig+0x1a>
 80023d6:	4a23      	ldr	r2, [pc, #140]	; (8002464 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	074b      	lsls	r3, r1, #29
 80023da:	d504      	bpl.n	80023e6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023dc:	23e0      	movs	r3, #224	; 0xe0
 80023de:	6850      	ldr	r0, [r2, #4]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4303      	orrs	r3, r0
 80023e4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e6:	20f0      	movs	r0, #240	; 0xf0
 80023e8:	6853      	ldr	r3, [r2, #4]
 80023ea:	4383      	bics	r3, r0
 80023ec:	68a8      	ldr	r0, [r5, #8]
 80023ee:	4303      	orrs	r3, r0
 80023f0:	6053      	str	r3, [r2, #4]
 80023f2:	e7cd      	b.n	8002390 <HAL_RCC_ClockConfig+0x20>
 80023f4:	4e1b      	ldr	r6, [pc, #108]	; (8002464 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	2a01      	cmp	r2, #1
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	039b      	lsls	r3, r3, #14
 8002400:	d5bb      	bpl.n	800237a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	2103      	movs	r1, #3
 8002404:	6873      	ldr	r3, [r6, #4]
 8002406:	438b      	bics	r3, r1
 8002408:	4313      	orrs	r3, r2
 800240a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800240c:	f7ff fa66 	bl	80018dc <HAL_GetTick>
 8002410:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	230c      	movs	r3, #12
 8002414:	6872      	ldr	r2, [r6, #4]
 8002416:	401a      	ands	r2, r3
 8002418:	686b      	ldr	r3, [r5, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d0b9      	beq.n	8002394 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7ff fa5c 	bl	80018dc <HAL_GetTick>
 8002424:	9b01      	ldr	r3, [sp, #4]
 8002426:	1ac0      	subs	r0, r0, r3
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_ClockConfig+0x100>)
 800242a:	4298      	cmp	r0, r3
 800242c:	d9f1      	bls.n	8002412 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800242e:	2003      	movs	r0, #3
 8002430:	e7a4      	b.n	800237c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	2a02      	cmp	r2, #2
 8002434:	d102      	bne.n	800243c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	019b      	lsls	r3, r3, #6
 8002438:	d4e3      	bmi.n	8002402 <HAL_RCC_ClockConfig+0x92>
 800243a:	e79e      	b.n	800237a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	079b      	lsls	r3, r3, #30
 800243e:	d4e0      	bmi.n	8002402 <HAL_RCC_ClockConfig+0x92>
 8002440:	e79b      	b.n	800237a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	439a      	bics	r2, r3
 8002446:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	421a      	tst	r2, r3
 800244c:	d0a7      	beq.n	800239e <HAL_RCC_ClockConfig+0x2e>
 800244e:	e794      	b.n	800237a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	6863      	ldr	r3, [r4, #4]
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_RCC_ClockConfig+0x104>)
 8002454:	4013      	ands	r3, r2
 8002456:	68ea      	ldr	r2, [r5, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	6063      	str	r3, [r4, #4]
 800245c:	e7a3      	b.n	80023a6 <HAL_RCC_ClockConfig+0x36>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
 8002468:	08003b6d 	.word	0x08003b6d
 800246c:	20000024 	.word	0x20000024
 8002470:	00001388 	.word	0x00001388
 8002474:	fffff8ff 	.word	0xfffff8ff

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4d0c      	ldr	r5, [pc, #48]	; (80024b0 <__libc_init_array+0x38>)
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	2600      	movs	r6, #0
 800248a:	f000 f879 	bl	8002580 <_init>
 800248e:	4d0a      	ldr	r5, [pc, #40]	; (80024b8 <__libc_init_array+0x40>)
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	00b3      	lsls	r3, r6, #2
 800249e:	58eb      	ldr	r3, [r5, r3]
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	00b3      	lsls	r3, r6, #2
 80024a8:	58eb      	ldr	r3, [r5, r3]
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	08003ba4 	.word	0x08003ba4
 80024b4:	08003ba4 	.word	0x08003ba4
 80024b8:	08003ba4 	.word	0x08003ba4
 80024bc:	08003ba8 	.word	0x08003ba8

080024c0 <__itoa>:
 80024c0:	1e93      	subs	r3, r2, #2
 80024c2:	b510      	push	{r4, lr}
 80024c4:	000c      	movs	r4, r1
 80024c6:	2b22      	cmp	r3, #34	; 0x22
 80024c8:	d904      	bls.n	80024d4 <__itoa+0x14>
 80024ca:	2300      	movs	r3, #0
 80024cc:	001c      	movs	r4, r3
 80024ce:	700b      	strb	r3, [r1, #0]
 80024d0:	0020      	movs	r0, r4
 80024d2:	bd10      	pop	{r4, pc}
 80024d4:	2a0a      	cmp	r2, #10
 80024d6:	d109      	bne.n	80024ec <__itoa+0x2c>
 80024d8:	2800      	cmp	r0, #0
 80024da:	da07      	bge.n	80024ec <__itoa+0x2c>
 80024dc:	232d      	movs	r3, #45	; 0x2d
 80024de:	700b      	strb	r3, [r1, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	4240      	negs	r0, r0
 80024e4:	1861      	adds	r1, r4, r1
 80024e6:	f000 f819 	bl	800251c <__utoa>
 80024ea:	e7f1      	b.n	80024d0 <__itoa+0x10>
 80024ec:	2100      	movs	r1, #0
 80024ee:	e7f9      	b.n	80024e4 <__itoa+0x24>

080024f0 <itoa>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	f7ff ffe5 	bl	80024c0 <__itoa>
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <memcpy>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b510      	push	{r4, lr}
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d100      	bne.n	8002502 <memcpy+0xa>
 8002500:	bd10      	pop	{r4, pc}
 8002502:	5ccc      	ldrb	r4, [r1, r3]
 8002504:	54c4      	strb	r4, [r0, r3]
 8002506:	3301      	adds	r3, #1
 8002508:	e7f8      	b.n	80024fc <memcpy+0x4>

0800250a <memset>:
 800250a:	0003      	movs	r3, r0
 800250c:	1812      	adds	r2, r2, r0
 800250e:	4293      	cmp	r3, r2
 8002510:	d100      	bne.n	8002514 <memset+0xa>
 8002512:	4770      	bx	lr
 8002514:	7019      	strb	r1, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	e7f9      	b.n	800250e <memset+0x4>
	...

0800251c <__utoa>:
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	0017      	movs	r7, r2
 8002520:	b08d      	sub	sp, #52	; 0x34
 8002522:	2225      	movs	r2, #37	; 0x25
 8002524:	0006      	movs	r6, r0
 8002526:	000d      	movs	r5, r1
 8002528:	a802      	add	r0, sp, #8
 800252a:	4914      	ldr	r1, [pc, #80]	; (800257c <__utoa+0x60>)
 800252c:	f7ff ffe4 	bl	80024f8 <memcpy>
 8002530:	aa02      	add	r2, sp, #8
 8002532:	1ebb      	subs	r3, r7, #2
 8002534:	2400      	movs	r4, #0
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d905      	bls.n	8002548 <__utoa+0x2c>
 800253c:	702c      	strb	r4, [r5, #0]
 800253e:	0025      	movs	r5, r4
 8002540:	0028      	movs	r0, r5
 8002542:	b00d      	add	sp, #52	; 0x34
 8002544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002546:	0014      	movs	r4, r2
 8002548:	0030      	movs	r0, r6
 800254a:	0039      	movs	r1, r7
 800254c:	f7fd fe6c 	bl	8000228 <__aeabi_uidivmod>
 8002550:	4684      	mov	ip, r0
 8002552:	9801      	ldr	r0, [sp, #4]
 8002554:	1c62      	adds	r2, r4, #1
 8002556:	18ab      	adds	r3, r5, r2
 8002558:	5c41      	ldrb	r1, [r0, r1]
 800255a:	1e5e      	subs	r6, r3, #1
 800255c:	7031      	strb	r1, [r6, #0]
 800255e:	4666      	mov	r6, ip
 8002560:	2e00      	cmp	r6, #0
 8002562:	d1f0      	bne.n	8002546 <__utoa+0x2a>
 8002564:	701e      	strb	r6, [r3, #0]
 8002566:	002b      	movs	r3, r5
 8002568:	1b5a      	subs	r2, r3, r5
 800256a:	4294      	cmp	r4, r2
 800256c:	dde8      	ble.n	8002540 <__utoa+0x24>
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	5d29      	ldrb	r1, [r5, r4]
 8002572:	7019      	strb	r1, [r3, #0]
 8002574:	552a      	strb	r2, [r5, r4]
 8002576:	3301      	adds	r3, #1
 8002578:	3c01      	subs	r4, #1
 800257a:	e7f5      	b.n	8002568 <__utoa+0x4c>
 800257c:	08003b7d 	.word	0x08003b7d

08002580 <_init>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr

0800258c <_fini>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr
