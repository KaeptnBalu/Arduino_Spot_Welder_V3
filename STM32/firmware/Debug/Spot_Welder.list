
Spot_Welder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  08001fb8  08001fb8  00011fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002df4  08002df4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df4  08002df4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000014  08002e10  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08002e10  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb96  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027e7  00000000  00000000  0002cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000058dd  00000000  00000000  0002f3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000800  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ae0  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000cbe7  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ac6c  00000000  00000000  00042b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000427f6  00000000  00000000  0004d7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008ffc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001620  00000000  00000000  0009003c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fa0 	.word	0x08001fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08001fa0 	.word	0x08001fa0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000238:	220c      	movs	r2, #12
 800023a:	2100      	movs	r1, #0
 800023c:	a801      	add	r0, sp, #4
 800023e:	f001 fe74 	bl	8001f2a <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000242:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8000244:	4c1b      	ldr	r4, [pc, #108]	; (80002b4 <MX_ADC_Init+0x80>)
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <MX_ADC_Init+0x84>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000248:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024a:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024c:	2500      	movs	r5, #0
  hadc.Instance = ADC1;
 800024e:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000250:	2301      	movs	r3, #1
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000252:	32ff      	adds	r2, #255	; 0xff
 8000254:	61e2      	str	r2, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000256:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000258:	1d62      	adds	r2, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025a:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800025c:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	6123      	str	r3, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000262:	7625      	strb	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000264:	7665      	strb	r5, [r4, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000266:	76a5      	strb	r5, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	76e5      	strb	r5, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800026a:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026c:	77d5      	strb	r5, [r2, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000270:	f000 fe50 	bl	8000f14 <HAL_ADC_Init>
 8000274:	42a8      	cmp	r0, r5
 8000276:	d001      	beq.n	800027c <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8000278:	f000 f9f0 	bl	800065c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	015b      	lsls	r3, r3, #5
 8000280:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000282:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000284:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000286:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000288:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800028a:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028e:	f000 fee7 	bl	8001060 <HAL_ADC_ConfigChannel>
 8000292:	2800      	cmp	r0, #0
 8000294:	d001      	beq.n	800029a <MX_ADC_Init+0x66>
  {
    Error_Handler();
 8000296:	f000 f9e1 	bl	800065c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800029a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800029c:	a901      	add	r1, sp, #4
 800029e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80002a0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002a2:	f000 fedd 	bl	8001060 <HAL_ADC_ConfigChannel>
 80002a6:	2800      	cmp	r0, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 80002aa:	f000 f9d7 	bl	800065c <Error_Handler>
  }

}
 80002ae:	b005      	add	sp, #20
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000460 	.word	0x20000460
 80002b8:	40012400 	.word	0x40012400

080002bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002bc:	b510      	push	{r4, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	2214      	movs	r2, #20
 80002c4:	2100      	movs	r1, #0
 80002c6:	a803      	add	r0, sp, #12
 80002c8:	f001 fe2f 	bl	8001f2a <memset>
  if(adcHandle->Instance==ADC1)
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <HAL_ADC_MspInit+0x54>)
 80002ce:	6822      	ldr	r2, [r4, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d11b      	bne.n	800030c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002d4:	2080      	movs	r0, #128	; 0x80
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HAL_ADC_MspInit+0x58>)
 80002d8:	0080      	lsls	r0, r0, #2
 80002da:	6999      	ldr	r1, [r3, #24]
 80002dc:	4301      	orrs	r1, r0
 80002de:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e6:	4002      	ands	r2, r0
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	695a      	ldr	r2, [r3, #20]
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = ADC_Auto_Pulse_Pin|ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	430a      	orrs	r2, r1
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	400b      	ands	r3, r1
 80002fa:	9302      	str	r3, [sp, #8]
 80002fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_Auto_Pulse_Pin|ADC_VIN_Pin;
 80002fe:	2321      	movs	r3, #33	; 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000300:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_Auto_Pulse_Pin|ADC_VIN_Pin;
 8000302:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000304:	3b1e      	subs	r3, #30
 8000306:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f000 ff6c 	bl	80011e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800030c:	b008      	add	sp, #32
 800030e:	bd10      	pop	{r4, pc}
 8000310:	40012400 	.word	0x40012400
 8000314:	40021000 	.word	0x40021000

08000318 <Button_Attach>:
static Button_Struct_t* Button_Struct_PTR_Array[MAX_BUTTONS];

static uint8_t Attached_Buttons = 0;

uint8_t Button_Attach(Button_Struct_t*  Button_Struct_PTR)
{
 8000318:	b510      	push	{r4, lr}
 800031a:	0004      	movs	r4, r0
	//init GPIOs as input

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800031c:	2080      	movs	r0, #128	; 0x80
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <Button_Attach+0x8c>)
 8000320:	0300      	lsls	r0, r0, #12
 8000322:	6959      	ldr	r1, [r3, #20]
{
 8000324:	b08a      	sub	sp, #40	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000326:	4301      	orrs	r1, r0
 8000328:	6159      	str	r1, [r3, #20]
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	4002      	ands	r2, r0
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800032e:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000330:	9201      	str	r2, [sp, #4]
 8000332:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000334:	6959      	ldr	r1, [r3, #20]
 8000336:	0340      	lsls	r0, r0, #13
 8000338:	4301      	orrs	r1, r0
 800033a:	6159      	str	r1, [r3, #20]
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	4002      	ands	r2, r0
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000340:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000342:	9202      	str	r2, [sp, #8]
 8000344:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000346:	6959      	ldr	r1, [r3, #20]
 8000348:	0280      	lsls	r0, r0, #10
 800034a:	4301      	orrs	r1, r0
 800034c:	6159      	str	r1, [r3, #20]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800034e:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000350:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000352:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000354:	4002      	ands	r2, r0
 8000356:	9203      	str	r2, [sp, #12]
 8000358:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800035a:	695a      	ldr	r2, [r3, #20]
 800035c:	430a      	orrs	r2, r1
 800035e:	615a      	str	r2, [r3, #20]
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	400b      	ands	r3, r1
 8000364:	9304      	str	r3, [sp, #16]
 8000366:	9b04      	ldr	r3, [sp, #16]
	;

	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 8000368:	8823      	ldrh	r3, [r4, #0]
 800036a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036c:	2300      	movs	r3, #0
 800036e:	9306      	str	r3, [sp, #24]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 8000370:	7a23      	ldrb	r3, [r4, #8]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d113      	bne.n	800039e <Button_Attach+0x86>
	{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000376:	3301      	adds	r3, #1
	}
	else
	{
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	}
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000378:	a905      	add	r1, sp, #20
 800037a:	6860      	ldr	r0, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800037c:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 800037e:	f000 ff31 	bl	80011e4 <HAL_GPIO_Init>

	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 8000386:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 8000388:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 800038a:	6123      	str	r3, [r4, #16]

	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <Button_Attach+0x90>)
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <Button_Attach+0x94>)
 8000390:	7818      	ldrb	r0, [r3, #0]
 8000392:	0081      	lsls	r1, r0, #2
 8000394:	508c      	str	r4, [r1, r2]

	Attached_Buttons++;
 8000396:	1c42      	adds	r2, r0, #1
 8000398:	701a      	strb	r2, [r3, #0]
	if (Attached_Buttons > MAX_BUTTONS)
	{
		//Error
	}
	return (Attached_Buttons - 1);//return button ID
}
 800039a:	b00a      	add	sp, #40	; 0x28
 800039c:	bd10      	pop	{r4, pc}
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800039e:	2302      	movs	r3, #2
 80003a0:	e7ea      	b.n	8000378 <Button_Attach+0x60>
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000
 80003a8:	20000030 	.word	0x20000030
 80003ac:	20000038 	.word	0x20000038

080003b0 <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
{
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static volatile uint32_t Button_Scan_Time_Stamp = 0;
	Button_Struct_t *PTR = NULL;

	if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 80003b2:	f000 fd97 	bl	8000ee4 <HAL_GetTick>
 80003b6:	4c28      	ldr	r4, [pc, #160]	; (8000458 <Button_Scan+0xa8>)
 80003b8:	6823      	ldr	r3, [r4, #0]
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	2804      	cmp	r0, #4
 80003be:	d909      	bls.n	80003d4 <Button_Scan+0x24>
	{
		Button_Scan_Time_Stamp = HAL_GetTick();
 80003c0:	f000 fd90 	bl	8000ee4 <HAL_GetTick>

		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003c4:	2500      	movs	r5, #0
					PTR->Button_Released_Ticks = 0;

				}
				else
				{   //long pressed detected
					PTR->Button_Event = Button_Long_Pressed;
 80003c6:	2703      	movs	r7, #3
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80003c8:	26ff      	movs	r6, #255	; 0xff
		Button_Scan_Time_Stamp = HAL_GetTick();
 80003ca:	6020      	str	r0, [r4, #0]
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <Button_Scan+0xac>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d800      	bhi.n	80003d6 <Button_Scan+0x26>
			}

		}

	}
}
 80003d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			PTR = Button_Struct_PTR_Array[Index];
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <Button_Scan+0xb0>)
 80003d8:	00aa      	lsls	r2, r5, #2
 80003da:	58d4      	ldr	r4, [r2, r3]
			if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port,
 80003dc:	8821      	ldrh	r1, [r4, #0]
 80003de:	6860      	ldr	r0, [r4, #4]
 80003e0:	f000 ffb0 	bl	8001344 <HAL_GPIO_ReadPin>
 80003e4:	7a22      	ldrb	r2, [r4, #8]
 80003e6:	68e3      	ldr	r3, [r4, #12]
 80003e8:	4282      	cmp	r2, r0
 80003ea:	d11a      	bne.n	8000422 <Button_Scan+0x72>
				PTR->Button_Pressed_Ticks++;	//
 80003ec:	3301      	adds	r3, #1
 80003ee:	60e3      	str	r3, [r4, #12]
				if (PTR->Button_Pressed_Ticks
 80003f0:	2bc7      	cmp	r3, #199	; 0xc7
 80003f2:	d80b      	bhi.n	800040c <Button_Scan+0x5c>
					if (PTR->Button_Released_Ticks //repressed detected
 80003f4:	6923      	ldr	r3, [r4, #16]
 80003f6:	2b1d      	cmp	r3, #29
 80003f8:	d806      	bhi.n	8000408 <Button_Scan+0x58>
						PTR->Button_Event = Button_Repressed;
 80003fa:	2302      	movs	r3, #2
						PTR->Button_Event = Button_Pressed;
 80003fc:	7263      	strb	r3, [r4, #9]
					PTR->Button_Released_Ticks = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	6123      	str	r3, [r4, #16]
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000402:	3501      	adds	r5, #1
 8000404:	b2ed      	uxtb	r5, r5
 8000406:	e7e1      	b.n	80003cc <Button_Scan+0x1c>
						PTR->Button_Event = Button_Pressed;
 8000408:	2301      	movs	r3, #1
 800040a:	e7f7      	b.n	80003fc <Button_Scan+0x4c>
					if (PTR->Callback != NULL)
 800040c:	69a3      	ldr	r3, [r4, #24]
					PTR->Button_Event = Button_Long_Pressed;
 800040e:	7267      	strb	r7, [r4, #9]
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000410:	7526      	strb	r6, [r4, #20]
						PTR->Callback(
 8000412:	0030      	movs	r0, r6
					if (PTR->Callback != NULL)
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f4      	beq.n	8000402 <Button_Scan+0x52>
						PTR->Callback(
 8000418:	4798      	blx	r3
						PTR->Button_Clicked_Count = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	7523      	strb	r3, [r4, #20]
						PTR->Button_Event = Button_Idle;
 800041e:	7263      	strb	r3, [r4, #9]
 8000420:	e7ef      	b.n	8000402 <Button_Scan+0x52>
				PTR->Button_Released_Ticks++;
 8000422:	6922      	ldr	r2, [r4, #16]
 8000424:	3201      	adds	r2, #1
 8000426:	6122      	str	r2, [r4, #16]
				if (PTR->Button_Pressed_Ticks
 8000428:	2b0a      	cmp	r3, #10
 800042a:	d90a      	bls.n	8000442 <Button_Scan+0x92>
					PTR->Button_Pressed_Ticks = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60e3      	str	r3, [r4, #12]
					if (PTR->Button_Event == Button_Repressed)
 8000430:	7a63      	ldrb	r3, [r4, #9]
 8000432:	2b02      	cmp	r3, #2
 8000434:	d103      	bne.n	800043e <Button_Scan+0x8e>
						PTR->Button_Clicked_Count++;
 8000436:	7d23      	ldrb	r3, [r4, #20]
 8000438:	3301      	adds	r3, #1
						PTR->Button_Clicked_Count = 1;
 800043a:	7523      	strb	r3, [r4, #20]
 800043c:	e001      	b.n	8000442 <Button_Scan+0x92>
					else if (PTR->Button_Event
 800043e:	2b01      	cmp	r3, #1
 8000440:	d0fb      	beq.n	800043a <Button_Scan+0x8a>
				if (PTR->Button_Released_Ticks
 8000442:	2a32      	cmp	r2, #50	; 0x32
 8000444:	d9dd      	bls.n	8000402 <Button_Scan+0x52>
					if (PTR->Callback != NULL
 8000446:	69a3      	ldr	r3, [r4, #24]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0da      	beq.n	8000402 <Button_Scan+0x52>
							&& PTR->Button_Event != Button_Idle)
 800044c:	7a62      	ldrb	r2, [r4, #9]
 800044e:	2a00      	cmp	r2, #0
 8000450:	d0d7      	beq.n	8000402 <Button_Scan+0x52>
						PTR->Callback(
 8000452:	7d20      	ldrb	r0, [r4, #20]
 8000454:	e7e0      	b.n	8000418 <Button_Scan+0x68>
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000034 	.word	0x20000034
 800045c:	20000030 	.word	0x20000030
 8000460:	20000038 	.word	0x20000038

08000464 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	2214      	movs	r2, #20
 800046a:	2100      	movs	r1, #0
 800046c:	a803      	add	r0, sp, #12
 800046e:	f001 fd5c 	bl	8001f2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	2080      	movs	r0, #128	; 0x80
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_GPIO_Init+0xac>)
 8000476:	03c0      	lsls	r0, r0, #15
 8000478:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 800047a:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047c:	4301      	orrs	r1, r0
 800047e:	6159      	str	r1, [r3, #20]
 8000480:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000484:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	6959      	ldr	r1, [r3, #20]
 800048e:	0280      	lsls	r0, r0, #10
 8000490:	4301      	orrs	r1, r0
 8000492:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000496:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4002      	ands	r2, r0
 800049e:	9201      	str	r2, [sp, #4]
 80004a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80004a4:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	430a      	orrs	r2, r1
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	400b      	ands	r3, r1
 80004b0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80004b2:	0028      	movs	r0, r5
 80004b4:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80004b8:	f000 ff4a 	bl	8001350 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004bc:	a903      	add	r1, sp, #12
 80004be:	4815      	ldr	r0, [pc, #84]	; (8000514 <MX_GPIO_Init+0xb0>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80004c0:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004c2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004c8:	f000 fe8c 	bl	80011e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80004ce:	a903      	add	r1, sp, #12
 80004d0:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80004d4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80004da:	f000 fe83 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004de:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	a903      	add	r1, sp, #12
 80004e2:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f000 fe7b 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin;
 80004ee:	23d0      	movs	r3, #208	; 0xd0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	a903      	add	r1, sp, #12
 80004f2:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin;
 80004f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f000 fe73 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80004fe:	a903      	add	r1, sp, #12
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 8000502:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 8000508:	f000 fe6c 	bl	80011e4 <HAL_GPIO_Init>

}
 800050c:	b009      	add	sp, #36	; 0x24
 800050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48001400 	.word	0x48001400
 8000518:	48000400 	.word	0x48000400

0800051c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800051c:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_I2C1_Init+0x50>)
 8000520:	4c13      	ldr	r4, [pc, #76]	; (8000570 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000522:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000524:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000528:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 800052a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000530:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000532:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000534:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000536:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000538:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800053c:	f001 f81a 	bl	8001574 <HAL_I2C_Init>
 8000540:	2800      	cmp	r0, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000544:	f000 f88a 	bl	800065c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000548:	2100      	movs	r1, #0
 800054a:	0020      	movs	r0, r4
 800054c:	f001 f91e 	bl	800178c <HAL_I2CEx_ConfigAnalogFilter>
 8000550:	2800      	cmp	r0, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000554:	f000 f882 	bl	800065c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000558:	2100      	movs	r1, #0
 800055a:	0020      	movs	r0, r4
 800055c:	f001 f93c 	bl	80017d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000560:	2800      	cmp	r0, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 f87a 	bl	800065c <Error_Handler>
  }

}
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40005400 	.word	0x40005400
 8000570:	200004a0 	.word	0x200004a0
 8000574:	2000090e 	.word	0x2000090e

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b510      	push	{r4, lr}
 800057a:	0004      	movs	r4, r0
 800057c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	2214      	movs	r2, #20
 8000580:	2100      	movs	r1, #0
 8000582:	a803      	add	r0, sp, #12
 8000584:	f001 fcd1 	bl	8001f2a <memset>
  if(i2cHandle->Instance==I2C1)
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_I2C_MspInit+0x64>)
 800058a:	6822      	ldr	r2, [r4, #0]
 800058c:	429a      	cmp	r2, r3
 800058e:	d122      	bne.n	80005d6 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4c13      	ldr	r4, [pc, #76]	; (80005e0 <HAL_I2C_MspInit+0x68>)
 8000594:	0289      	lsls	r1, r1, #10
 8000596:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	430a      	orrs	r2, r1
 800059c:	6162      	str	r2, [r4, #20]
 800059e:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	400b      	ands	r3, r1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005a8:	23c0      	movs	r3, #192	; 0xc0
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ae:	2312      	movs	r3, #18
 80005b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b2:	3b11      	subs	r3, #17
 80005b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	3302      	adds	r3, #2
 80005b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005bc:	3301      	adds	r3, #1
 80005be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f000 fe10 	bl	80011e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	69e2      	ldr	r2, [r4, #28]
 80005c8:	0389      	lsls	r1, r1, #14
 80005ca:	430a      	orrs	r2, r1
 80005cc:	61e2      	str	r2, [r4, #28]
 80005ce:	69e3      	ldr	r3, [r4, #28]
 80005d0:	400b      	ands	r3, r1
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005d6:	b008      	add	sp, #32
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40005400 	.word	0x40005400
 80005e0:	40021000 	.word	0x40021000

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	2410      	movs	r4, #16
{
 80005e8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	222c      	movs	r2, #44	; 0x2c
 80005ec:	2100      	movs	r1, #0
 80005ee:	a809      	add	r0, sp, #36	; 0x24
 80005f0:	f001 fc9b 	bl	8001f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	0022      	movs	r2, r4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4668      	mov	r0, sp
 80005fa:	f001 fc96 	bl	8001f2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fe:	0022      	movs	r2, r4
 8000600:	2100      	movs	r1, #0
 8000602:	a804      	add	r0, sp, #16
 8000604:	f001 fc91 	bl	8001f2a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000608:	2312      	movs	r3, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800060c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800060e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	3b11      	subs	r3, #17
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000612:	2400      	movs	r4, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000618:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f001 f901 	bl	8001820 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	0021      	movs	r1, r4
 8000622:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000626:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f001 fb2c 	bl	8001c88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000630:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000634:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000636:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	f001 fbaa 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800063c:	b014      	add	sp, #80	; 0x50
 800063e:	bd10      	pop	{r4, pc}

08000640 <main>:
{
 8000640:	b510      	push	{r4, lr}
  HAL_Init();
 8000642:	f000 fc33 	bl	8000eac <HAL_Init>
  SystemClock_Config();
 8000646:	f7ff ffcd 	bl	80005e4 <SystemClock_Config>
  MX_GPIO_Init();
 800064a:	f7ff ff0b 	bl	8000464 <MX_GPIO_Init>
  MX_I2C1_Init();
 800064e:	f7ff ff65 	bl	800051c <MX_I2C1_Init>
  MX_ADC_Init();
 8000652:	f7ff fdef 	bl	8000234 <MX_ADC_Init>
  Spot_Welder_Main();
 8000656:	f000 f8dd 	bl	8000814 <Spot_Welder_Main>
 800065a:	e7fe      	b.n	800065a <main+0x1a>

0800065c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800065c:	4770      	bx	lr
	...

08000660 <Encoder_Attach>:
static Encoder_Struct_t* Encoder_Struct_PTR_Array[MAX_ENCODERS];

static uint8_t Attached_Encoders = 0;

uint8_t Encoder_Attach(Encoder_Struct_t* Encoder_Struct_PTR)
    {
 8000660:	b530      	push	{r4, r5, lr}
 8000662:	0004      	movs	r4, r0
    //init GPIOs as input

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000664:	2080      	movs	r0, #128	; 0x80
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <Encoder_Attach+0x9c>)
 8000668:	0300      	lsls	r0, r0, #12
 800066a:	6959      	ldr	r1, [r3, #20]
    {
 800066c:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE()
 800066e:	4301      	orrs	r1, r0
 8000670:	6159      	str	r1, [r3, #20]
 8000672:	695a      	ldr	r2, [r3, #20]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
    ;

    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000676:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000678:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE()
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 800067e:	6959      	ldr	r1, [r3, #20]
 8000680:	0340      	lsls	r0, r0, #13
 8000682:	4301      	orrs	r1, r0
 8000684:	6159      	str	r1, [r3, #20]
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800068a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE()
 800068c:	9202      	str	r2, [sp, #8]
 800068e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000690:	6959      	ldr	r1, [r3, #20]
 8000692:	0280      	lsls	r0, r0, #10
 8000694:	4301      	orrs	r1, r0
 8000696:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000698:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800069a:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 800069c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800069e:	4002      	ands	r2, r0
 80006a0:	9203      	str	r2, [sp, #12]
 80006a2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80006a4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 80006a6:	6860      	ldr	r0, [r4, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80006b0:	400b      	ands	r3, r1
 80006b2:	9304      	str	r3, [sp, #16]
 80006b4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 80006b6:	8823      	ldrh	r3, [r4, #0]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 80006b8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 80006ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006bc:	2301      	movs	r3, #1
 80006be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 80006c0:	f000 fd90 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 80006c4:	8863      	ldrh	r3, [r4, #2]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 80006c6:	a905      	add	r1, sp, #20
 80006c8:	68a0      	ldr	r0, [r4, #8]
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 80006ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 80006cc:	f000 fd8a 	bl	80011e4 <HAL_GPIO_Init>

    Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
    Encoder_Struct_PTR->Encoder_Count = 0;

    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 80006d0:	8821      	ldrh	r1, [r4, #0]
    Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
 80006d2:	6125      	str	r5, [r4, #16]
    Encoder_Struct_PTR->Encoder_Count = 0;
 80006d4:	82a5      	strh	r5, [r4, #20]
    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 80006d6:	6860      	ldr	r0, [r4, #4]
 80006d8:	f000 fe34 	bl	8001344 <HAL_GPIO_ReadPin>
	    Encoder_Struct_PTR->Encoder_Pin_0_Port,
	    Encoder_Struct_PTR->Encoder_Pin_0);

    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 80006dc:	8861      	ldrh	r1, [r4, #2]
    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 80006de:	7320      	strb	r0, [r4, #12]
    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 80006e0:	68a0      	ldr	r0, [r4, #8]
 80006e2:	f000 fe2f 	bl	8001344 <HAL_GPIO_ReadPin>
	    Encoder_Struct_PTR->Encoder_Pin_1_Port,
	    Encoder_Struct_PTR->Encoder_Pin_1);

    Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <Encoder_Attach+0xa0>)
    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 80006e8:	7360      	strb	r0, [r4, #13]
    Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 80006ea:	7818      	ldrb	r0, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <Encoder_Attach+0xa4>)
 80006ee:	0081      	lsls	r1, r0, #2
 80006f0:	508c      	str	r4, [r1, r2]
    Attached_Encoders++;
 80006f2:	1c42      	adds	r2, r0, #1
 80006f4:	701a      	strb	r2, [r3, #0]
    if (Attached_Encoders > MAX_ENCODERS)
	{
	//Error
	}
    return (Attached_Encoders - 1); //return encoder ID
    }
 80006f6:	b00b      	add	sp, #44	; 0x2c
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	20000040 	.word	0x20000040
 8000704:	20000044 	.word	0x20000044

08000708 <Encoder_Scan>:

/* call in millis callback or systick callback */
void Encoder_Scan()
    {
 8000708:	b570      	push	{r4, r5, r6, lr}

    Encoder_Struct_t *PTR = NULL;

    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 800070a:	2500      	movs	r5, #0
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <Encoder_Scan+0x90>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	42ab      	cmp	r3, r5
 8000712:	d800      	bhi.n	8000716 <Encoder_Scan+0xe>
		PTR->Encoder_Time_Stamp = HAL_GetTick();
		}
	    }
	}

    }
 8000714:	bd70      	pop	{r4, r5, r6, pc}
	PTR = Encoder_Struct_PTR_Array[Index];
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <Encoder_Scan+0x94>)
 8000718:	00aa      	lsls	r2, r5, #2
 800071a:	58d4      	ldr	r4, [r2, r3]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 800071c:	8821      	ldrh	r1, [r4, #0]
 800071e:	6860      	ldr	r0, [r4, #4]
 8000720:	f000 fe10 	bl	8001344 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_0__State)
 8000724:	7b23      	ldrb	r3, [r4, #12]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 8000726:	4298      	cmp	r0, r3
 8000728:	d013      	beq.n	8000752 <Encoder_Scan+0x4a>
	    PTR->Encoder_Pin_0__State = !PTR->Encoder_Pin_0__State;
 800072a:	425a      	negs	r2, r3
 800072c:	415a      	adcs	r2, r3
 800072e:	7322      	strb	r2, [r4, #12]
	    if (PTR->Encoder_Pin_0__State && !PTR->Encoder_Pin_1__State)
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10e      	bne.n	8000752 <Encoder_Scan+0x4a>
 8000734:	7b63      	ldrb	r3, [r4, #13]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10b      	bne.n	8000752 <Encoder_Scan+0x4a>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 3)
 800073a:	f000 fbd3 	bl	8000ee4 <HAL_GetTick>
 800073e:	6923      	ldr	r3, [r4, #16]
 8000740:	1ac0      	subs	r0, r0, r3
 8000742:	8aa3      	ldrh	r3, [r4, #20]
 8000744:	2803      	cmp	r0, #3
 8000746:	d922      	bls.n	800078e <Encoder_Scan+0x86>
		    PTR->Encoder_Count += 1;
 8000748:	3301      	adds	r3, #1
		    PTR->Encoder_Count += 5;
 800074a:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 800074c:	f000 fbca 	bl	8000ee4 <HAL_GetTick>
 8000750:	6120      	str	r0, [r4, #16]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 8000752:	8861      	ldrh	r1, [r4, #2]
 8000754:	68a0      	ldr	r0, [r4, #8]
 8000756:	f000 fdf5 	bl	8001344 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_1__State)
 800075a:	7b63      	ldrb	r3, [r4, #13]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 800075c:	4298      	cmp	r0, r3
 800075e:	d013      	beq.n	8000788 <Encoder_Scan+0x80>
	    PTR->Encoder_Pin_1__State = !PTR->Encoder_Pin_1__State;
 8000760:	425a      	negs	r2, r3
 8000762:	415a      	adcs	r2, r3
 8000764:	7362      	strb	r2, [r4, #13]
	    if (PTR->Encoder_Pin_1__State && !PTR->Encoder_Pin_0__State)
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10e      	bne.n	8000788 <Encoder_Scan+0x80>
 800076a:	7b23      	ldrb	r3, [r4, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10b      	bne.n	8000788 <Encoder_Scan+0x80>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 3)
 8000770:	f000 fbb8 	bl	8000ee4 <HAL_GetTick>
 8000774:	6923      	ldr	r3, [r4, #16]
 8000776:	1ac0      	subs	r0, r0, r3
 8000778:	8aa3      	ldrh	r3, [r4, #20]
 800077a:	2803      	cmp	r0, #3
 800077c:	d909      	bls.n	8000792 <Encoder_Scan+0x8a>
		    PTR->Encoder_Count -= 1;
 800077e:	3b01      	subs	r3, #1
		    PTR->Encoder_Count -= 5;
 8000780:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 8000782:	f000 fbaf 	bl	8000ee4 <HAL_GetTick>
 8000786:	6120      	str	r0, [r4, #16]
    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8000788:	3501      	adds	r5, #1
 800078a:	b2ed      	uxtb	r5, r5
 800078c:	e7be      	b.n	800070c <Encoder_Scan+0x4>
		    PTR->Encoder_Count += 5;
 800078e:	3305      	adds	r3, #5
 8000790:	e7db      	b.n	800074a <Encoder_Scan+0x42>
		    PTR->Encoder_Count -= 5;
 8000792:	3b05      	subs	r3, #5
 8000794:	e7f4      	b.n	8000780 <Encoder_Scan+0x78>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000040 	.word	0x20000040
 800079c:	20000044 	.word	0x20000044

080007a0 <Encoder_Get_Count>:
    {
    if (PTR == NULL)
	{
	//Error
	}
    return PTR->Encoder_Count;
 80007a0:	2314      	movs	r3, #20
 80007a2:	5ec0      	ldrsh	r0, [r0, r3]
    }
 80007a4:	4770      	bx	lr

080007a6 <Encoder_Set_Count>:

/* to reset*/
void Encoder_Set_Count(Encoder_Struct_t* PTR, int16_t count)
    {
    if (PTR == NULL)
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d000      	beq.n	80007ac <Encoder_Set_Count+0x6>
	{
	//Error
	}
    else
	{
	PTR->Encoder_Count = count;
 80007aa:	8281      	strh	r1, [r0, #20]
	}
    }
 80007ac:	4770      	bx	lr
	...

080007b0 <Encoder_Buttorn_Callback>:
uint8_t Spot_Welder_Auto_Flag = 0;
uint8_t Spot_Welder_Pulse_Time = 0;

void Encoder_Buttorn_Callback(uint8_t Clicked_Count)
    {
    Encoder_Buttorn_Clicks = Clicked_Count;
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <Encoder_Buttorn_Callback+0x8>)
 80007b2:	7018      	strb	r0, [r3, #0]
    }
 80007b4:	4770      	bx	lr
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	2000004c 	.word	0x2000004c

080007bc <Systic_Callback>:
    {
 80007bc:	b510      	push	{r4, lr}
    Encoder_Scan();
 80007be:	f7ff ffa3 	bl	8000708 <Encoder_Scan>
    Button_Scan();
 80007c2:	f7ff fdf5 	bl	80003b0 <Button_Scan>
    }
 80007c6:	bd10      	pop	{r4, pc}

080007c8 <Spot_Welder_Give_Pusle>:

void Spot_Welder_Give_Pusle(uint8_t milli_seconds)
    {
 80007c8:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_SET);
 80007ca:	2590      	movs	r5, #144	; 0x90
    {
 80007cc:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_SET);
 80007ce:	05ed      	lsls	r5, r5, #23
 80007d0:	0028      	movs	r0, r5
 80007d2:	2201      	movs	r2, #1
 80007d4:	2102      	movs	r1, #2
 80007d6:	f000 fdbb 	bl	8001350 <HAL_GPIO_WritePin>
    HAL_Delay(milli_seconds);
 80007da:	0020      	movs	r0, r4
 80007dc:	f000 fb88 	bl	8000ef0 <HAL_Delay>
    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80007e0:	0028      	movs	r0, r5
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	f000 fdb3 	bl	8001350 <HAL_GPIO_WritePin>
    HAL_Delay(milli_seconds);
 80007ea:	0020      	movs	r0, r4
 80007ec:	f000 fb80 	bl	8000ef0 <HAL_Delay>
    }
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080007f4 <Foot_Switch_Callback>:

void Foot_Switch_Callback(uint8_t Clicked_Count)
    {
 80007f4:	b510      	push	{r4, lr}

    if (Clicked_Count == 1 && Spot_Welder_Enabled_Flag)
 80007f6:	2801      	cmp	r0, #1
 80007f8:	d107      	bne.n	800080a <Foot_Switch_Callback+0x16>
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <Foot_Switch_Callback+0x18>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <Foot_Switch_Callback+0x16>
	{
	Spot_Welder_Give_Pusle(Spot_Welder_Pulse_Time);
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <Foot_Switch_Callback+0x1c>)
 8000804:	7818      	ldrb	r0, [r3, #0]
 8000806:	f7ff ffdf 	bl	80007c8 <Spot_Welder_Give_Pusle>
	}

    }
 800080a:	bd10      	pop	{r4, pc}
 800080c:	20000055 	.word	0x20000055
 8000810:	20000056 	.word	0x20000056

08000814 <Spot_Welder_Main>:

void Spot_Welder_Main()
    {
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	b099      	sub	sp, #100	; 0x64

    ssd1306_Init();
 8000818:	f000 f9e6 	bl	8000be8 <ssd1306_Init>

    ssd1306_Init();
 800081c:	f000 f9e4 	bl	8000be8 <ssd1306_Init>

    ssd1306_Fill(Black);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f9af 	bl	8000b84 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000826:	2100      	movs	r1, #0
    ssd1306_UpdateScreen();

    Encoder_Struct_t Encoder;
    Encoder.Encoder_Pin_0 = ENCDR_A_Pin;
    Encoder.Encoder_Pin_0_Port = ENCDR_A_GPIO_Port;
    Encoder.Encoder_Pin_1 = ENCDR_B_Pin;
 8000828:	2690      	movs	r6, #144	; 0x90
    ssd1306_SetCursor(0, 0);
 800082a:	0008      	movs	r0, r1
 800082c:	f000 fac6 	bl	8000dbc <ssd1306_SetCursor>
    ssd1306_WriteString("  Arduino", Font_11x18, White);
 8000830:	4cb2      	ldr	r4, [pc, #712]	; (8000afc <Spot_Welder_Main+0x2e8>)
 8000832:	2301      	movs	r3, #1
 8000834:	6862      	ldr	r2, [r4, #4]
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	48b1      	ldr	r0, [pc, #708]	; (8000b00 <Spot_Welder_Main+0x2ec>)
 800083a:	f000 faab 	bl	8000d94 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800083e:	2114      	movs	r1, #20
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fabb 	bl	8000dbc <ssd1306_SetCursor>
    ssd1306_WriteString("Spot Welder", Font_11x18, White);
 8000846:	2301      	movs	r3, #1
 8000848:	6862      	ldr	r2, [r4, #4]
 800084a:	6821      	ldr	r1, [r4, #0]
 800084c:	48ad      	ldr	r0, [pc, #692]	; (8000b04 <Spot_Welder_Main+0x2f0>)
 800084e:	f000 faa1 	bl	8000d94 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8000852:	2128      	movs	r1, #40	; 0x28
 8000854:	2000      	movs	r0, #0
 8000856:	f000 fab1 	bl	8000dbc <ssd1306_SetCursor>
    ssd1306_WriteString("    V3", Font_11x18, White);
 800085a:	6821      	ldr	r1, [r4, #0]
 800085c:	6862      	ldr	r2, [r4, #4]
 800085e:	2301      	movs	r3, #1
 8000860:	48a9      	ldr	r0, [pc, #676]	; (8000b08 <Spot_Welder_Main+0x2f4>)
 8000862:	f000 fa97 	bl	8000d94 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000866:	f000 f99b 	bl	8000ba0 <ssd1306_UpdateScreen>
    Encoder.Encoder_Pin_0 = ENCDR_A_Pin;
 800086a:	4ba8      	ldr	r3, [pc, #672]	; (8000b0c <Spot_Welder_Main+0x2f8>)
    Encoder.Encoder_Pin_1 = ENCDR_B_Pin;
 800086c:	05f6      	lsls	r6, r6, #23
    Encoder.Encoder_Pin_1_Port = ENCDR_B_GPIO_Port;
    Encoder_Attach(&Encoder);
 800086e:	a804      	add	r0, sp, #16
    Encoder.Encoder_Pin_0 = ENCDR_A_Pin;
 8000870:	9304      	str	r3, [sp, #16]
    Encoder.Encoder_Pin_1 = ENCDR_B_Pin;
 8000872:	9605      	str	r6, [sp, #20]
    Encoder.Encoder_Pin_0_Port = ENCDR_A_GPIO_Port;
 8000874:	9606      	str	r6, [sp, #24]
    Encoder_Attach(&Encoder);
 8000876:	f7ff fef3 	bl	8000660 <Encoder_Attach>


    Button_Struct_t Encoder_Button;
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 800087a:	2302      	movs	r3, #2
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
    Encoder_Button.Button_Pressed_Logic = LOW;
 800087c:	2500      	movs	r5, #0
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 800087e:	a80a      	add	r0, sp, #40	; 0x28
 8000880:	8003      	strh	r3, [r0, #0]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000882:	4ba3      	ldr	r3, [pc, #652]	; (8000b10 <Spot_Welder_Main+0x2fc>)
    Encoder_Button.Button_Pressed_Logic = LOW;
 8000884:	7205      	strb	r5, [r0, #8]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000886:	6043      	str	r3, [r0, #4]
    Encoder_Button.Callback = Encoder_Buttorn_Callback;
 8000888:	4ba2      	ldr	r3, [pc, #648]	; (8000b14 <Spot_Welder_Main+0x300>)
 800088a:	6183      	str	r3, [r0, #24]
    Button_Attach(&Encoder_Button);
 800088c:	f7ff fd44 	bl	8000318 <Button_Attach>

    Button_Struct_t Foot_Switch;
    Foot_Switch.Button_Pin = Foot_Switch_Pin;
 8000890:	2310      	movs	r3, #16
 8000892:	a811      	add	r0, sp, #68	; 0x44
 8000894:	8003      	strh	r3, [r0, #0]
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
    Foot_Switch.Button_Pressed_Logic = LOW;
    Foot_Switch.Callback = Foot_Switch_Callback;
 8000896:	4ba0      	ldr	r3, [pc, #640]	; (8000b18 <Spot_Welder_Main+0x304>)
    Foot_Switch.Button_Pressed_Logic = LOW;
 8000898:	7205      	strb	r5, [r0, #8]
    Foot_Switch.Callback = Foot_Switch_Callback;
 800089a:	6183      	str	r3, [r0, #24]
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
 800089c:	6046      	str	r6, [r0, #4]
    Button_Attach(&Foot_Switch);
 800089e:	f7ff fd3b 	bl	8000318 <Button_Attach>

    HAL_Delay(2000);
 80008a2:	20fa      	movs	r0, #250	; 0xfa
 80008a4:	00c0      	lsls	r0, r0, #3
 80008a6:	f000 fb23 	bl	8000ef0 <HAL_Delay>
    ssd1306_Fill(Black);
 80008aa:	0028      	movs	r0, r5
 80008ac:	f000 f96a 	bl	8000b84 <ssd1306_Fill>
			Encoder_Set_Count(&Encoder, 0);
			}

		    if (count > 100)
			{
			count = 4;
 80008b0:	3504      	adds	r5, #4
	if (HAL_GetTick() - Scan_Time_Stamp > (100 - 1))
 80008b2:	f000 fb17 	bl	8000ee4 <HAL_GetTick>
 80008b6:	4e99      	ldr	r6, [pc, #612]	; (8000b1c <Spot_Welder_Main+0x308>)
 80008b8:	6833      	ldr	r3, [r6, #0]
 80008ba:	1ac0      	subs	r0, r0, r3
 80008bc:	2863      	cmp	r0, #99	; 0x63
 80008be:	d9f8      	bls.n	80008b2 <Spot_Welder_Main+0x9e>
	    Scan_Time_Stamp = HAL_GetTick();
 80008c0:	f000 fb10 	bl	8000ee4 <HAL_GetTick>
 80008c4:	6030      	str	r0, [r6, #0]
	    count = Encoder_Get_Count(&Encoder);
 80008c6:	a804      	add	r0, sp, #16
 80008c8:	f7ff ff6a 	bl	80007a0 <Encoder_Get_Count>
	    if(count < 0)
 80008cc:	2800      	cmp	r0, #0
 80008ce:	da35      	bge.n	800093c <Spot_Welder_Main+0x128>
		Encoder_Set_Count(&Encoder, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	a804      	add	r0, sp, #16
 80008d4:	f7ff ff67 	bl	80007a6 <Encoder_Set_Count>
		ssd1306_Fill(Black);
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 f953 	bl	8000b84 <ssd1306_Fill>
		ssd1306_SetCursor(0, 20);
 80008de:	2114      	movs	r1, #20
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 fa6b 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" AUTO:", Font_11x18, White);
 80008e6:	2301      	movs	r3, #1
 80008e8:	6862      	ldr	r2, [r4, #4]
 80008ea:	6821      	ldr	r1, [r4, #0]
 80008ec:	488c      	ldr	r0, [pc, #560]	; (8000b20 <Spot_Welder_Main+0x30c>)
 80008ee:	f000 fa51 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 80008f2:	2128      	movs	r1, #40	; 0x28
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fa61 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" PULSE:", Font_11x18, White);
 80008fa:	2301      	movs	r3, #1
 80008fc:	6821      	ldr	r1, [r4, #0]
 80008fe:	6862      	ldr	r2, [r4, #4]
 8000900:	4888      	ldr	r0, [pc, #544]	; (8000b24 <Spot_Welder_Main+0x310>)
 8000902:	f000 fa47 	bl	8000d94 <ssd1306_WriteString>
		if (Encoder_Buttorn_Clicks == 1)
 8000906:	4988      	ldr	r1, [pc, #544]	; (8000b28 <Spot_Welder_Main+0x314>)
 8000908:	4e88      	ldr	r6, [pc, #544]	; (8000b2c <Spot_Welder_Main+0x318>)
 800090a:	780b      	ldrb	r3, [r1, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d105      	bne.n	800091c <Spot_Welder_Main+0x108>
		    Encoder_Buttorn_Clicks = 0;
 8000910:	2200      	movs	r2, #0
 8000912:	700a      	strb	r2, [r1, #0]
		    if (Spot_Welder_Enabled_Flag)
 8000914:	7831      	ldrb	r1, [r6, #0]
 8000916:	4291      	cmp	r1, r2
 8000918:	d03f      	beq.n	800099a <Spot_Welder_Main+0x186>
			Spot_Welder_Enabled_Flag = 0;
 800091a:	7032      	strb	r2, [r6, #0]
		ssd1306_SetCursor(0, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	0008      	movs	r0, r1
 8000920:	f000 fa4c 	bl	8000dbc <ssd1306_SetCursor>
		if(Spot_Welder_Enabled_Flag)
 8000924:	7833      	ldrb	r3, [r6, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d039      	beq.n	800099e <Spot_Welder_Main+0x18a>
		    ssd1306_WriteString(">ENBL:ON", Font_11x18, White);
 800092a:	2301      	movs	r3, #1
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	6862      	ldr	r2, [r4, #4]
 8000930:	487f      	ldr	r0, [pc, #508]	; (8000b30 <Spot_Welder_Main+0x31c>)
		    ssd1306_WriteString(">ENBL:OFF", Font_11x18, White);
 8000932:	f000 fa2f 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000936:	f000 f933 	bl	8000ba0 <ssd1306_UpdateScreen>
		break;
 800093a:	e7ba      	b.n	80008b2 <Spot_Welder_Main+0x9e>
	    if(count > 4)
 800093c:	2804      	cmp	r0, #4
 800093e:	dd23      	ble.n	8000988 <Spot_Welder_Main+0x174>
		Encoder_Set_Count(&Encoder, 4);
 8000940:	0029      	movs	r1, r5
 8000942:	a804      	add	r0, sp, #16
 8000944:	f7ff ff2f 	bl	80007a6 <Encoder_Set_Count>
		ssd1306_WriteString(">Dely1:", Font_11x18, White);
		ssd1306_UpdateScreen();
		break;

	    case 4:
		ssd1306_Fill(Black);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f91b 	bl	8000b84 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800094e:	2100      	movs	r1, #0
 8000950:	0008      	movs	r0, r1
 8000952:	f000 fa33 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" Pulse:", Font_11x18, White);
 8000956:	2301      	movs	r3, #1
 8000958:	6862      	ldr	r2, [r4, #4]
 800095a:	6821      	ldr	r1, [r4, #0]
 800095c:	4875      	ldr	r0, [pc, #468]	; (8000b34 <Spot_Welder_Main+0x320>)
 800095e:	f000 fa19 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8000962:	2114      	movs	r1, #20
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fa29 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" Dely1:", Font_11x18, White);
 800096a:	2301      	movs	r3, #1
 800096c:	6862      	ldr	r2, [r4, #4]
 800096e:	6821      	ldr	r1, [r4, #0]
 8000970:	4871      	ldr	r0, [pc, #452]	; (8000b38 <Spot_Welder_Main+0x324>)
 8000972:	f000 fa0f 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 8000976:	2128      	movs	r1, #40	; 0x28
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fa1f 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(">Dely2:", Font_11x18, White);
 800097e:	2301      	movs	r3, #1
 8000980:	6821      	ldr	r1, [r4, #0]
 8000982:	6862      	ldr	r2, [r4, #4]
 8000984:	486d      	ldr	r0, [pc, #436]	; (8000b3c <Spot_Welder_Main+0x328>)
 8000986:	e7d4      	b.n	8000932 <Spot_Welder_Main+0x11e>
	    switch (count)
 8000988:	3801      	subs	r0, #1
 800098a:	2803      	cmp	r0, #3
 800098c:	d8a4      	bhi.n	80008d8 <Spot_Welder_Main+0xc4>
 800098e:	f7ff fbbb 	bl	8000108 <__gnu_thumb1_case_shi>
 8000992:	000b      	.short	0x000b
 8000994:	00950040 	.word	0x00950040
 8000998:	ffdb      	.short	0xffdb
			Spot_Welder_Enabled_Flag = 1;
 800099a:	7033      	strb	r3, [r6, #0]
 800099c:	e7be      	b.n	800091c <Spot_Welder_Main+0x108>
		    ssd1306_WriteString(">ENBL:OFF", Font_11x18, White);
 800099e:	2301      	movs	r3, #1
 80009a0:	6821      	ldr	r1, [r4, #0]
 80009a2:	6862      	ldr	r2, [r4, #4]
 80009a4:	4866      	ldr	r0, [pc, #408]	; (8000b40 <Spot_Welder_Main+0x32c>)
 80009a6:	e7c4      	b.n	8000932 <Spot_Welder_Main+0x11e>
		ssd1306_Fill(Black);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f8eb 	bl	8000b84 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	0008      	movs	r0, r1
 80009b2:	f000 fa03 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" ENBL:", Font_11x18, White);
 80009b6:	2301      	movs	r3, #1
 80009b8:	6862      	ldr	r2, [r4, #4]
 80009ba:	6821      	ldr	r1, [r4, #0]
 80009bc:	4861      	ldr	r0, [pc, #388]	; (8000b44 <Spot_Welder_Main+0x330>)
 80009be:	f000 f9e9 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 80009c2:	2128      	movs	r1, #40	; 0x28
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f9f9 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" PULSE:", Font_11x18, White);
 80009ca:	2301      	movs	r3, #1
 80009cc:	6821      	ldr	r1, [r4, #0]
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	4854      	ldr	r0, [pc, #336]	; (8000b24 <Spot_Welder_Main+0x310>)
 80009d2:	f000 f9df 	bl	8000d94 <ssd1306_WriteString>
		if (Encoder_Buttorn_Clicks == 1)
 80009d6:	4954      	ldr	r1, [pc, #336]	; (8000b28 <Spot_Welder_Main+0x314>)
 80009d8:	4e5b      	ldr	r6, [pc, #364]	; (8000b48 <Spot_Welder_Main+0x334>)
 80009da:	780b      	ldrb	r3, [r1, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <Spot_Welder_Main+0x1d8>
		    Encoder_Buttorn_Clicks = 0;
 80009e0:	2200      	movs	r2, #0
 80009e2:	700a      	strb	r2, [r1, #0]
		    if (Spot_Welder_Auto_Flag)
 80009e4:	7831      	ldrb	r1, [r6, #0]
 80009e6:	4291      	cmp	r1, r2
 80009e8:	d00c      	beq.n	8000a04 <Spot_Welder_Main+0x1f0>
			Spot_Welder_Auto_Flag = 0;
 80009ea:	7032      	strb	r2, [r6, #0]
		ssd1306_SetCursor(0, 20);
 80009ec:	2114      	movs	r1, #20
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f9e4 	bl	8000dbc <ssd1306_SetCursor>
		if(Spot_Welder_Auto_Flag)
 80009f4:	7833      	ldrb	r3, [r6, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d006      	beq.n	8000a08 <Spot_Welder_Main+0x1f4>
		    ssd1306_WriteString(">AUTO:ON", Font_11x18, White);
 80009fa:	2301      	movs	r3, #1
 80009fc:	6821      	ldr	r1, [r4, #0]
 80009fe:	6862      	ldr	r2, [r4, #4]
 8000a00:	4852      	ldr	r0, [pc, #328]	; (8000b4c <Spot_Welder_Main+0x338>)
 8000a02:	e796      	b.n	8000932 <Spot_Welder_Main+0x11e>
			Spot_Welder_Auto_Flag = 1;
 8000a04:	7033      	strb	r3, [r6, #0]
 8000a06:	e7f1      	b.n	80009ec <Spot_Welder_Main+0x1d8>
		    ssd1306_WriteString(">AUTO:OFF", Font_11x18, White);
 8000a08:	2301      	movs	r3, #1
 8000a0a:	6821      	ldr	r1, [r4, #0]
 8000a0c:	6862      	ldr	r2, [r4, #4]
 8000a0e:	4850      	ldr	r0, [pc, #320]	; (8000b50 <Spot_Welder_Main+0x33c>)
 8000a10:	e78f      	b.n	8000932 <Spot_Welder_Main+0x11e>
		ssd1306_Fill(Black);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f8b6 	bl	8000b84 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	0008      	movs	r0, r1
 8000a1c:	f000 f9ce 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" ENBL:", Font_11x18, White);
 8000a20:	2301      	movs	r3, #1
 8000a22:	6862      	ldr	r2, [r4, #4]
 8000a24:	6821      	ldr	r1, [r4, #0]
 8000a26:	4847      	ldr	r0, [pc, #284]	; (8000b44 <Spot_Welder_Main+0x330>)
 8000a28:	f000 f9b4 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8000a2c:	2114      	movs	r1, #20
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 f9c4 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" AUTO:", Font_11x18, White);
 8000a34:	2301      	movs	r3, #1
 8000a36:	6862      	ldr	r2, [r4, #4]
 8000a38:	6821      	ldr	r1, [r4, #0]
 8000a3a:	4839      	ldr	r0, [pc, #228]	; (8000b20 <Spot_Welder_Main+0x30c>)
 8000a3c:	f000 f9aa 	bl	8000d94 <ssd1306_WriteString>
		if (Encoder_Buttorn_Clicks == 1)
 8000a40:	4a39      	ldr	r2, [pc, #228]	; (8000b28 <Spot_Welder_Main+0x314>)
 8000a42:	2300      	movs	r3, #0
 8000a44:	7816      	ldrb	r6, [r2, #0]
 8000a46:	2e01      	cmp	r6, #1
 8000a48:	d12e      	bne.n	8000aa8 <Spot_Welder_Main+0x294>
		    Encoder_Buttorn_Clicks = 0;
 8000a4a:	7013      	strb	r3, [r2, #0]
			Encoder_Buttorn_Clicks = 0;
 8000a4c:	2700      	movs	r7, #0
		    if (Encoder_Buttorn_Clicks == 1)
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <Spot_Welder_Main+0x314>)
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d101      	bne.n	8000a5a <Spot_Welder_Main+0x246>
			in_loop_flag = 0;
 8000a56:	2600      	movs	r6, #0
			Encoder_Buttorn_Clicks = 0;
 8000a58:	701f      	strb	r7, [r3, #0]
		    count = Encoder_Get_Count(&Encoder);
 8000a5a:	a804      	add	r0, sp, #16
 8000a5c:	f7ff fea0 	bl	80007a0 <Encoder_Get_Count>
		    if (count < 0)
 8000a60:	2800      	cmp	r0, #0
 8000a62:	da23      	bge.n	8000aac <Spot_Welder_Main+0x298>
			Encoder_Set_Count(&Encoder, 0);
 8000a64:	a804      	add	r0, sp, #16
 8000a66:	2100      	movs	r1, #0
 8000a68:	f7ff fe9d 	bl	80007a6 <Encoder_Set_Count>
			count = 0;
 8000a6c:	2000      	movs	r0, #0
		    itoa(count,temp, 10);
 8000a6e:	220a      	movs	r2, #10
 8000a70:	a901      	add	r1, sp, #4
 8000a72:	f001 fa4d 	bl	8001f10 <itoa>
		    ssd1306_SetCursor(0, 40);
 8000a76:	2128      	movs	r1, #40	; 0x28
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f99f 	bl	8000dbc <ssd1306_SetCursor>
		    ssd1306_WriteString(">PULSE:", Font_11x18, White);
 8000a7e:	2301      	movs	r3, #1
 8000a80:	6821      	ldr	r1, [r4, #0]
 8000a82:	6862      	ldr	r2, [r4, #4]
 8000a84:	4833      	ldr	r0, [pc, #204]	; (8000b54 <Spot_Welder_Main+0x340>)
 8000a86:	f000 f985 	bl	8000d94 <ssd1306_WriteString>
		    ssd1306_WriteString(temp, Font_11x18, White);
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	6821      	ldr	r1, [r4, #0]
 8000a8e:	6862      	ldr	r2, [r4, #4]
 8000a90:	a801      	add	r0, sp, #4
 8000a92:	f000 f97f 	bl	8000d94 <ssd1306_WriteString>
		    ssd1306_UpdateScreen();
 8000a96:	f000 f883 	bl	8000ba0 <ssd1306_UpdateScreen>
		while (in_loop_flag);
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d1d7      	bne.n	8000a4e <Spot_Welder_Main+0x23a>
		Encoder_Set_Count(&Encoder, 2);
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	a804      	add	r0, sp, #16
 8000aa2:	f7ff fe80 	bl	80007a6 <Encoder_Set_Count>
		break;
 8000aa6:	e704      	b.n	80008b2 <Spot_Welder_Main+0x9e>
	uint8_t in_loop_flag = 0;
 8000aa8:	001e      	movs	r6, r3
 8000aaa:	e7cf      	b.n	8000a4c <Spot_Welder_Main+0x238>
		    if (count > 100)
 8000aac:	2864      	cmp	r0, #100	; 0x64
 8000aae:	ddde      	ble.n	8000a6e <Spot_Welder_Main+0x25a>
			Encoder_Set_Count(&Encoder, 100);
 8000ab0:	a804      	add	r0, sp, #16
 8000ab2:	2164      	movs	r1, #100	; 0x64
 8000ab4:	f7ff fe77 	bl	80007a6 <Encoder_Set_Count>
			count = 4;
 8000ab8:	0028      	movs	r0, r5
 8000aba:	e7d8      	b.n	8000a6e <Spot_Welder_Main+0x25a>
		ssd1306_Fill(Black);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f861 	bl	8000b84 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	f000 f979 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" Auto:", Font_11x18, White);
 8000aca:	2301      	movs	r3, #1
 8000acc:	6862      	ldr	r2, [r4, #4]
 8000ace:	6821      	ldr	r1, [r4, #0]
 8000ad0:	4821      	ldr	r0, [pc, #132]	; (8000b58 <Spot_Welder_Main+0x344>)
 8000ad2:	f000 f95f 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8000ad6:	2114      	movs	r1, #20
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f96f 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(" Pulse:", Font_11x18, White);
 8000ade:	2301      	movs	r3, #1
 8000ae0:	6862      	ldr	r2, [r4, #4]
 8000ae2:	6821      	ldr	r1, [r4, #0]
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <Spot_Welder_Main+0x320>)
 8000ae6:	f000 f955 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 8000aea:	2128      	movs	r1, #40	; 0x28
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f965 	bl	8000dbc <ssd1306_SetCursor>
		ssd1306_WriteString(">Dely1:", Font_11x18, White);
 8000af2:	2301      	movs	r3, #1
 8000af4:	6821      	ldr	r1, [r4, #0]
 8000af6:	6862      	ldr	r2, [r4, #4]
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <Spot_Welder_Main+0x348>)
 8000afa:	e71a      	b.n	8000932 <Spot_Welder_Main+0x11e>
 8000afc:	20000000 	.word	0x20000000
 8000b00:	08002d34 	.word	0x08002d34
 8000b04:	08002d3e 	.word	0x08002d3e
 8000b08:	08002d4a 	.word	0x08002d4a
 8000b0c:	00400080 	.word	0x00400080
 8000b10:	48000400 	.word	0x48000400
 8000b14:	080007b1 	.word	0x080007b1
 8000b18:	080007f5 	.word	0x080007f5
 8000b1c:	20000050 	.word	0x20000050
 8000b20:	08002d51 	.word	0x08002d51
 8000b24:	08002d58 	.word	0x08002d58
 8000b28:	2000004c 	.word	0x2000004c
 8000b2c:	20000055 	.word	0x20000055
 8000b30:	08002d60 	.word	0x08002d60
 8000b34:	08002d9c 	.word	0x08002d9c
 8000b38:	08002dac 	.word	0x08002dac
 8000b3c:	08002db4 	.word	0x08002db4
 8000b40:	08002d69 	.word	0x08002d69
 8000b44:	08002d73 	.word	0x08002d73
 8000b48:	20000054 	.word	0x20000054
 8000b4c:	08002d7a 	.word	0x08002d7a
 8000b50:	08002d83 	.word	0x08002d83
 8000b54:	08002d8d 	.word	0x08002d8d
 8000b58:	08002d95 	.word	0x08002d95
 8000b5c:	08002da4 	.word	0x08002da4

08000b60 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 8000b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000b62:	2217      	movs	r2, #23
	 HAL_StatusTypeDef status;
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 8000b64:	2364      	movs	r3, #100	; 0x64
{
 8000b66:	446a      	add	r2, sp
 8000b68:	7010      	strb	r0, [r2, #0]
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	3b63      	subs	r3, #99	; 0x63
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	2178      	movs	r1, #120	; 0x78
 8000b76:	4802      	ldr	r0, [pc, #8]	; (8000b80 <ssd1306_WriteCommand+0x20>)
 8000b78:	f000 fd52 	bl	8001620 <HAL_I2C_Mem_Write>
	if(status!=HAL_OK)
	{

	}
}
 8000b7c:	b007      	add	sp, #28
 8000b7e:	bd00      	pop	{pc}
 8000b80:	200004a0 	.word	0x200004a0

08000b84 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b84:	1e42      	subs	r2, r0, #1
 8000b86:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b8c:	4903      	ldr	r1, [pc, #12]	; (8000b9c <ssd1306_Fill+0x18>)
 8000b8e:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b90:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b92:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b94:	3301      	adds	r3, #1
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d1fb      	bne.n	8000b92 <ssd1306_Fill+0xe>
	}
}
 8000b9a:	4770      	bx	lr
 8000b9c:	2000005e 	.word	0x2000005e

08000ba0 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8000ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000ba2:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 8000ba4:	2664      	movs	r6, #100	; 0x64
 8000ba6:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 8000ba8:	0020      	movs	r0, r4
 8000baa:	3850      	subs	r0, #80	; 0x50
 8000bac:	b2c0      	uxtb	r0, r0
 8000bae:	f7ff ffd7 	bl	8000b60 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff ffd4 	bl	8000b60 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000bb8:	2010      	movs	r0, #16
 8000bba:	f7ff ffd1 	bl	8000b60 <ssd1306_WriteCommand>
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <ssd1306_UpdateScreen+0x40>)
 8000bc0:	01e3      	lsls	r3, r4, #7
 8000bc2:	189b      	adds	r3, r3, r2
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	9602      	str	r6, [sp, #8]
 8000bc8:	9501      	str	r5, [sp, #4]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	2178      	movs	r1, #120	; 0x78
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <ssd1306_UpdateScreen+0x44>)
 8000bd2:	3401      	adds	r4, #1
 8000bd4:	f000 fd24 	bl	8001620 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000bd8:	2c08      	cmp	r4, #8
 8000bda:	d1e5      	bne.n	8000ba8 <ssd1306_UpdateScreen+0x8>
		{
		    //Error
		}
	}
}
 8000bdc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	2000005e 	.word	0x2000005e
 8000be4:	200004a0 	.word	0x200004a0

08000be8 <ssd1306_Init>:
{	
 8000be8:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(0xAE); //display off
 8000bea:	20ae      	movs	r0, #174	; 0xae
 8000bec:	f7ff ffb8 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000bf0:	2020      	movs	r0, #32
 8000bf2:	f7ff ffb5 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	f7ff ffb2 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bfc:	20b0      	movs	r0, #176	; 0xb0
 8000bfe:	f7ff ffaf 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c02:	20c8      	movs	r0, #200	; 0xc8
 8000c04:	f7ff ffac 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ffa9 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff ffa6 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000c14:	2040      	movs	r0, #64	; 0x40
 8000c16:	f7ff ffa3 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000c1a:	2081      	movs	r0, #129	; 0x81
 8000c1c:	f7ff ffa0 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000c20:	20ff      	movs	r0, #255	; 0xff
 8000c22:	f7ff ff9d 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000c26:	20a1      	movs	r0, #161	; 0xa1
 8000c28:	f7ff ff9a 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000c2c:	20a6      	movs	r0, #166	; 0xa6
 8000c2e:	f7ff ff97 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000c32:	20a8      	movs	r0, #168	; 0xa8
 8000c34:	f7ff ff94 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000c38:	203f      	movs	r0, #63	; 0x3f
 8000c3a:	f7ff ff91 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c3e:	20a4      	movs	r0, #164	; 0xa4
 8000c40:	f7ff ff8e 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000c44:	20d3      	movs	r0, #211	; 0xd3
 8000c46:	f7ff ff8b 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff88 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c50:	20d5      	movs	r0, #213	; 0xd5
 8000c52:	f7ff ff85 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c56:	20f0      	movs	r0, #240	; 0xf0
 8000c58:	f7ff ff82 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c5c:	20d9      	movs	r0, #217	; 0xd9
 8000c5e:	f7ff ff7f 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000c62:	2022      	movs	r0, #34	; 0x22
 8000c64:	f7ff ff7c 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000c68:	20da      	movs	r0, #218	; 0xda
 8000c6a:	f7ff ff79 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000c6e:	2012      	movs	r0, #18
 8000c70:	f7ff ff76 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c74:	20db      	movs	r0, #219	; 0xdb
 8000c76:	f7ff ff73 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c7a:	2020      	movs	r0, #32
 8000c7c:	f7ff ff70 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c80:	208d      	movs	r0, #141	; 0x8d
 8000c82:	f7ff ff6d 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000c86:	2014      	movs	r0, #20
 8000c88:	f7ff ff6a 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000c8c:	20af      	movs	r0, #175	; 0xaf
 8000c8e:	f7ff ff67 	bl	8000b60 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff76 	bl	8000b84 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000c98:	f7ff ff82 	bl	8000ba0 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8000c9c:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8000c9e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <ssd1306_Init+0xc4>)
 8000ca2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ca4:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8000ca6:	7158      	strb	r0, [r3, #5]
}
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000058 	.word	0x20000058

08000cb0 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8000cb0:	b243      	sxtb	r3, r0
{
 8000cb2:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db16      	blt.n	8000ce6 <ssd1306_DrawPixel+0x36>
 8000cb8:	293f      	cmp	r1, #63	; 0x3f
 8000cba:	d814      	bhi.n	8000ce6 <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <ssd1306_DrawPixel+0x40>)
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 8000cc4:	4253      	negs	r3, r2
 8000cc6:	415a      	adcs	r2, r3
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	2407      	movs	r4, #7
 8000ccc:	08cb      	lsrs	r3, r1, #3
 8000cce:	400c      	ands	r4, r1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	01db      	lsls	r3, r3, #7
 8000cd6:	4d07      	ldr	r5, [pc, #28]	; (8000cf4 <ssd1306_DrawPixel+0x44>)
 8000cd8:	1818      	adds	r0, r3, r0
 8000cda:	562e      	ldrsb	r6, [r5, r0]
 8000cdc:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d102      	bne.n	8000ce8 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ce2:	4333      	orrs	r3, r6
 8000ce4:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ce8:	439e      	bics	r6, r3
 8000cea:	542e      	strb	r6, [r5, r0]
 8000cec:	e7fb      	b.n	8000ce6 <ssd1306_DrawPixel+0x36>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000058 	.word	0x20000058
 8000cf4:	2000005e 	.word	0x2000005e

08000cf8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	9303      	str	r3, [sp, #12]
 8000cfe:	b2cb      	uxtb	r3, r1
 8000d00:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <ssd1306_WriteChar+0x98>)
{
 8000d04:	9106      	str	r1, [sp, #24]
 8000d06:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d08:	9901      	ldr	r1, [sp, #4]
 8000d0a:	881a      	ldrh	r2, [r3, #0]
{
 8000d0c:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d0e:	9200      	str	r2, [sp, #0]
 8000d10:	1852      	adds	r2, r2, r1
 8000d12:	2a7f      	cmp	r2, #127	; 0x7f
 8000d14:	dc3a      	bgt.n	8000d8c <ssd1306_WriteChar+0x94>
 8000d16:	aa06      	add	r2, sp, #24
 8000d18:	7852      	ldrb	r2, [r2, #1]
 8000d1a:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000d1c:	885c      	ldrh	r4, [r3, #2]
 8000d1e:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d20:	2b3f      	cmp	r3, #63	; 0x3f
 8000d22:	dc33      	bgt.n	8000d8c <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d24:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 8000d26:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d28:	3b20      	subs	r3, #32
 8000d2a:	435a      	muls	r2, r3
 8000d2c:	b2e4      	uxtb	r4, r4
 8000d2e:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 8000d30:	9b02      	ldr	r3, [sp, #8]
 8000d32:	42bb      	cmp	r3, r7
 8000d34:	d808      	bhi.n	8000d48 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8000d36:	9a01      	ldr	r2, [sp, #4]
 8000d38:	9b00      	ldr	r3, [sp, #0]
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <ssd1306_WriteChar+0x98>)
 8000d3e:	4463      	add	r3, ip
 8000d40:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 8000d42:	0030      	movs	r0, r6
 8000d44:	b009      	add	sp, #36	; 0x24
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8000d48:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d4a:	9b04      	ldr	r3, [sp, #16]
 8000d4c:	9a07      	ldr	r2, [sp, #28]
 8000d4e:	19db      	adds	r3, r3, r7
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	5a9b      	ldrh	r3, [r3, r2]
 8000d54:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	d803      	bhi.n	8000d64 <ssd1306_WriteChar+0x6c>
 8000d5c:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 8000d5e:	3701      	adds	r7, #1
 8000d60:	b2e4      	uxtb	r4, r4
 8000d62:	e7e5      	b.n	8000d30 <ssd1306_WriteChar+0x38>
 8000d64:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	18e8      	adds	r0, r5, r3
 8000d6a:	9b05      	ldr	r3, [sp, #20]
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	40ab      	lsls	r3, r5
 8000d70:	b2c0      	uxtb	r0, r0
 8000d72:	4213      	tst	r3, r2
 8000d74:	d005      	beq.n	8000d82 <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d76:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d78:	0021      	movs	r1, r4
 8000d7a:	f7ff ff99 	bl	8000cb0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000d7e:	3501      	adds	r5, #1
 8000d80:	e7e9      	b.n	8000d56 <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d82:	9a03      	ldr	r2, [sp, #12]
 8000d84:	4253      	negs	r3, r2
 8000d86:	415a      	adcs	r2, r3
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	e7f5      	b.n	8000d78 <ssd1306_WriteChar+0x80>
		return 0;
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e7d8      	b.n	8000d42 <ssd1306_WriteChar+0x4a>
 8000d90:	20000058 	.word	0x20000058

08000d94 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d96:	0004      	movs	r4, r0
 8000d98:	001d      	movs	r5, r3
 8000d9a:	9100      	str	r1, [sp, #0]
 8000d9c:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8000d9e:	7820      	ldrb	r0, [r4, #0]
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d100      	bne.n	8000da6 <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8000da4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000da6:	002b      	movs	r3, r5
 8000da8:	9900      	ldr	r1, [sp, #0]
 8000daa:	9a01      	ldr	r2, [sp, #4]
 8000dac:	f7ff ffa4 	bl	8000cf8 <ssd1306_WriteChar>
 8000db0:	0003      	movs	r3, r0
 8000db2:	7820      	ldrb	r0, [r4, #0]
 8000db4:	4283      	cmp	r3, r0
 8000db6:	d1f5      	bne.n	8000da4 <ssd1306_WriteString+0x10>
		str++;
 8000db8:	3401      	adds	r4, #1
 8000dba:	e7f0      	b.n	8000d9e <ssd1306_WriteString+0xa>

08000dbc <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000dbc:	4b01      	ldr	r3, [pc, #4]	; (8000dc4 <ssd1306_SetCursor+0x8>)
 8000dbe:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000dc0:	8059      	strh	r1, [r3, #2]
}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000058 	.word	0x20000058

08000dc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_MspInit+0x2c>)
{
 8000dcc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	6999      	ldr	r1, [r3, #24]
 8000dd0:	4301      	orrs	r1, r0
 8000dd2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4002      	ands	r2, r0
 8000ddc:	9200      	str	r2, [sp, #0]
 8000dde:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	61da      	str	r2, [r3, #28]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	400b      	ands	r3, r1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	b002      	add	sp, #8
 8000df0:	4770      	bx	lr
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df8:	4770      	bx	lr

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler>

08000dfc <SVC_Handler>:
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f863 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systic_Callback();
 8000e06:	f7ff fcd9 	bl	80007bc <Systic_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bd10      	pop	{r4, pc}

08000e0c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e0c:	4770      	bx	lr
	...

08000e10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e3a:	f7ff ffe7 	bl	8000e0c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e3e:	f001 f82b 	bl	8001e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fbfd 	bl	8000640 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   r0, =_estack
 8000e48:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e54:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 8000e58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e5c:	200004f0 	.word	0x200004f0

08000e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_IRQHandler>
	...

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	20fa      	movs	r0, #250	; 0xfa
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_InitTick+0x3c>)
 8000e6c:	0080      	lsls	r0, r0, #2
 8000e6e:	7819      	ldrb	r1, [r3, #0]
 8000e70:	f7ff f954 	bl	800011c <__udivsi3>
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_InitTick+0x40>)
 8000e76:	0001      	movs	r1, r0
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	f7ff f94f 	bl	800011c <__udivsi3>
 8000e7e:	f000 f997 	bl	80011b0 <HAL_SYSTICK_Config>
 8000e82:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	2d03      	cmp	r5, #3
 8000e8c:	d807      	bhi.n	8000e9e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	3802      	subs	r0, #2
 8000e90:	0022      	movs	r2, r4
 8000e92:	0029      	movs	r1, r5
 8000e94:	f000 f962 	bl	800115c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	0020      	movs	r0, r4
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_InitTick+0x44>)
 8000e9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000010 	.word	0x20000010

08000eac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	2310      	movs	r3, #16
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_Init+0x1c>)
{
 8000eb0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	f7ff ffd3 	bl	8000e64 <HAL_InitTick>
  HAL_MspInit();
 8000ebe:	f7ff ff83 	bl	8000dc8 <HAL_MspInit>
}
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_IncTick+0x10>)
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_IncTick+0x14>)
 8000ed0:	6811      	ldr	r1, [r2, #0]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	185b      	adds	r3, r3, r1
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	4770      	bx	lr
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200004ec 	.word	0x200004ec
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <HAL_GetTick+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	200004ec 	.word	0x200004ec

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff fff6 	bl	8000ee4 <HAL_GetTick>
 8000ef8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	1c63      	adds	r3, r4, #1
 8000efc:	d002      	beq.n	8000f04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_Delay+0x20>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	42a0      	cmp	r0, r4
 8000f0c:	d3fa      	bcc.n	8000f04 <HAL_Delay+0x14>
  {
  }
}
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	2000000c 	.word	0x2000000c

08000f14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d07e      	beq.n	800101c <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d106      	bne.n	8000f32 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f24:	0022      	movs	r2, r4
 8000f26:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000f2c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000f2e:	f7ff f9c5 	bl	80002bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f34:	06db      	lsls	r3, r3, #27
 8000f36:	d500      	bpl.n	8000f3a <HAL_ADC_Init+0x26>
 8000f38:	e085      	b.n	8001046 <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	6898      	ldr	r0, [r3, #8]
 8000f40:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f42:	d000      	beq.n	8000f46 <HAL_ADC_Init+0x32>
 8000f44:	e07f      	b.n	8001046 <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f48:	4942      	ldr	r1, [pc, #264]	; (8001054 <HAL_ADC_Init+0x140>)
 8000f4a:	4011      	ands	r1, r2
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f50:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	400a      	ands	r2, r1
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_ADC_Init+0x54>
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	4211      	tst	r1, r2
 8000f60:	d10e      	bne.n	8000f80 <HAL_ADC_Init+0x6c>
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	0412      	lsls	r2, r2, #16
 8000f66:	d40b      	bmi.n	8000f80 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f68:	2118      	movs	r1, #24
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	68a1      	ldr	r1, [r4, #8]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	6862      	ldr	r2, [r4, #4]
 8000f78:	0089      	lsls	r1, r1, #2
 8000f7a:	0889      	lsrs	r1, r1, #2
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_ADC_Init+0x144>)
 8000f84:	400a      	ands	r2, r1
 8000f86:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f88:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f8a:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f8c:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f8e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f90:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f94:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f96:	3a01      	subs	r2, #1
 8000f98:	1e56      	subs	r6, r2, #1
 8000f9a:	41b2      	sbcs	r2, r6
 8000f9c:	0316      	lsls	r6, r2, #12
 8000f9e:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fa0:	034f      	lsls	r7, r1, #13
 8000fa2:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fa4:	6922      	ldr	r2, [r4, #16]
 8000fa6:	432f      	orrs	r7, r5
 8000fa8:	2a02      	cmp	r2, #2
 8000faa:	d100      	bne.n	8000fae <HAL_ADC_Init+0x9a>
 8000fac:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000fae:	1d62      	adds	r2, r4, #5
 8000fb0:	7fd2      	ldrb	r2, [r2, #31]
 8000fb2:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fb4:	433a      	orrs	r2, r7
 8000fb6:	4332      	orrs	r2, r6
 8000fb8:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fba:	7ee0      	ldrb	r0, [r4, #27]
 8000fbc:	2801      	cmp	r0, #1
 8000fbe:	d104      	bne.n	8000fca <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc0:	2900      	cmp	r1, #0
 8000fc2:	d12c      	bne.n	800101e <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	0249      	lsls	r1, r1, #9
 8000fc8:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fca:	20c2      	movs	r0, #194	; 0xc2
 8000fcc:	69e1      	ldr	r1, [r4, #28]
 8000fce:	30ff      	adds	r0, #255	; 0xff
 8000fd0:	4281      	cmp	r1, r0
 8000fd2:	d002      	beq.n	8000fda <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fd4:	6a20      	ldr	r0, [r4, #32]
 8000fd6:	4301      	orrs	r1, r0
 8000fd8:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fda:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fdc:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fde:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fe0:	4311      	orrs	r1, r2
 8000fe2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fe6:	4281      	cmp	r1, r0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_ADC_Init+0xdc>
 8000fea:	1e48      	subs	r0, r1, #1
 8000fec:	2806      	cmp	r0, #6
 8000fee:	d807      	bhi.n	8001000 <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ff0:	2507      	movs	r5, #7
 8000ff2:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ff4:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ff6:	43a8      	bics	r0, r5
 8000ff8:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ffa:	6958      	ldr	r0, [r3, #20]
 8000ffc:	4301      	orrs	r1, r0
 8000ffe:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4916      	ldr	r1, [pc, #88]	; (800105c <HAL_ADC_Init+0x148>)
 8001004:	400b      	ands	r3, r1
 8001006:	4293      	cmp	r3, r2
 8001008:	d111      	bne.n	800102e <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100a:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001012:	4393      	bics	r3, r2
 8001014:	001a      	movs	r2, r3
 8001016:	2301      	movs	r3, #1
 8001018:	4313      	orrs	r3, r2
 800101a:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101e:	2120      	movs	r1, #32
 8001020:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001022:	4329      	orrs	r1, r5
 8001024:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001028:	4308      	orrs	r0, r1
 800102a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800102c:	e7cd      	b.n	8000fca <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 800102e:	2212      	movs	r2, #18
 8001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001034:	4393      	bics	r3, r2
 8001036:	001a      	movs	r2, r3
 8001038:	2310      	movs	r3, #16
 800103a:	4313      	orrs	r3, r2
 800103c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001040:	4303      	orrs	r3, r0
 8001042:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001044:	e7ea      	b.n	800101c <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001046:	2310      	movs	r3, #16
 8001048:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800104a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	4313      	orrs	r3, r2
 800104e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001050:	e7e4      	b.n	800101c <HAL_ADC_Init+0x108>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	fffffefd 	.word	0xfffffefd
 8001058:	fffe0219 	.word	0xfffe0219
 800105c:	833fffe7 	.word	0x833fffe7

08001060 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001062:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001064:	0004      	movs	r4, r0
{
 8001066:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001068:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 800106a:	3434      	adds	r4, #52	; 0x34
 800106c:	7823      	ldrb	r3, [r4, #0]
{
 800106e:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001070:	2002      	movs	r0, #2
 8001072:	2b01      	cmp	r3, #1
 8001074:	d02f      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001076:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001078:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800107a:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 800107c:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800107e:	68bd      	ldr	r5, [r7, #8]
 8001080:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8001082:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001084:	4005      	ands	r5, r0
 8001086:	d159      	bne.n	800113c <HAL_ADC_ConfigChannel+0xdc>
 8001088:	680e      	ldr	r6, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800108a:	482f      	ldr	r0, [pc, #188]	; (8001148 <HAL_ADC_ConfigChannel+0xe8>)
 800108c:	40b3      	lsls	r3, r6
 800108e:	0032      	movs	r2, r6
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	684b      	ldr	r3, [r1, #4]
 8001094:	3a10      	subs	r2, #16
 8001096:	4283      	cmp	r3, r0
 8001098:	d03d      	beq.n	8001116 <HAL_ADC_ConfigChannel+0xb6>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	9801      	ldr	r0, [sp, #4]
 800109e:	4318      	orrs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010a0:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010a2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	459c      	cmp	ip, r3
 80010a8:	d010      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
 80010aa:	4663      	mov	r3, ip
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d90c      	bls.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010b2:	688b      	ldr	r3, [r1, #8]
 80010b4:	2107      	movs	r1, #7
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	4008      	ands	r0, r1
 80010ba:	4283      	cmp	r3, r0
 80010bc:	d006      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010be:	6978      	ldr	r0, [r7, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010c0:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010c2:	4388      	bics	r0, r1
 80010c4:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	4303      	orrs	r3, r0
 80010ca:	617b      	str	r3, [r7, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010cc:	2a01      	cmp	r2, #1
 80010ce:	d904      	bls.n	80010da <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d2:	2300      	movs	r3, #0
 80010d4:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 80010d6:	b005      	add	sp, #20
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010da:	0033      	movs	r3, r6
 80010dc:	3b10      	subs	r3, #16
 80010de:	1e58      	subs	r0, r3, #1
 80010e0:	4183      	sbcs	r3, r0
 80010e2:	2080      	movs	r0, #128	; 0x80
 80010e4:	4919      	ldr	r1, [pc, #100]	; (800114c <HAL_ADC_ConfigChannel+0xec>)
 80010e6:	425b      	negs	r3, r3
 80010e8:	680a      	ldr	r2, [r1, #0]
 80010ea:	059b      	lsls	r3, r3, #22
 80010ec:	0400      	lsls	r0, r0, #16
 80010ee:	181b      	adds	r3, r3, r0
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f4:	2e10      	cmp	r6, #16
 80010f6:	d1eb      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_ADC_ConfigChannel+0xf0>)
 80010fa:	4916      	ldr	r1, [pc, #88]	; (8001154 <HAL_ADC_ConfigChannel+0xf4>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f7ff f80d 	bl	800011c <__udivsi3>
 8001102:	230a      	movs	r3, #10
 8001104:	4358      	muls	r0, r3
 8001106:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8001108:	9b03      	ldr	r3, [sp, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0e0      	beq.n	80010d0 <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 800110e:	9b03      	ldr	r3, [sp, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	9303      	str	r3, [sp, #12]
 8001114:	e7f8      	b.n	8001108 <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	4399      	bics	r1, r3
 800111c:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800111e:	2a01      	cmp	r2, #1
 8001120:	d8d6      	bhi.n	80010d0 <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001122:	1e53      	subs	r3, r2, #1
 8001124:	419a      	sbcs	r2, r3
 8001126:	4253      	negs	r3, r2
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <HAL_ADC_ConfigChannel+0xec>)
 800112c:	03d2      	lsls	r2, r2, #15
 800112e:	4013      	ands	r3, r2
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_ADC_ConfigChannel+0xf8>)
 8001132:	6808      	ldr	r0, [r1, #0]
 8001134:	189b      	adds	r3, r3, r2
 8001136:	4003      	ands	r3, r0
 8001138:	600b      	str	r3, [r1, #0]
 800113a:	e7c9      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113c:	2120      	movs	r1, #32
 800113e:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001140:	4301      	orrs	r1, r0
 8001142:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001144:	0018      	movs	r0, r3
 8001146:	e7c4      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x72>
 8001148:	00001001 	.word	0x00001001
 800114c:	40012708 	.word	0x40012708
 8001150:	20000008 	.word	0x20000008
 8001154:	000f4240 	.word	0x000f4240
 8001158:	ff7fffff 	.word	0xff7fffff

0800115c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115c:	b530      	push	{r4, r5, lr}
 800115e:	25ff      	movs	r5, #255	; 0xff
 8001160:	2403      	movs	r4, #3
 8001162:	002a      	movs	r2, r5
 8001164:	b2c3      	uxtb	r3, r0
 8001166:	401c      	ands	r4, r3
 8001168:	00e4      	lsls	r4, r4, #3
 800116a:	40a2      	lsls	r2, r4
 800116c:	0189      	lsls	r1, r1, #6
 800116e:	4029      	ands	r1, r5
 8001170:	43d2      	mvns	r2, r2
 8001172:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001174:	2800      	cmp	r0, #0
 8001176:	db0a      	blt.n	800118e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	24c0      	movs	r4, #192	; 0xc0
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_NVIC_SetPriority+0x4c>)
 800117c:	0880      	lsrs	r0, r0, #2
 800117e:	0080      	lsls	r0, r0, #2
 8001180:	18c0      	adds	r0, r0, r3
 8001182:	00a4      	lsls	r4, r4, #2
 8001184:	5903      	ldr	r3, [r0, r4]
 8001186:	401a      	ands	r2, r3
 8001188:	4311      	orrs	r1, r2
 800118a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800118c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118e:	200f      	movs	r0, #15
 8001190:	4003      	ands	r3, r0
 8001192:	3b08      	subs	r3, #8
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_NVIC_SetPriority+0x50>)
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	181b      	adds	r3, r3, r0
 800119c:	69d8      	ldr	r0, [r3, #28]
 800119e:	4002      	ands	r2, r0
 80011a0:	4311      	orrs	r1, r2
 80011a2:	61d9      	str	r1, [r3, #28]
 80011a4:	e7f2      	b.n	800118c <HAL_NVIC_SetPriority+0x30>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_SYSTICK_Config+0x28>)
 80011b2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d80d      	bhi.n	80011d6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ba:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c2:	6a03      	ldr	r3, [r0, #32]
 80011c4:	0609      	lsls	r1, r1, #24
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ce:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011d6:	4770      	bx	lr
 80011d8:	00ffffff 	.word	0x00ffffff
 80011dc:	e000e010 	.word	0xe000e010
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	680b      	ldr	r3, [r1, #0]
{ 
 80011e8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 80011ec:	2300      	movs	r3, #0
{ 
 80011ee:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	9a03      	ldr	r2, [sp, #12]
 80011f2:	40da      	lsrs	r2, r3
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 80011f6:	b007      	add	sp, #28
 80011f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011fa:	2201      	movs	r2, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	9902      	ldr	r1, [sp, #8]
 8001202:	9a03      	ldr	r2, [sp, #12]
 8001204:	400a      	ands	r2, r1
 8001206:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001208:	d100      	bne.n	800120c <HAL_GPIO_Init+0x28>
 800120a:	e08c      	b.n	8001326 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	9a01      	ldr	r2, [sp, #4]
 800120e:	2110      	movs	r1, #16
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	0016      	movs	r6, r2
 8001214:	438e      	bics	r6, r1
 8001216:	2e02      	cmp	r6, #2
 8001218:	d10e      	bne.n	8001238 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121a:	2507      	movs	r5, #7
 800121c:	401d      	ands	r5, r3
 800121e:	00ad      	lsls	r5, r5, #2
 8001220:	3901      	subs	r1, #1
 8001222:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001224:	08dc      	lsrs	r4, r3, #3
 8001226:	00a4      	lsls	r4, r4, #2
 8001228:	1904      	adds	r4, r0, r4
 800122a:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800122c:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	9901      	ldr	r1, [sp, #4]
 8001230:	6909      	ldr	r1, [r1, #16]
 8001232:	40a9      	lsls	r1, r5
 8001234:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001236:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001238:	2403      	movs	r4, #3
 800123a:	005f      	lsls	r7, r3, #1
 800123c:	40bc      	lsls	r4, r7
 800123e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001240:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001242:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001244:	4025      	ands	r5, r4
 8001246:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001248:	2503      	movs	r5, #3
 800124a:	4015      	ands	r5, r2
 800124c:	40bd      	lsls	r5, r7
 800124e:	4661      	mov	r1, ip
 8001250:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001252:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001254:	2e01      	cmp	r6, #1
 8001256:	d80f      	bhi.n	8001278 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 800125a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	40bd      	lsls	r5, r7
 8001262:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001264:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001266:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800126a:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800126e:	2101      	movs	r1, #1
 8001270:	400d      	ands	r5, r1
 8001272:	409d      	lsls	r5, r3
 8001274:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001276:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001278:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127a:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800127c:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001280:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001282:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001286:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001288:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800128a:	420a      	tst	r2, r1
 800128c:	d04b      	beq.n	8001326 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2101      	movs	r1, #1
 8001290:	4c26      	ldr	r4, [pc, #152]	; (800132c <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001296:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	430d      	orrs	r5, r1
 800129a:	61a5      	str	r5, [r4, #24]
 800129c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800129e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	400c      	ands	r4, r1
 80012a2:	9405      	str	r4, [sp, #20]
 80012a4:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	240f      	movs	r4, #15
 80012a8:	4921      	ldr	r1, [pc, #132]	; (8001330 <HAL_GPIO_Init+0x14c>)
 80012aa:	00ad      	lsls	r5, r5, #2
 80012ac:	00b6      	lsls	r6, r6, #2
 80012ae:	186d      	adds	r5, r5, r1
 80012b0:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 80012b4:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b6:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b8:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ba:	2400      	movs	r4, #0
 80012bc:	4288      	cmp	r0, r1
 80012be:	d00c      	beq.n	80012da <HAL_GPIO_Init+0xf6>
 80012c0:	491c      	ldr	r1, [pc, #112]	; (8001334 <HAL_GPIO_Init+0x150>)
 80012c2:	3401      	adds	r4, #1
 80012c4:	4288      	cmp	r0, r1
 80012c6:	d008      	beq.n	80012da <HAL_GPIO_Init+0xf6>
 80012c8:	491b      	ldr	r1, [pc, #108]	; (8001338 <HAL_GPIO_Init+0x154>)
 80012ca:	3401      	adds	r4, #1
 80012cc:	4288      	cmp	r0, r1
 80012ce:	d004      	beq.n	80012da <HAL_GPIO_Init+0xf6>
 80012d0:	491a      	ldr	r1, [pc, #104]	; (800133c <HAL_GPIO_Init+0x158>)
 80012d2:	3403      	adds	r4, #3
 80012d4:	4288      	cmp	r0, r1
 80012d6:	d100      	bne.n	80012da <HAL_GPIO_Init+0xf6>
 80012d8:	3c02      	subs	r4, #2
 80012da:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80012dc:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012de:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80012e0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80012e4:	4c16      	ldr	r4, [pc, #88]	; (8001340 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80012e6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80012e8:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80012ea:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	03d1      	lsls	r1, r2, #15
 80012ee:	d401      	bmi.n	80012f4 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80012f0:	003e      	movs	r6, r7
 80012f2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80012f4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80012f6:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 80012f8:	9e00      	ldr	r6, [sp, #0]
 80012fa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	0391      	lsls	r1, r2, #14
 80012fe:	d401      	bmi.n	8001304 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8001300:	003e      	movs	r6, r7
 8001302:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001304:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001306:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8001308:	9e00      	ldr	r6, [sp, #0]
 800130a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130c:	02d1      	lsls	r1, r2, #11
 800130e:	d401      	bmi.n	8001314 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001310:	003e      	movs	r6, r7
 8001312:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001314:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001316:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001318:	9f00      	ldr	r7, [sp, #0]
 800131a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	0292      	lsls	r2, r2, #10
 800131e:	d401      	bmi.n	8001324 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001320:	402e      	ands	r6, r5
 8001322:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001324:	60e7      	str	r7, [r4, #12]
    position++;
 8001326:	3301      	adds	r3, #1
 8001328:	e762      	b.n	80011f0 <HAL_GPIO_Init+0xc>
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800
 800133c:	48000c00 	.word	0x48000c00
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001344:	6900      	ldr	r0, [r0, #16]
 8001346:	4008      	ands	r0, r1
 8001348:	1e41      	subs	r1, r0, #1
 800134a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800134c:	b2c0      	uxtb	r0, r0
  }
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	2a00      	cmp	r2, #0
 8001352:	d001      	beq.n	8001358 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001354:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001356:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001358:	6281      	str	r1, [r0, #40]	; 0x28
}
 800135a:	e7fc      	b.n	8001356 <HAL_GPIO_WritePin+0x6>

0800135c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	0792      	lsls	r2, r2, #30
 8001362:	d501      	bpl.n	8001368 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001368:	2201      	movs	r2, #1
 800136a:	6999      	ldr	r1, [r3, #24]
 800136c:	4211      	tst	r1, r2
 800136e:	d102      	bne.n	8001376 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001370:	6999      	ldr	r1, [r3, #24]
 8001372:	430a      	orrs	r2, r1
 8001374:	619a      	str	r2, [r3, #24]
  }
}
 8001376:	4770      	bx	lr

08001378 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001378:	b530      	push	{r4, r5, lr}
 800137a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800137c:	0412      	lsls	r2, r2, #16
 800137e:	6800      	ldr	r0, [r0, #0]
 8001380:	4322      	orrs	r2, r4
 8001382:	4313      	orrs	r3, r2
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <I2C_TransferConfig+0x24>)
 8001386:	6845      	ldr	r5, [r0, #4]
 8001388:	0589      	lsls	r1, r1, #22
 800138a:	0d64      	lsrs	r4, r4, #21
 800138c:	0d89      	lsrs	r1, r1, #22
 800138e:	4314      	orrs	r4, r2
 8001390:	43a5      	bics	r5, r4
 8001392:	430b      	orrs	r3, r1
 8001394:	432b      	orrs	r3, r5
 8001396:	6043      	str	r3, [r0, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001398:	bd30      	pop	{r4, r5, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	03ff63ff 	.word	0x03ff63ff

080013a0 <I2C_IsAcknowledgeFailed>:
{
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013a2:	6803      	ldr	r3, [r0, #0]
{
 80013a4:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013a6:	6998      	ldr	r0, [r3, #24]
 80013a8:	2310      	movs	r3, #16
{
 80013aa:	000e      	movs	r6, r1
 80013ac:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ae:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013b0:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d118      	bne.n	80013e8 <I2C_IsAcknowledgeFailed+0x48>
}
 80013b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80013b8:	1c72      	adds	r2, r6, #1
 80013ba:	d016      	beq.n	80013ea <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013bc:	f7ff fd92 	bl	8000ee4 <HAL_GetTick>
 80013c0:	1bc0      	subs	r0, r0, r7
 80013c2:	42b0      	cmp	r0, r6
 80013c4:	d801      	bhi.n	80013ca <I2C_IsAcknowledgeFailed+0x2a>
 80013c6:	2e00      	cmp	r6, #0
 80013c8:	d10e      	bne.n	80013e8 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ca:	2220      	movs	r2, #32
 80013cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	0023      	movs	r3, r4
 80013d4:	3341      	adds	r3, #65	; 0x41
 80013d6:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d8:	0022      	movs	r2, r4
 80013da:	2300      	movs	r3, #0
 80013dc:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80013de:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80013e4:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80013e6:	e7e6      	b.n	80013b6 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	422a      	tst	r2, r5
 80013ee:	d0e3      	beq.n	80013b8 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f0:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80013f2:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80013f8:	f7ff ffb0 	bl	800135c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	4906      	ldr	r1, [pc, #24]	; (8001418 <I2C_IsAcknowledgeFailed+0x78>)
 8001400:	6853      	ldr	r3, [r2, #4]
 8001402:	400b      	ands	r3, r1
 8001404:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001406:	2304      	movs	r3, #4
 8001408:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800140a:	4313      	orrs	r3, r2
 800140c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800140e:	0023      	movs	r3, r4
 8001410:	3341      	adds	r3, #65	; 0x41
 8001412:	701d      	strb	r5, [r3, #0]
 8001414:	e7e0      	b.n	80013d8 <I2C_IsAcknowledgeFailed+0x38>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	fe00e800 	.word	0xfe00e800

0800141c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	0004      	movs	r4, r0
 8001420:	000d      	movs	r5, r1
 8001422:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001424:	2720      	movs	r7, #32
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	423b      	tst	r3, r7
 800142c:	d001      	beq.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800142e:	2000      	movs	r0, #0
}
 8001430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	0032      	movs	r2, r6
 8001434:	0029      	movs	r1, r5
 8001436:	0020      	movs	r0, r4
 8001438:	f7ff ffb2 	bl	80013a0 <I2C_IsAcknowledgeFailed>
 800143c:	2800      	cmp	r0, #0
 800143e:	d113      	bne.n	8001468 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001440:	f7ff fd50 	bl	8000ee4 <HAL_GetTick>
 8001444:	1b80      	subs	r0, r0, r6
 8001446:	42a8      	cmp	r0, r5
 8001448:	d801      	bhi.n	800144e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800144a:	2d00      	cmp	r5, #0
 800144c:	d1eb      	bne.n	8001426 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800144e:	2220      	movs	r2, #32
 8001450:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001452:	4313      	orrs	r3, r2
 8001454:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001456:	0023      	movs	r3, r4
 8001458:	3341      	adds	r3, #65	; 0x41
 800145a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	0022      	movs	r2, r4
 800145e:	2300      	movs	r3, #0
 8001460:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001462:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001466:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	e7e1      	b.n	8001430 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800146c <I2C_WaitOnFlagUntilTimeout>:
{
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	0004      	movs	r4, r0
 8001470:	000e      	movs	r6, r1
 8001472:	0017      	movs	r7, r2
 8001474:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	6993      	ldr	r3, [r2, #24]
 800147a:	4033      	ands	r3, r6
 800147c:	1b9b      	subs	r3, r3, r6
 800147e:	4259      	negs	r1, r3
 8001480:	414b      	adcs	r3, r1
 8001482:	42bb      	cmp	r3, r7
 8001484:	d001      	beq.n	800148a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
 8001488:	e017      	b.n	80014ba <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800148a:	1c6b      	adds	r3, r5, #1
 800148c:	d0f4      	beq.n	8001478 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff fd29 	bl	8000ee4 <HAL_GetTick>
 8001492:	9b06      	ldr	r3, [sp, #24]
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	42a8      	cmp	r0, r5
 8001498:	d801      	bhi.n	800149e <I2C_WaitOnFlagUntilTimeout+0x32>
 800149a:	2d00      	cmp	r5, #0
 800149c:	d1eb      	bne.n	8001476 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800149e:	2220      	movs	r2, #32
 80014a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80014a2:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a4:	4313      	orrs	r3, r2
 80014a6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014a8:	0023      	movs	r3, r4
 80014aa:	3341      	adds	r3, #65	; 0x41
 80014ac:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ae:	0022      	movs	r2, r4
 80014b0:	2300      	movs	r3, #0
 80014b2:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80014b4:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80014b8:	7023      	strb	r3, [r4, #0]
}
 80014ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014bc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014be:	0004      	movs	r4, r0
 80014c0:	000d      	movs	r5, r1
 80014c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014c4:	2702      	movs	r7, #2
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	423b      	tst	r3, r7
 80014cc:	d001      	beq.n	80014d2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80014ce:	2000      	movs	r0, #0
}
 80014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d2:	0032      	movs	r2, r6
 80014d4:	0029      	movs	r1, r5
 80014d6:	0020      	movs	r0, r4
 80014d8:	f7ff ff62 	bl	80013a0 <I2C_IsAcknowledgeFailed>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d115      	bne.n	800150c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80014e0:	1c6b      	adds	r3, r5, #1
 80014e2:	d0f0      	beq.n	80014c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e4:	f7ff fcfe 	bl	8000ee4 <HAL_GetTick>
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	d801      	bhi.n	80014f2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d1e9      	bne.n	80014c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f2:	2220      	movs	r2, #32
 80014f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f6:	4313      	orrs	r3, r2
 80014f8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	0023      	movs	r3, r4
 80014fc:	3341      	adds	r3, #65	; 0x41
 80014fe:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001500:	0022      	movs	r2, r4
 8001502:	2300      	movs	r3, #0
 8001504:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001506:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800150a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
 800150e:	e7df      	b.n	80014d0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001510 <I2C_RequestMemoryWrite>:
{
 8001510:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001512:	0014      	movs	r4, r2
 8001514:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <I2C_RequestMemoryWrite+0x60>)
{
 800151a:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	045b      	lsls	r3, r3, #17
 8001522:	f7ff ff29 	bl	8001378 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001526:	9a07      	ldr	r2, [sp, #28]
 8001528:	9906      	ldr	r1, [sp, #24]
 800152a:	0028      	movs	r0, r5
 800152c:	f7ff ffc6 	bl	80014bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001530:	2800      	cmp	r0, #0
 8001532:	d001      	beq.n	8001538 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8001534:	2001      	movs	r0, #1
}
 8001536:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001538:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800153a:	2e01      	cmp	r6, #1
 800153c:	d10d      	bne.n	800155a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800153e:	b2e4      	uxtb	r4, r4
 8001540:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001542:	9b07      	ldr	r3, [sp, #28]
 8001544:	2200      	movs	r2, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	9b06      	ldr	r3, [sp, #24]
 800154c:	0028      	movs	r0, r5
 800154e:	f7ff ff8d 	bl	800146c <I2C_WaitOnFlagUntilTimeout>
 8001552:	1e43      	subs	r3, r0, #1
 8001554:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001556:	b2c0      	uxtb	r0, r0
 8001558:	e7ed      	b.n	8001536 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800155a:	0a22      	lsrs	r2, r4, #8
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155e:	9906      	ldr	r1, [sp, #24]
 8001560:	9a07      	ldr	r2, [sp, #28]
 8001562:	0028      	movs	r0, r5
 8001564:	f7ff ffaa 	bl	80014bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001568:	2800      	cmp	r0, #0
 800156a:	d1e3      	bne.n	8001534 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	e7e6      	b.n	800153e <I2C_RequestMemoryWrite+0x2e>
 8001570:	80002000 	.word	0x80002000

08001574 <HAL_I2C_Init>:
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800157a:	2c00      	cmp	r4, #0
 800157c:	d03f      	beq.n	80015fe <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800157e:	0025      	movs	r5, r4
 8001580:	3541      	adds	r5, #65	; 0x41
 8001582:	782b      	ldrb	r3, [r5, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	0022      	movs	r2, r4
 800158c:	3240      	adds	r2, #64	; 0x40
 800158e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001590:	0020      	movs	r0, r4
 8001592:	f7fe fff1 	bl	8000578 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001596:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001598:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800159a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800159c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68a6      	ldr	r6, [r4, #8]
 80015a4:	438a      	bics	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015a8:	6861      	ldr	r1, [r4, #4]
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_I2C_Init+0xa0>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_I2C_Init+0xa4>)
 80015b4:	4011      	ands	r1, r2
 80015b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b8:	2801      	cmp	r0, #1
 80015ba:	d121      	bne.n	8001600 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0209      	lsls	r1, r1, #8
 80015c0:	4331      	orrs	r1, r6
 80015c2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015c4:	6858      	ldr	r0, [r3, #4]
 80015c6:	4915      	ldr	r1, [pc, #84]	; (800161c <HAL_I2C_Init+0xa8>)
 80015c8:	4301      	orrs	r1, r0
 80015ca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015cc:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ce:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d0:	400a      	ands	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015d4:	6961      	ldr	r1, [r4, #20]
 80015d6:	6922      	ldr	r2, [r4, #16]
 80015d8:	430a      	orrs	r2, r1
 80015da:	69a1      	ldr	r1, [r4, #24]
 80015dc:	0209      	lsls	r1, r1, #8
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e2:	6a21      	ldr	r1, [r4, #32]
 80015e4:	69e2      	ldr	r2, [r4, #28]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80015ea:	2201      	movs	r2, #1
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	3442      	adds	r4, #66	; 0x42
 80015fc:	7020      	strb	r0, [r4, #0]
}
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001600:	2184      	movs	r1, #132	; 0x84
 8001602:	0209      	lsls	r1, r1, #8
 8001604:	4331      	orrs	r1, r6
 8001606:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001608:	2802      	cmp	r0, #2
 800160a:	d1db      	bne.n	80015c4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0109      	lsls	r1, r1, #4
 8001610:	6059      	str	r1, [r3, #4]
 8001612:	e7d7      	b.n	80015c4 <HAL_I2C_Init+0x50>
 8001614:	f0ffffff 	.word	0xf0ffffff
 8001618:	ffff7fff 	.word	0xffff7fff
 800161c:	02008000 	.word	0x02008000

08001620 <HAL_I2C_Mem_Write>:
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001622:	0007      	movs	r7, r0
{
 8001624:	b089      	sub	sp, #36	; 0x24
 8001626:	9307      	str	r3, [sp, #28]
 8001628:	ab0e      	add	r3, sp, #56	; 0x38
 800162a:	9206      	str	r2, [sp, #24]
 800162c:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	3741      	adds	r7, #65	; 0x41
{
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	9204      	str	r2, [sp, #16]
 8001634:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001636:	783b      	ldrb	r3, [r7, #0]
{
 8001638:	0004      	movs	r4, r0
 800163a:	000d      	movs	r5, r1
    return HAL_BUSY;
 800163c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800163e:	2b20      	cmp	r3, #32
 8001640:	d108      	bne.n	8001654 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8001642:	2a00      	cmp	r2, #0
 8001644:	d002      	beq.n	800164c <HAL_I2C_Mem_Write+0x2c>
 8001646:	9b05      	ldr	r3, [sp, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
}
 8001654:	b009      	add	sp, #36	; 0x24
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001658:	0023      	movs	r3, r4
 800165a:	3340      	adds	r3, #64	; 0x40
 800165c:	9303      	str	r3, [sp, #12]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d0f7      	beq.n	8001654 <HAL_I2C_Mem_Write+0x34>
 8001664:	2201      	movs	r2, #1
 8001666:	9b03      	ldr	r3, [sp, #12]
 8001668:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800166a:	f7ff fc3b 	bl	8000ee4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800166e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001670:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001672:	9000      	str	r0, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	0209      	lsls	r1, r1, #8
 800167a:	0020      	movs	r0, r4
 800167c:	f7ff fef6 	bl	800146c <I2C_WaitOnFlagUntilTimeout>
 8001680:	1e06      	subs	r6, r0, #0
 8001682:	d1e6      	bne.n	8001652 <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001684:	2321      	movs	r3, #33	; 0x21
 8001686:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001688:	0027      	movs	r7, r4
 800168a:	331f      	adds	r3, #31
 800168c:	3742      	adds	r7, #66	; 0x42
 800168e:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8001690:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001692:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001694:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001696:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8001698:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800169a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800169c:	9b02      	ldr	r3, [sp, #8]
 800169e:	9a06      	ldr	r2, [sp, #24]
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80016a4:	0029      	movs	r1, r5
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	0020      	movs	r0, r4
 80016aa:	9b07      	ldr	r3, [sp, #28]
 80016ac:	f7ff ff30 	bl	8001510 <I2C_RequestMemoryWrite>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d002      	beq.n	80016ba <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 80016b4:	9b03      	ldr	r3, [sp, #12]
 80016b6:	701e      	strb	r6, [r3, #0]
 80016b8:	e7cb      	b.n	8001652 <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d953      	bls.n	8001768 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016c2:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016c6:	045b      	lsls	r3, r3, #17
 80016c8:	9000      	str	r0, [sp, #0]
 80016ca:	0029      	movs	r1, r5
 80016cc:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ce:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016d0:	f7ff fe52 	bl	8001378 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016d4:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d6:	9a02      	ldr	r2, [sp, #8]
 80016d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80016da:	0020      	movs	r0, r4
 80016dc:	f7ff feee 	bl	80014bc <I2C_WaitOnTXISFlagUntilTimeout>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1b6      	bne.n	8001652 <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80016ea:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ec:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80016ee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016fa:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016fe:	b292      	uxth	r2, r2
 8001700:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001702:	2b00      	cmp	r3, #0
 8001704:	d017      	beq.n	8001736 <HAL_I2C_Mem_Write+0x116>
 8001706:	2a00      	cmp	r2, #0
 8001708:	d115      	bne.n	8001736 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800170a:	9b02      	ldr	r3, [sp, #8]
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	0020      	movs	r0, r4
 8001712:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001714:	f7ff feaa 	bl	800146c <I2C_WaitOnFlagUntilTimeout>
 8001718:	2800      	cmp	r0, #0
 800171a:	d19a      	bne.n	8001652 <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d92a      	bls.n	8001778 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001722:	23ff      	movs	r3, #255	; 0xff
 8001724:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	22ff      	movs	r2, #255	; 0xff
 800172a:	9000      	str	r0, [sp, #0]
 800172c:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800172e:	0029      	movs	r1, r5
 8001730:	0020      	movs	r0, r4
 8001732:	f7ff fe21 	bl	8001378 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001736:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1cc      	bne.n	80016d6 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173c:	9a02      	ldr	r2, [sp, #8]
 800173e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001740:	0020      	movs	r0, r4
 8001742:	f7ff fe6b 	bl	800141c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001746:	2800      	cmp	r0, #0
 8001748:	d000      	beq.n	800174c <HAL_I2C_Mem_Write+0x12c>
 800174a:	e782      	b.n	8001652 <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800174c:	2120      	movs	r1, #32
 800174e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001750:	4d0d      	ldr	r5, [pc, #52]	; (8001788 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001752:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	402a      	ands	r2, r5
 8001758:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800175c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800175e:	3341      	adds	r3, #65	; 0x41
 8001760:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001762:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8001764:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001766:	e775      	b.n	8001654 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001768:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800176a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800176c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800176e:	b292      	uxth	r2, r2
 8001770:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	9000      	str	r0, [sp, #0]
 8001776:	e7a8      	b.n	80016ca <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001778:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800177a:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800177c:	b292      	uxth	r2, r2
 800177e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9000      	str	r0, [sp, #0]
 8001784:	e7d3      	b.n	800172e <HAL_I2C_Mem_Write+0x10e>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	fe00e800 	.word	0xfe00e800

0800178c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178e:	0004      	movs	r4, r0
 8001790:	3441      	adds	r4, #65	; 0x41
 8001792:	7822      	ldrb	r2, [r4, #0]
{
 8001794:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001796:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001798:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	2a20      	cmp	r2, #32
 800179c:	d118      	bne.n	80017d0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800179e:	001d      	movs	r5, r3
 80017a0:	3540      	adds	r5, #64	; 0x40
 80017a2:	782e      	ldrb	r6, [r5, #0]
 80017a4:	2e01      	cmp	r6, #1
 80017a6:	d013      	beq.n	80017d0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80017a8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80017aa:	3022      	adds	r0, #34	; 0x22
 80017ac:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80017ae:	681e      	ldr	r6, [r3, #0]
 80017b0:	3823      	subs	r0, #35	; 0x23
 80017b2:	4386      	bics	r6, r0
 80017b4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017b6:	681e      	ldr	r6, [r3, #0]
 80017b8:	4f06      	ldr	r7, [pc, #24]	; (80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80017ba:	403e      	ands	r6, r7
 80017bc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80017be:	681e      	ldr	r6, [r3, #0]
 80017c0:	4331      	orrs	r1, r6
 80017c2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	4308      	orrs	r0, r1
 80017c8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80017ca:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80017ce:	7028      	strb	r0, [r5, #0]
  }
}
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	ffffefff 	.word	0xffffefff

080017d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017da:	0005      	movs	r5, r0
 80017dc:	3541      	adds	r5, #65	; 0x41
 80017de:	782a      	ldrb	r2, [r5, #0]
{
 80017e0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80017e4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	2a20      	cmp	r2, #32
 80017e8:	d117      	bne.n	800181a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80017ea:	001c      	movs	r4, r3
 80017ec:	3440      	adds	r4, #64	; 0x40
 80017ee:	7826      	ldrb	r6, [r4, #0]
 80017f0:	2e01      	cmp	r6, #1
 80017f2:	d012      	beq.n	800181a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80017f4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f6:	3022      	adds	r0, #34	; 0x22
 80017f8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80017fa:	681e      	ldr	r6, [r3, #0]
 80017fc:	3823      	subs	r0, #35	; 0x23
 80017fe:	4386      	bics	r6, r0
 8001800:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001802:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001804:	4f05      	ldr	r7, [pc, #20]	; (800181c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001806:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001808:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800180a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800180c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	4308      	orrs	r0, r1
 8001812:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001814:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001816:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001818:	7020      	strb	r0, [r4, #0]
  }
}
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	fffff0ff 	.word	0xfffff0ff

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	0004      	movs	r4, r0
 8001824:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001826:	2800      	cmp	r0, #0
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800182c:	b005      	add	sp, #20
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	07db      	lsls	r3, r3, #31
 8001834:	d42e      	bmi.n	8001894 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	079b      	lsls	r3, r3, #30
 800183a:	d47e      	bmi.n	800193a <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	071b      	lsls	r3, r3, #28
 8001840:	d500      	bpl.n	8001844 <HAL_RCC_OscConfig+0x24>
 8001842:	e0ba      	b.n	80019ba <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	075b      	lsls	r3, r3, #29
 8001848:	d500      	bpl.n	800184c <HAL_RCC_OscConfig+0x2c>
 800184a:	e0dd      	b.n	8001a08 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	06db      	lsls	r3, r3, #27
 8001850:	d51a      	bpl.n	8001888 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001852:	6962      	ldr	r2, [r4, #20]
 8001854:	4db4      	ldr	r5, [pc, #720]	; (8001b28 <HAL_RCC_OscConfig+0x308>)
 8001856:	2304      	movs	r3, #4
 8001858:	2a01      	cmp	r2, #1
 800185a:	d000      	beq.n	800185e <HAL_RCC_OscConfig+0x3e>
 800185c:	e149      	b.n	8001af2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800185e:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001860:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001862:	430b      	orrs	r3, r1
 8001864:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001866:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001868:	431a      	orrs	r2, r3
 800186a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800186c:	f7ff fb3a 	bl	8000ee4 <HAL_GetTick>
 8001870:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001872:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001874:	4233      	tst	r3, r6
 8001876:	d100      	bne.n	800187a <HAL_RCC_OscConfig+0x5a>
 8001878:	e134      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800187a:	21f8      	movs	r1, #248	; 0xf8
 800187c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800187e:	69a3      	ldr	r3, [r4, #24]
 8001880:	438a      	bics	r2, r1
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4313      	orrs	r3, r2
 8001886:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001888:	6a23      	ldr	r3, [r4, #32]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d000      	beq.n	8001890 <HAL_RCC_OscConfig+0x70>
 800188e:	e157      	b.n	8001b40 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	e7cb      	b.n	800182c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001894:	210c      	movs	r1, #12
 8001896:	4da4      	ldr	r5, [pc, #656]	; (8001b28 <HAL_RCC_OscConfig+0x308>)
 8001898:	686a      	ldr	r2, [r5, #4]
 800189a:	400a      	ands	r2, r1
 800189c:	2a04      	cmp	r2, #4
 800189e:	d006      	beq.n	80018ae <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	686b      	ldr	r3, [r5, #4]
 80018a2:	400b      	ands	r3, r1
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d109      	bne.n	80018bc <HAL_RCC_OscConfig+0x9c>
 80018a8:	686b      	ldr	r3, [r5, #4]
 80018aa:	03db      	lsls	r3, r3, #15
 80018ac:	d506      	bpl.n	80018bc <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	039b      	lsls	r3, r3, #14
 80018b2:	d5c0      	bpl.n	8001836 <HAL_RCC_OscConfig+0x16>
 80018b4:	6863      	ldr	r3, [r4, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1bd      	bne.n	8001836 <HAL_RCC_OscConfig+0x16>
 80018ba:	e7b6      	b.n	800182a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d113      	bne.n	80018ea <HAL_RCC_OscConfig+0xca>
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	682a      	ldr	r2, [r5, #0]
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	4313      	orrs	r3, r2
 80018ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb0a 	bl	8000ee4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80018d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d4:	02b6      	lsls	r6, r6, #10
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	4233      	tst	r3, r6
 80018da:	d1ac      	bne.n	8001836 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fb02 	bl	8000ee4 <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	2864      	cmp	r0, #100	; 0x64
 80018e4:	d9f7      	bls.n	80018d6 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e7a0      	b.n	800182c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_RCC_OscConfig+0xfa>
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	4a8e      	ldr	r2, [pc, #568]	; (8001b2c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	4013      	ands	r3, r2
 80018f6:	602b      	str	r3, [r5, #0]
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	4a8d      	ldr	r2, [pc, #564]	; (8001b30 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fc:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	4013      	ands	r3, r2
 8001900:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001902:	f7ff faef 	bl	8000ee4 <HAL_GetTick>
 8001906:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	4233      	tst	r3, r6
 800190c:	d093      	beq.n	8001836 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fae9 	bl	8000ee4 <HAL_GetTick>
 8001912:	1bc0      	subs	r0, r0, r7
 8001914:	2864      	cmp	r0, #100	; 0x64
 8001916:	d9f7      	bls.n	8001908 <HAL_RCC_OscConfig+0xe8>
 8001918:	e7e5      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	2b05      	cmp	r3, #5
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x10a>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	682a      	ldr	r2, [r5, #0]
 8001922:	02db      	lsls	r3, r3, #11
 8001924:	4313      	orrs	r3, r2
 8001926:	602b      	str	r3, [r5, #0]
 8001928:	e7cb      	b.n	80018c2 <HAL_RCC_OscConfig+0xa2>
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	4a7f      	ldr	r2, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x30c>)
 800192e:	4013      	ands	r3, r2
 8001930:	602b      	str	r3, [r5, #0]
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	4a7e      	ldr	r2, [pc, #504]	; (8001b30 <HAL_RCC_OscConfig+0x310>)
 8001936:	4013      	ands	r3, r2
 8001938:	e7c7      	b.n	80018ca <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800193a:	220c      	movs	r2, #12
 800193c:	4d7a      	ldr	r5, [pc, #488]	; (8001b28 <HAL_RCC_OscConfig+0x308>)
 800193e:	686b      	ldr	r3, [r5, #4]
 8001940:	4213      	tst	r3, r2
 8001942:	d006      	beq.n	8001952 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001944:	686b      	ldr	r3, [r5, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	2b08      	cmp	r3, #8
 800194a:	d111      	bne.n	8001970 <HAL_RCC_OscConfig+0x150>
 800194c:	686b      	ldr	r3, [r5, #4]
 800194e:	03db      	lsls	r3, r3, #15
 8001950:	d40e      	bmi.n	8001970 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	682b      	ldr	r3, [r5, #0]
 8001954:	079b      	lsls	r3, r3, #30
 8001956:	d503      	bpl.n	8001960 <HAL_RCC_OscConfig+0x140>
 8001958:	68e3      	ldr	r3, [r4, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d000      	beq.n	8001960 <HAL_RCC_OscConfig+0x140>
 800195e:	e764      	b.n	800182a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	21f8      	movs	r1, #248	; 0xf8
 8001962:	682a      	ldr	r2, [r5, #0]
 8001964:	6923      	ldr	r3, [r4, #16]
 8001966:	438a      	bics	r2, r1
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4313      	orrs	r3, r2
 800196c:	602b      	str	r3, [r5, #0]
 800196e:	e765      	b.n	800183c <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001970:	68e2      	ldr	r2, [r4, #12]
 8001972:	2301      	movs	r3, #1
 8001974:	2a00      	cmp	r2, #0
 8001976:	d00f      	beq.n	8001998 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001978:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800197c:	4313      	orrs	r3, r2
 800197e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001980:	f7ff fab0 	bl	8000ee4 <HAL_GetTick>
 8001984:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	4233      	tst	r3, r6
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff faaa 	bl	8000ee4 <HAL_GetTick>
 8001990:	1bc0      	subs	r0, r0, r7
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f7      	bls.n	8001986 <HAL_RCC_OscConfig+0x166>
 8001996:	e7a6      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8001998:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800199c:	439a      	bics	r2, r3
 800199e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80019a0:	f7ff faa0 	bl	8000ee4 <HAL_GetTick>
 80019a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	4233      	tst	r3, r6
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x18e>
 80019ac:	e746      	b.n	800183c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fa99 	bl	8000ee4 <HAL_GetTick>
 80019b2:	1bc0      	subs	r0, r0, r7
 80019b4:	2802      	cmp	r0, #2
 80019b6:	d9f6      	bls.n	80019a6 <HAL_RCC_OscConfig+0x186>
 80019b8:	e795      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ba:	69e2      	ldr	r2, [r4, #28]
 80019bc:	2301      	movs	r3, #1
 80019be:	4d5a      	ldr	r5, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x308>)
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80019c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80019c8:	4313      	orrs	r3, r2
 80019ca:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa8a 	bl	8000ee4 <HAL_GetTick>
 80019d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019d4:	4233      	tst	r3, r6
 80019d6:	d000      	beq.n	80019da <HAL_RCC_OscConfig+0x1ba>
 80019d8:	e734      	b.n	8001844 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fa83 	bl	8000ee4 <HAL_GetTick>
 80019de:	1bc0      	subs	r0, r0, r7
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1b2>
 80019e4:	e77f      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 80019e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80019ea:	439a      	bics	r2, r3
 80019ec:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa79 	bl	8000ee4 <HAL_GetTick>
 80019f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019f6:	4233      	tst	r3, r6
 80019f8:	d100      	bne.n	80019fc <HAL_RCC_OscConfig+0x1dc>
 80019fa:	e723      	b.n	8001844 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa72 	bl	8000ee4 <HAL_GetTick>
 8001a00:	1bc0      	subs	r0, r0, r7
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d9f6      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1d4>
 8001a06:	e76e      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a08:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0c:	4d46      	ldr	r5, [pc, #280]	; (8001b28 <HAL_RCC_OscConfig+0x308>)
 8001a0e:	0552      	lsls	r2, r2, #21
 8001a10:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a14:	4213      	tst	r3, r2
 8001a16:	d108      	bne.n	8001a2a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	69eb      	ldr	r3, [r5, #28]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61eb      	str	r3, [r5, #28]
 8001a1e:	69eb      	ldr	r3, [r5, #28]
 8001a20:	4013      	ands	r3, r2
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	2780      	movs	r7, #128	; 0x80
 8001a2c:	4e41      	ldr	r6, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x314>)
 8001a2e:	007f      	lsls	r7, r7, #1
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	423b      	tst	r3, r7
 8001a34:	d006      	beq.n	8001a44 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	68a3      	ldr	r3, [r4, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d113      	bne.n	8001a64 <HAL_RCC_OscConfig+0x244>
 8001a3c:	6a2a      	ldr	r2, [r5, #32]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	622b      	str	r3, [r5, #32]
 8001a42:	e030      	b.n	8001aa6 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a44:	6833      	ldr	r3, [r6, #0]
 8001a46:	433b      	orrs	r3, r7
 8001a48:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa4b 	bl	8000ee4 <HAL_GetTick>
 8001a4e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	6833      	ldr	r3, [r6, #0]
 8001a52:	423b      	tst	r3, r7
 8001a54:	d1ef      	bne.n	8001a36 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fa45 	bl	8000ee4 <HAL_GetTick>
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	2864      	cmp	r0, #100	; 0x64
 8001a60:	d9f6      	bls.n	8001a50 <HAL_RCC_OscConfig+0x230>
 8001a62:	e740      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
 8001a64:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d114      	bne.n	8001a94 <HAL_RCC_OscConfig+0x274>
 8001a6a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	4393      	bics	r3, r2
 8001a70:	622b      	str	r3, [r5, #32]
 8001a72:	6a2b      	ldr	r3, [r5, #32]
 8001a74:	3203      	adds	r2, #3
 8001a76:	4393      	bics	r3, r2
 8001a78:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fa33 	bl	8000ee4 <HAL_GetTick>
 8001a7e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	6a2b      	ldr	r3, [r5, #32]
 8001a82:	423b      	tst	r3, r7
 8001a84:	d025      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fa2d 	bl	8000ee4 <HAL_GetTick>
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x318>)
 8001a8c:	1b80      	subs	r0, r0, r6
 8001a8e:	4298      	cmp	r0, r3
 8001a90:	d9f6      	bls.n	8001a80 <HAL_RCC_OscConfig+0x260>
 8001a92:	e728      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x290>
 8001a98:	6a29      	ldr	r1, [r5, #32]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	622b      	str	r3, [r5, #32]
 8001aa0:	6a2b      	ldr	r3, [r5, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fa1d 	bl	8000ee4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001aac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	e00d      	b.n	8001acc <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	6a2b      	ldr	r3, [r5, #32]
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	622b      	str	r3, [r5, #32]
 8001ab8:	6a2b      	ldr	r3, [r5, #32]
 8001aba:	4393      	bics	r3, r2
 8001abc:	e7c0      	b.n	8001a40 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fa11 	bl	8000ee4 <HAL_GetTick>
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x318>)
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	d900      	bls.n	8001acc <HAL_RCC_OscConfig+0x2ac>
 8001aca:	e70c      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	6a2b      	ldr	r3, [r5, #32]
 8001ace:	423b      	tst	r3, r7
 8001ad0:	d0f5      	beq.n	8001abe <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8001ad2:	9b00      	ldr	r3, [sp, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d000      	beq.n	8001ada <HAL_RCC_OscConfig+0x2ba>
 8001ad8:	e6b8      	b.n	800184c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	69eb      	ldr	r3, [r5, #28]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x31c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61eb      	str	r3, [r5, #28]
 8001ae2:	e6b3      	b.n	800184c <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ae4:	f7ff f9fe 	bl	8000ee4 <HAL_GetTick>
 8001ae8:	1bc0      	subs	r0, r0, r7
 8001aea:	2802      	cmp	r0, #2
 8001aec:	d800      	bhi.n	8001af0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e6c0      	b.n	8001872 <HAL_RCC_OscConfig+0x52>
 8001af0:	e6f9      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001af2:	3205      	adds	r2, #5
 8001af4:	d103      	bne.n	8001afe <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001af6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001af8:	439a      	bics	r2, r3
 8001afa:	636a      	str	r2, [r5, #52]	; 0x34
 8001afc:	e6bd      	b.n	800187a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001afe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b00:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b02:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001b04:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b06:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001b08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9e9 	bl	8000ee4 <HAL_GetTick>
 8001b12:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b16:	4233      	tst	r3, r6
 8001b18:	d100      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2fc>
 8001b1a:	e6b5      	b.n	8001888 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b1c:	f7ff f9e2 	bl	8000ee4 <HAL_GetTick>
 8001b20:	1bc0      	subs	r0, r0, r7
 8001b22:	2802      	cmp	r0, #2
 8001b24:	d9f6      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2f4>
 8001b26:	e6de      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	fffeffff 	.word	0xfffeffff
 8001b30:	fffbffff 	.word	0xfffbffff
 8001b34:	40007000 	.word	0x40007000
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b40:	200c      	movs	r0, #12
 8001b42:	4a35      	ldr	r2, [pc, #212]	; (8001c18 <HAL_RCC_OscConfig+0x3f8>)
 8001b44:	6851      	ldr	r1, [r2, #4]
 8001b46:	0015      	movs	r5, r2
 8001b48:	4001      	ands	r1, r0
 8001b4a:	2908      	cmp	r1, #8
 8001b4c:	d047      	beq.n	8001bde <HAL_RCC_OscConfig+0x3be>
 8001b4e:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d132      	bne.n	8001bba <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8001b54:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4013      	ands	r3, r2
 8001b5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f9c2 	bl	8000ee4 <HAL_GetTick>
 8001b60:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	04b6      	lsls	r6, r6, #18
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	4233      	tst	r3, r6
 8001b68:	d121      	bne.n	8001bae <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001b6e:	4393      	bics	r3, r2
 8001b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b7a:	686a      	ldr	r2, [r5, #4]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	4928      	ldr	r1, [pc, #160]	; (8001c20 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b82:	400a      	ands	r2, r1
 8001b84:	4313      	orrs	r3, r2
 8001b86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	682a      	ldr	r2, [r5, #0]
 8001b8c:	045b      	lsls	r3, r3, #17
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b92:	f7ff f9a7 	bl	8000ee4 <HAL_GetTick>
 8001b96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	04a4      	lsls	r4, r4, #18
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	4223      	tst	r3, r4
 8001b9e:	d000      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x382>
 8001ba0:	e676      	b.n	8001890 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f99f 	bl	8000ee4 <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	d9f6      	bls.n	8001b9a <HAL_RCC_OscConfig+0x37a>
 8001bac:	e69b      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff f999 	bl	8000ee4 <HAL_GetTick>
 8001bb2:	1bc0      	subs	r0, r0, r7
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d9d5      	bls.n	8001b64 <HAL_RCC_OscConfig+0x344>
 8001bb8:	e695      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001bba:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f98f 	bl	8000ee4 <HAL_GetTick>
 8001bc6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	04a4      	lsls	r4, r4, #18
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	4223      	tst	r3, r4
 8001bce:	d100      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3b2>
 8001bd0:	e65e      	b.n	8001890 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f987 	bl	8000ee4 <HAL_GetTick>
 8001bd6:	1b80      	subs	r0, r0, r6
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9f6      	bls.n	8001bca <HAL_RCC_OscConfig+0x3aa>
 8001bdc:	e683      	b.n	80018e6 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8001bde:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3c6>
 8001be4:	e622      	b.n	800182c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001be8:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001bec:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001bee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	4019      	ands	r1, r3
        return HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	42a9      	cmp	r1, r5
 8001bf6:	d000      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3da>
 8001bf8:	e618      	b.n	800182c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c00:	428a      	cmp	r2, r1
 8001c02:	d000      	beq.n	8001c06 <HAL_RCC_OscConfig+0x3e6>
 8001c04:	e612      	b.n	800182c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c06:	20f0      	movs	r0, #240	; 0xf0
 8001c08:	0380      	lsls	r0, r0, #14
 8001c0a:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c0e:	1a1b      	subs	r3, r3, r0
 8001c10:	1e58      	subs	r0, r3, #1
 8001c12:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8001c14:	b2d8      	uxtb	r0, r3
 8001c16:	e609      	b.n	800182c <HAL_RCC_OscConfig+0xc>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	feffffff 	.word	0xfeffffff
 8001c20:	ffc2ffff 	.word	0xffc2ffff

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c26:	4c14      	ldr	r4, [pc, #80]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001c28:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	0021      	movs	r1, r4
 8001c2e:	4668      	mov	r0, sp
 8001c30:	f000 f972 	bl	8001f18 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c34:	0021      	movs	r1, r4
 8001c36:	ad04      	add	r5, sp, #16
 8001c38:	2210      	movs	r2, #16
 8001c3a:	3110      	adds	r1, #16
 8001c3c:	0028      	movs	r0, r5
 8001c3e:	f000 f96b 	bl	8001f18 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c42:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001c44:	4e0d      	ldr	r6, [pc, #52]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x58>)
 8001c46:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c48:	401a      	ands	r2, r3
 8001c4a:	2a08      	cmp	r2, #8
 8001c4c:	d111      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c4e:	200f      	movs	r0, #15
 8001c50:	466a      	mov	r2, sp
 8001c52:	0c99      	lsrs	r1, r3, #18
 8001c54:	4001      	ands	r1, r0
 8001c56:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c58:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001c5a:	4002      	ands	r2, r0
 8001c5c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c5e:	03db      	lsls	r3, r3, #15
 8001c60:	d505      	bpl.n	8001c6e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001c64:	f7fe fa5a 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c68:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c6a:	b008      	add	sp, #32
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x60>)
 8001c70:	e7fa      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001c72:	4803      	ldr	r0, [pc, #12]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001c74:	e7f9      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	08001fb8 	.word	0x08001fb8
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	007a1200 	.word	0x007a1200
 8001c84:	003d0900 	.word	0x003d0900

08001c88 <HAL_RCC_ClockConfig>:
{
 8001c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c8a:	0005      	movs	r5, r0
 8001c8c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001c92:	2001      	movs	r0, #1
}
 8001c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c96:	2201      	movs	r2, #1
 8001c98:	4c37      	ldr	r4, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0xf0>)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d31c      	bcc.n	8001cdc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca2:	6829      	ldr	r1, [r5, #0]
 8001ca4:	078b      	lsls	r3, r1, #30
 8001ca6:	d422      	bmi.n	8001cee <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca8:	07cb      	lsls	r3, r1, #31
 8001caa:	d42f      	bmi.n	8001d0c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	2301      	movs	r3, #1
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	42ba      	cmp	r2, r7
 8001cb4:	d851      	bhi.n	8001d5a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	4c30      	ldr	r4, [pc, #192]	; (8001d7c <HAL_RCC_ClockConfig+0xf4>)
 8001cba:	075b      	lsls	r3, r3, #29
 8001cbc:	d454      	bmi.n	8001d68 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cbe:	f7ff ffb1 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <HAL_RCC_ClockConfig+0xf8>)
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	0f1b      	lsrs	r3, r3, #28
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	40d8      	lsrs	r0, r3
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_ClockConfig+0xfc>)
 8001cd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff f8c6 	bl	8000e64 <HAL_InitTick>
  return HAL_OK;
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7db      	b.n	8001c94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	4393      	bics	r3, r2
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	d1d2      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xa>
 8001cec:	e7d9      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1a>
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	074b      	lsls	r3, r1, #29
 8001cf2:	d504      	bpl.n	8001cfe <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cf4:	23e0      	movs	r3, #224	; 0xe0
 8001cf6:	6850      	ldr	r0, [r2, #4]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfe:	20f0      	movs	r0, #240	; 0xf0
 8001d00:	6853      	ldr	r3, [r2, #4]
 8001d02:	4383      	bics	r3, r0
 8001d04:	68a8      	ldr	r0, [r5, #8]
 8001d06:	4303      	orrs	r3, r0
 8001d08:	6053      	str	r3, [r2, #4]
 8001d0a:	e7cd      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x20>
 8001d0c:	4e1b      	ldr	r6, [pc, #108]	; (8001d7c <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	2a01      	cmp	r2, #1
 8001d14:	d119      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	039b      	lsls	r3, r3, #14
 8001d18:	d5bb      	bpl.n	8001c92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	6873      	ldr	r3, [r6, #4]
 8001d1e:	438b      	bics	r3, r1
 8001d20:	4313      	orrs	r3, r2
 8001d22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d24:	f7ff f8de 	bl	8000ee4 <HAL_GetTick>
 8001d28:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	6872      	ldr	r2, [r6, #4]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	686b      	ldr	r3, [r5, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d0b9      	beq.n	8001cac <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f8d4 	bl	8000ee4 <HAL_GetTick>
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	1ac0      	subs	r0, r0, r3
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_ClockConfig+0x100>)
 8001d42:	4298      	cmp	r0, r3
 8001d44:	d9f1      	bls.n	8001d2a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001d46:	2003      	movs	r0, #3
 8001d48:	e7a4      	b.n	8001c94 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	2a02      	cmp	r2, #2
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	019b      	lsls	r3, r3, #6
 8001d50:	d4e3      	bmi.n	8001d1a <HAL_RCC_ClockConfig+0x92>
 8001d52:	e79e      	b.n	8001c92 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	079b      	lsls	r3, r3, #30
 8001d56:	d4e0      	bmi.n	8001d1a <HAL_RCC_ClockConfig+0x92>
 8001d58:	e79b      	b.n	8001c92 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	439a      	bics	r2, r3
 8001d5e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	421a      	tst	r2, r3
 8001d64:	d0a7      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x2e>
 8001d66:	e794      	b.n	8001c92 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	6863      	ldr	r3, [r4, #4]
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_RCC_ClockConfig+0x104>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ea      	ldr	r2, [r5, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	6063      	str	r3, [r4, #4]
 8001d74:	e7a3      	b.n	8001cbe <HAL_RCC_ClockConfig+0x36>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08002dbc 	.word	0x08002dbc
 8001d84:	20000008 	.word	0x20000008
 8001d88:	00001388 	.word	0x00001388
 8001d8c:	fffff8ff 	.word	0xfffff8ff

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d92:	6803      	ldr	r3, [r0, #0]
{
 8001d94:	b085      	sub	sp, #20
 8001d96:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d98:	03db      	lsls	r3, r3, #15
 8001d9a:	d528      	bpl.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	4c37      	ldr	r4, [pc, #220]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001da2:	0552      	lsls	r2, r2, #21
 8001da4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da8:	4213      	tst	r3, r2
 8001daa:	d108      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61e3      	str	r3, [r4, #28]
 8001db2:	69e3      	ldr	r3, [r4, #28]
 8001db4:	4013      	ands	r3, r2
 8001db6:	9303      	str	r3, [sp, #12]
 8001db8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	2780      	movs	r7, #128	; 0x80
 8001dc0:	4e30      	ldr	r6, [pc, #192]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001dc2:	007f      	lsls	r7, r7, #1
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	423b      	tst	r3, r7
 8001dc8:	d026      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dca:	22c0      	movs	r2, #192	; 0xc0
 8001dcc:	6a23      	ldr	r3, [r4, #32]
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	4e2d      	ldr	r6, [pc, #180]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd4:	d132      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd6:	6a23      	ldr	r3, [r4, #32]
 8001dd8:	401e      	ands	r6, r3
 8001dda:	686b      	ldr	r3, [r5, #4]
 8001ddc:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dde:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de0:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d103      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	69e3      	ldr	r3, [r4, #28]
 8001de8:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dee:	682a      	ldr	r2, [r5, #0]
 8001df0:	07d3      	lsls	r3, r2, #31
 8001df2:	d506      	bpl.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df4:	2003      	movs	r0, #3
 8001df6:	4922      	ldr	r1, [pc, #136]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001df8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001dfa:	4383      	bics	r3, r0
 8001dfc:	68a8      	ldr	r0, [r5, #8]
 8001dfe:	4303      	orrs	r3, r0
 8001e00:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e04:	0693      	lsls	r3, r2, #26
 8001e06:	d517      	bpl.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e08:	2110      	movs	r1, #16
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001e0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e0e:	438b      	bics	r3, r1
 8001e10:	68e9      	ldr	r1, [r5, #12]
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	e00f      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e18:	6833      	ldr	r3, [r6, #0]
 8001e1a:	433b      	orrs	r3, r7
 8001e1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f861 	bl	8000ee4 <HAL_GetTick>
 8001e22:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	6833      	ldr	r3, [r6, #0]
 8001e26:	423b      	tst	r3, r7
 8001e28:	d1cf      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff f85b 	bl	8000ee4 <HAL_GetTick>
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	1ac0      	subs	r0, r0, r3
 8001e32:	2864      	cmp	r0, #100	; 0x64
 8001e34:	d9f6      	bls.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001e36:	2003      	movs	r0, #3
}
 8001e38:	b005      	add	sp, #20
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e3c:	6869      	ldr	r1, [r5, #4]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d0c8      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e46:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e48:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e4a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4c:	025b      	lsls	r3, r3, #9
 8001e4e:	4303      	orrs	r3, r0
 8001e50:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e52:	6a23      	ldr	r3, [r4, #32]
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e56:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e58:	4003      	ands	r3, r0
 8001e5a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001e5c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e5e:	07d3      	lsls	r3, r2, #31
 8001e60:	d5b9      	bpl.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001e62:	f7ff f83f 	bl	8000ee4 <HAL_GetTick>
 8001e66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	6a23      	ldr	r3, [r4, #32]
 8001e6c:	4213      	tst	r3, r2
 8001e6e:	d1b2      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff f838 	bl	8000ee4 <HAL_GetTick>
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001e76:	1bc0      	subs	r0, r0, r7
 8001e78:	4298      	cmp	r0, r3
 8001e7a:	d9f5      	bls.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001e7c:	e7db      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	fffffcff 	.word	0xfffffcff
 8001e8c:	efffffff 	.word	0xefffffff
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	00001388 	.word	0x00001388

08001e98 <__libc_init_array>:
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	4d0c      	ldr	r5, [pc, #48]	; (8001ed0 <__libc_init_array+0x38>)
 8001e9e:	4c0d      	ldr	r4, [pc, #52]	; (8001ed4 <__libc_init_array+0x3c>)
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	42a6      	cmp	r6, r4
 8001ea6:	d109      	bne.n	8001ebc <__libc_init_array+0x24>
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	f000 f879 	bl	8001fa0 <_init>
 8001eae:	4d0a      	ldr	r5, [pc, #40]	; (8001ed8 <__libc_init_array+0x40>)
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <__libc_init_array+0x44>)
 8001eb2:	1b64      	subs	r4, r4, r5
 8001eb4:	10a4      	asrs	r4, r4, #2
 8001eb6:	42a6      	cmp	r6, r4
 8001eb8:	d105      	bne.n	8001ec6 <__libc_init_array+0x2e>
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	00b3      	lsls	r3, r6, #2
 8001ebe:	58eb      	ldr	r3, [r5, r3]
 8001ec0:	4798      	blx	r3
 8001ec2:	3601      	adds	r6, #1
 8001ec4:	e7ee      	b.n	8001ea4 <__libc_init_array+0xc>
 8001ec6:	00b3      	lsls	r3, r6, #2
 8001ec8:	58eb      	ldr	r3, [r5, r3]
 8001eca:	4798      	blx	r3
 8001ecc:	3601      	adds	r6, #1
 8001ece:	e7f2      	b.n	8001eb6 <__libc_init_array+0x1e>
 8001ed0:	08002df4 	.word	0x08002df4
 8001ed4:	08002df4 	.word	0x08002df4
 8001ed8:	08002df4 	.word	0x08002df4
 8001edc:	08002df8 	.word	0x08002df8

08001ee0 <__itoa>:
 8001ee0:	1e93      	subs	r3, r2, #2
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	000c      	movs	r4, r1
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	d904      	bls.n	8001ef4 <__itoa+0x14>
 8001eea:	2300      	movs	r3, #0
 8001eec:	001c      	movs	r4, r3
 8001eee:	700b      	strb	r3, [r1, #0]
 8001ef0:	0020      	movs	r0, r4
 8001ef2:	bd10      	pop	{r4, pc}
 8001ef4:	2a0a      	cmp	r2, #10
 8001ef6:	d109      	bne.n	8001f0c <__itoa+0x2c>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	da07      	bge.n	8001f0c <__itoa+0x2c>
 8001efc:	232d      	movs	r3, #45	; 0x2d
 8001efe:	700b      	strb	r3, [r1, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	4240      	negs	r0, r0
 8001f04:	1861      	adds	r1, r4, r1
 8001f06:	f000 f819 	bl	8001f3c <__utoa>
 8001f0a:	e7f1      	b.n	8001ef0 <__itoa+0x10>
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	e7f9      	b.n	8001f04 <__itoa+0x24>

08001f10 <itoa>:
 8001f10:	b510      	push	{r4, lr}
 8001f12:	f7ff ffe5 	bl	8001ee0 <__itoa>
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <memcpy>:
 8001f18:	2300      	movs	r3, #0
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d100      	bne.n	8001f22 <memcpy+0xa>
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	5ccc      	ldrb	r4, [r1, r3]
 8001f24:	54c4      	strb	r4, [r0, r3]
 8001f26:	3301      	adds	r3, #1
 8001f28:	e7f8      	b.n	8001f1c <memcpy+0x4>

08001f2a <memset>:
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	1812      	adds	r2, r2, r0
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d100      	bne.n	8001f34 <memset+0xa>
 8001f32:	4770      	bx	lr
 8001f34:	7019      	strb	r1, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	e7f9      	b.n	8001f2e <memset+0x4>
	...

08001f3c <__utoa>:
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	0017      	movs	r7, r2
 8001f40:	b08d      	sub	sp, #52	; 0x34
 8001f42:	2225      	movs	r2, #37	; 0x25
 8001f44:	0006      	movs	r6, r0
 8001f46:	000d      	movs	r5, r1
 8001f48:	a802      	add	r0, sp, #8
 8001f4a:	4914      	ldr	r1, [pc, #80]	; (8001f9c <__utoa+0x60>)
 8001f4c:	f7ff ffe4 	bl	8001f18 <memcpy>
 8001f50:	aa02      	add	r2, sp, #8
 8001f52:	1ebb      	subs	r3, r7, #2
 8001f54:	2400      	movs	r4, #0
 8001f56:	9201      	str	r2, [sp, #4]
 8001f58:	2b22      	cmp	r3, #34	; 0x22
 8001f5a:	d905      	bls.n	8001f68 <__utoa+0x2c>
 8001f5c:	702c      	strb	r4, [r5, #0]
 8001f5e:	0025      	movs	r5, r4
 8001f60:	0028      	movs	r0, r5
 8001f62:	b00d      	add	sp, #52	; 0x34
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	0014      	movs	r4, r2
 8001f68:	0030      	movs	r0, r6
 8001f6a:	0039      	movs	r1, r7
 8001f6c:	f7fe f95c 	bl	8000228 <__aeabi_uidivmod>
 8001f70:	4684      	mov	ip, r0
 8001f72:	9801      	ldr	r0, [sp, #4]
 8001f74:	1c62      	adds	r2, r4, #1
 8001f76:	18ab      	adds	r3, r5, r2
 8001f78:	5c41      	ldrb	r1, [r0, r1]
 8001f7a:	1e5e      	subs	r6, r3, #1
 8001f7c:	7031      	strb	r1, [r6, #0]
 8001f7e:	4666      	mov	r6, ip
 8001f80:	2e00      	cmp	r6, #0
 8001f82:	d1f0      	bne.n	8001f66 <__utoa+0x2a>
 8001f84:	701e      	strb	r6, [r3, #0]
 8001f86:	002b      	movs	r3, r5
 8001f88:	1b5a      	subs	r2, r3, r5
 8001f8a:	4294      	cmp	r4, r2
 8001f8c:	dde8      	ble.n	8001f60 <__utoa+0x24>
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	5d29      	ldrb	r1, [r5, r4]
 8001f92:	7019      	strb	r1, [r3, #0]
 8001f94:	552a      	strb	r2, [r5, r4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	3c01      	subs	r4, #1
 8001f9a:	e7f5      	b.n	8001f88 <__utoa+0x4c>
 8001f9c:	08002dcc 	.word	0x08002dcc

08001fa0 <_init>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr

08001fac <_fini>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr
