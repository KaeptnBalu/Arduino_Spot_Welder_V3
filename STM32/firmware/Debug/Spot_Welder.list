
Spot_Welder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000160c  08002840  08002840  00012840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e4c  08003e4c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003e4c  08003e4c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e4c  08003e4c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000028  08003e7c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08003e7c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3f  00000000  00000000  0002e7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002f17  00000000  00000000  000314e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007c8  00000000  00000000  00034400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a88  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d28f  00000000  00000000  00035650  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a712  00000000  00000000  000428df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00041e88  00000000  00000000  0004cff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008ee79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013a0  00000000  00000000  0008eef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002828 	.word	0x08002828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08002828 	.word	0x08002828

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	a801      	add	r0, sp, #4
 800023c:	f002 fab9 	bl	80027b2 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8000242:	4c16      	ldr	r4, [pc, #88]	; (800029c <MX_ADC_Init+0x68>)
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_ADC_Init+0x6c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000246:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000248:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 800024a:	2208      	movs	r2, #8
  hadc.Instance = ADC1;
 800024c:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000252:	60a2      	str	r2, [r4, #8]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	61e1      	str	r1, [r4, #28]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000256:	3a07      	subs	r2, #7
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000258:	1d61      	adds	r1, r4, #5
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800025a:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025c:	6063      	str	r3, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000262:	7623      	strb	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000264:	7663      	strb	r3, [r4, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000266:	76a2      	strb	r2, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	76e3      	strb	r3, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800026a:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026c:	77cb      	strb	r3, [r1, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000270:	f001 fcec 	bl	8001c4c <HAL_ADC_Init>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8000278:	f000 fa1a 	bl	80006b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027c:	2280      	movs	r2, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 800027e:	2305      	movs	r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000280:	0152      	lsls	r2, r2, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000282:	a901      	add	r1, sp, #4
 8000284:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000286:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000288:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800028a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028c:	f001 fe12 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC_Init+0x64>
  {
    Error_Handler();
 8000294:	f000 fa0c 	bl	80006b0 <Error_Handler>
  }

}
 8000298:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000480 	.word	0x20000480
 80002a0:	40012400 	.word	0x40012400

080002a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	0004      	movs	r4, r0
 80002a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	2214      	movs	r2, #20
 80002ac:	2100      	movs	r1, #0
 80002ae:	a803      	add	r0, sp, #12
 80002b0:	f002 fa7f 	bl	80027b2 <memset>
  if(adcHandle->Instance==ADC1)
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <HAL_ADC_MspInit+0x54>)
 80002b6:	6822      	ldr	r2, [r4, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d11b      	bne.n	80002f4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <HAL_ADC_MspInit+0x58>)
 80002c0:	0080      	lsls	r0, r0, #2
 80002c2:	6999      	ldr	r1, [r3, #24]
 80002c4:	4301      	orrs	r1, r0
 80002c6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ca:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ce:	4002      	ands	r2, r0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	695a      	ldr	r2, [r3, #20]
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002d6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002de:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	400b      	ands	r3, r1
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002e6:	2320      	movs	r3, #32
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	3b1d      	subs	r3, #29
 80002ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f001 fea2 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002f4:	b008      	add	sp, #32
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	40012400 	.word	0x40012400
 80002fc:	40021000 	.word	0x40021000

08000300 <AT24CXX_Write_Byte>:
    {
    //Soft_I2C_Init(Soft_I2C1);
    }

uint8_t AT24CXX_Write_Byte(uint16_t register_address, uint8_t data)
    {
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000302:	4c16      	ldr	r4, [pc, #88]	; (800035c <AT24CXX_Write_Byte+0x5c>)
    {
 8000304:	0006      	movs	r6, r0
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000306:	0020      	movs	r0, r4
    {
 8000308:	000f      	movs	r7, r1
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 800030a:	f001 f82f 	bl	800136c <Soft_I2C_Start>
 800030e:	0005      	movs	r5, r0
 8000310:	2801      	cmp	r0, #1
 8000312:	d104      	bne.n	800031e <AT24CXX_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000314:	0020      	movs	r0, r4
 8000316:	f001 f838 	bl	800138a <Soft_I2C_Stop>
    Soft_I2C_Stop(&AT24C_I2C_Handle);

    //HAL_Delay(AT24CXX_WRITE_DELAY);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */

    return AT24CXX_OK;
    }
 800031a:	0028      	movs	r0, r5
 800031c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, AT24CXX_EEPROM_ADDR + 0) == SOFT_I2C_ERR)/*Send device address + write bit */
 800031e:	21a0      	movs	r1, #160	; 0xa0
 8000320:	0020      	movs	r0, r4
 8000322:	f001 f883 	bl	800142c <Soft_I2C_Send_Byte>
 8000326:	2801      	cmp	r0, #1
 8000328:	d101      	bne.n	800032e <AT24CXX_Write_Byte+0x2e>
	return AT24CXX_ERR;
 800032a:	2501      	movs	r5, #1
 800032c:	e7f5      	b.n	800031a <AT24CXX_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (register_address >> 8)) == SOFT_I2C_ERR)
 800032e:	0a31      	lsrs	r1, r6, #8
 8000330:	0020      	movs	r0, r4
 8000332:	f001 f87b 	bl	800142c <Soft_I2C_Send_Byte>
 8000336:	2801      	cmp	r0, #1
 8000338:	d0f7      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, register_address) == SOFT_I2C_ERR)/*send register address to write*/
 800033a:	b2f1      	uxtb	r1, r6
 800033c:	0020      	movs	r0, r4
 800033e:	f001 f875 	bl	800142c <Soft_I2C_Send_Byte>
 8000342:	2801      	cmp	r0, #1
 8000344:	d0f1      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, data) == SOFT_I2C_ERR)
 8000346:	0039      	movs	r1, r7
 8000348:	0020      	movs	r0, r4
 800034a:	f001 f86f 	bl	800142c <Soft_I2C_Send_Byte>
 800034e:	2801      	cmp	r0, #1
 8000350:	d0eb      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000352:	0020      	movs	r0, r4
 8000354:	f001 f819 	bl	800138a <Soft_I2C_Stop>
    return AT24CXX_OK;
 8000358:	2500      	movs	r5, #0
 800035a:	e7de      	b.n	800031a <AT24CXX_Write_Byte+0x1a>
 800035c:	20000534 	.word	0x20000534

08000360 <AT24CXX_Read_Buffer>:

    return AT24CXX_OK;
    }

uint8_t AT24CXX_Read_Buffer(uint16_t start_address, uint8_t *buf, uint16_t len)
    {
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000362:	4c21      	ldr	r4, [pc, #132]	; (80003e8 <AT24CXX_Read_Buffer+0x88>)
    {
 8000364:	0007      	movs	r7, r0
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000366:	0020      	movs	r0, r4
    {
 8000368:	000e      	movs	r6, r1
 800036a:	0015      	movs	r5, r2
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 800036c:	f000 fffe 	bl	800136c <Soft_I2C_Start>
 8000370:	2801      	cmp	r0, #1
 8000372:	d104      	bne.n	800037e <AT24CXX_Read_Buffer+0x1e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000374:	0020      	movs	r0, r4
 8000376:	f001 f808 	bl	800138a <Soft_I2C_Stop>
	return AT24CXX_ERR;
	}

    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
	{
	return AT24CXX_ERR;
 800037a:	2001      	movs	r0, #1

    Soft_I2C_Stop(&AT24C_I2C_Handle);

    return AT24CXX_OK;

    }
 800037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 800037e:	21a0      	movs	r1, #160	; 0xa0
 8000380:	0020      	movs	r0, r4
 8000382:	f001 f853 	bl	800142c <Soft_I2C_Send_Byte>
 8000386:	2801      	cmp	r0, #1
 8000388:	d0f7      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (start_address >> 8)) == SOFT_I2C_ERR)
 800038a:	0a39      	lsrs	r1, r7, #8
 800038c:	0020      	movs	r0, r4
 800038e:	f001 f84d 	bl	800142c <Soft_I2C_Send_Byte>
 8000392:	2801      	cmp	r0, #1
 8000394:	d0f1      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000396:	b2f9      	uxtb	r1, r7
 8000398:	0020      	movs	r0, r4
 800039a:	f001 f847 	bl	800142c <Soft_I2C_Send_Byte>
 800039e:	2801      	cmp	r0, #1
 80003a0:	d0eb      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR) //repeated start
 80003a2:	0020      	movs	r0, r4
 80003a4:	f000 ffe2 	bl	800136c <Soft_I2C_Start>
 80003a8:	2801      	cmp	r0, #1
 80003aa:	d0e3      	beq.n	8000374 <AT24CXX_Read_Buffer+0x14>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 1)) == SOFT_I2C_ERR) //read bit
 80003ac:	21a1      	movs	r1, #161	; 0xa1
 80003ae:	0020      	movs	r0, r4
 80003b0:	f001 f83c 	bl	800142c <Soft_I2C_Send_Byte>
 80003b4:	2801      	cmp	r0, #1
 80003b6:	d0e0      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    while (len--)
 80003b8:	1e6f      	subs	r7, r5, #1
 80003ba:	b2bf      	uxth	r7, r7
	*buf++ = Soft_I2C_Receive_Byte(&AT24C_I2C_Handle);
 80003bc:	0020      	movs	r0, r4
    while (len--)
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d103      	bne.n	80003ca <AT24CXX_Read_Buffer+0x6a>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 80003c2:	f000 ffe2 	bl	800138a <Soft_I2C_Stop>
    return AT24CXX_OK;
 80003c6:	0028      	movs	r0, r5
 80003c8:	e7d8      	b.n	800037c <AT24CXX_Read_Buffer+0x1c>
	*buf++ = Soft_I2C_Receive_Byte(&AT24C_I2C_Handle);
 80003ca:	f001 f855 	bl	8001478 <Soft_I2C_Receive_Byte>
 80003ce:	7030      	strb	r0, [r6, #0]
	    Soft_I2C_NACK(&AT24C_I2C_Handle);
 80003d0:	0020      	movs	r0, r4
	if (len == 0)
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d104      	bne.n	80003e0 <AT24CXX_Read_Buffer+0x80>
	    Soft_I2C_NACK(&AT24C_I2C_Handle);
 80003d6:	f001 f819 	bl	800140c <Soft_I2C_NACK>
 80003da:	3601      	adds	r6, #1
    {
 80003dc:	003d      	movs	r5, r7
 80003de:	e7eb      	b.n	80003b8 <AT24CXX_Read_Buffer+0x58>
	    Soft_I2C_ACK(&AT24C_I2C_Handle);
 80003e0:	f001 f804 	bl	80013ec <Soft_I2C_ACK>
 80003e4:	e7f9      	b.n	80003da <AT24CXX_Read_Buffer+0x7a>
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	20000534 	.word	0x20000534

080003ec <Button_Attach>:
static Button_Struct_t *Button_Struct_PTR_Array[MAX_BUTTONS];

static uint8_t Attached_Buttons = 0;

uint8_t Button_Attach(Button_Struct_t *Button_Struct_PTR)
    {
 80003ec:	b530      	push	{r4, r5, lr}
    //init GPIOs as input
    if (Attached_Buttons < MAX_BUTTONS)
 80003ee:	4d24      	ldr	r5, [pc, #144]	; (8000480 <Button_Attach+0x94>)
    {
 80003f0:	0004      	movs	r4, r0
    if (Attached_Buttons < MAX_BUTTONS)
 80003f2:	782b      	ldrb	r3, [r5, #0]
    {
 80003f4:	b08b      	sub	sp, #44	; 0x2c

	}
    else
	{
	//error
	return (255); //return error
 80003f6:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Buttons < MAX_BUTTONS)
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d83c      	bhi.n	8000476 <Button_Attach+0x8a>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80003fc:	2080      	movs	r0, #128	; 0x80
 80003fe:	4b21      	ldr	r3, [pc, #132]	; (8000484 <Button_Attach+0x98>)
 8000400:	0300      	lsls	r0, r0, #12
 8000402:	6959      	ldr	r1, [r3, #20]
 8000404:	4301      	orrs	r1, r0
 8000406:	6159      	str	r1, [r3, #20]
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	4002      	ands	r2, r0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800040c:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800040e:	9201      	str	r2, [sp, #4]
 8000410:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000412:	6959      	ldr	r1, [r3, #20]
 8000414:	0340      	lsls	r0, r0, #13
 8000416:	4301      	orrs	r1, r0
 8000418:	6159      	str	r1, [r3, #20]
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	4002      	ands	r2, r0
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800041e:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000420:	9202      	str	r2, [sp, #8]
 8000422:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000424:	6959      	ldr	r1, [r3, #20]
 8000426:	0280      	lsls	r0, r0, #10
 8000428:	4301      	orrs	r1, r0
 800042a:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800042c:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800042e:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000430:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000432:	4002      	ands	r2, r0
 8000434:	9203      	str	r2, [sp, #12]
 8000436:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	400b      	ands	r3, r1
 8000442:	9304      	str	r3, [sp, #16]
 8000444:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 8000446:	8823      	ldrh	r3, [r4, #0]
 8000448:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	9306      	str	r3, [sp, #24]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 800044e:	7a23      	ldrb	r3, [r4, #8]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d112      	bne.n	800047a <Button_Attach+0x8e>
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000454:	3301      	adds	r3, #1
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000456:	6860      	ldr	r0, [r4, #4]
 8000458:	a905      	add	r1, sp, #20
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800045a:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 800045c:	f001 fdec 	bl	8002038 <HAL_GPIO_Init>
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000460:	2300      	movs	r3, #0
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000462:	7828      	ldrb	r0, [r5, #0]
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000464:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 8000466:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 8000468:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 800046a:	6123      	str	r3, [r4, #16]
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <Button_Attach+0x9c>)
 800046e:	0082      	lsls	r2, r0, #2
 8000470:	50d4      	str	r4, [r2, r3]
	Attached_Buttons++;
 8000472:	1c43      	adds	r3, r0, #1
 8000474:	702b      	strb	r3, [r5, #0]
	}

    }
 8000476:	b00b      	add	sp, #44	; 0x2c
 8000478:	bd30      	pop	{r4, r5, pc}
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800047a:	2302      	movs	r3, #2
 800047c:	e7eb      	b.n	8000456 <Button_Attach+0x6a>
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000044 	.word	0x20000044
 8000484:	40021000 	.word	0x40021000
 8000488:	2000004c 	.word	0x2000004c

0800048c <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
    {
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    static volatile uint32_t Button_Scan_Time_Stamp = 0;
    Button_Struct_t *PTR = NULL;

    if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 800048e:	f001 fb79 	bl	8001b84 <HAL_GetTick>
 8000492:	4c2c      	ldr	r4, [pc, #176]	; (8000544 <Button_Scan+0xb8>)
 8000494:	6823      	ldr	r3, [r4, #0]
 8000496:	1ac0      	subs	r0, r0, r3
 8000498:	2809      	cmp	r0, #9
 800049a:	d909      	bls.n	80004b0 <Button_Scan+0x24>
	{
	Button_Scan_Time_Stamp = HAL_GetTick();
 800049c:	f001 fb72 	bl	8001b84 <HAL_GetTick>

	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80004a0:	2500      	movs	r5, #0
		    PTR->Button_Released_Ticks = 0;

		    }
		else if (PTR->Button_Event != Button_Long_Pressed)
		    {   //long pressed detected
		    PTR->Button_Event = Button_Long_Pressed;
 80004a2:	2703      	movs	r7, #3
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80004a4:	26ff      	movs	r6, #255	; 0xff
	Button_Scan_Time_Stamp = HAL_GetTick();
 80004a6:	6020      	str	r0, [r4, #0]
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <Button_Scan+0xbc>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	42ab      	cmp	r3, r5
 80004ae:	d800      	bhi.n	80004b2 <Button_Scan+0x26>
			}
		    }
		}
	    }
	}
    }
 80004b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    PTR = Button_Struct_PTR_Array[Index];
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <Button_Scan+0xc0>)
 80004b4:	00aa      	lsls	r2, r5, #2
 80004b6:	58d4      	ldr	r4, [r2, r3]
	    if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port, PTR->Button_Pin)
 80004b8:	8821      	ldrh	r1, [r4, #0]
 80004ba:	6860      	ldr	r0, [r4, #4]
 80004bc:	f001 fe6c 	bl	8002198 <HAL_GPIO_ReadPin>
 80004c0:	7a22      	ldrb	r2, [r4, #8]
 80004c2:	68e3      	ldr	r3, [r4, #12]
 80004c4:	4282      	cmp	r2, r0
 80004c6:	d11c      	bne.n	8000502 <Button_Scan+0x76>
		PTR->Button_Pressed_Ticks++;	//
 80004c8:	3301      	adds	r3, #1
 80004ca:	60e3      	str	r3, [r4, #12]
		if (PTR->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_DELAY)
 80004cc:	2b63      	cmp	r3, #99	; 0x63
 80004ce:	d80b      	bhi.n	80004e8 <Button_Scan+0x5c>
		    if (PTR->Button_Released_Ticks //repressed detected
 80004d0:	6923      	ldr	r3, [r4, #16]
 80004d2:	2b0e      	cmp	r3, #14
 80004d4:	d806      	bhi.n	80004e4 <Button_Scan+0x58>
			PTR->Button_Event = Button_Repressed;
 80004d6:	2302      	movs	r3, #2
			PTR->Button_Event = Button_Pressed;
 80004d8:	7263      	strb	r3, [r4, #9]
		    PTR->Button_Released_Ticks = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	6123      	str	r3, [r4, #16]
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80004de:	3501      	adds	r5, #1
 80004e0:	b2ed      	uxtb	r5, r5
 80004e2:	e7e1      	b.n	80004a8 <Button_Scan+0x1c>
			PTR->Button_Event = Button_Pressed;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e7f7      	b.n	80004d8 <Button_Scan+0x4c>
		else if (PTR->Button_Event != Button_Long_Pressed)
 80004e8:	7a63      	ldrb	r3, [r4, #9]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d0f7      	beq.n	80004de <Button_Scan+0x52>
		    if (PTR->Callback != NULL)
 80004ee:	69a3      	ldr	r3, [r4, #24]
		    PTR->Button_Event = Button_Long_Pressed;
 80004f0:	7267      	strb	r7, [r4, #9]
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80004f2:	7526      	strb	r6, [r4, #20]
		    if (PTR->Callback != NULL)
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f2      	beq.n	80004de <Button_Scan+0x52>
			PTR->Callback(PTR->Button_Clicked_Count);
 80004f8:	0030      	movs	r0, r6
 80004fa:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	7523      	strb	r3, [r4, #20]
 8000500:	e7ed      	b.n	80004de <Button_Scan+0x52>
		PTR->Button_Released_Ticks++;
 8000502:	6922      	ldr	r2, [r4, #16]
 8000504:	3201      	adds	r2, #1
 8000506:	6122      	str	r2, [r4, #16]
		if (PTR->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 8000508:	2b05      	cmp	r3, #5
 800050a:	d907      	bls.n	800051c <Button_Scan+0x90>
		    PTR->Button_Pressed_Ticks = 0;
 800050c:	2100      	movs	r1, #0
		    if (PTR->Button_Event == Button_Repressed)
 800050e:	7a63      	ldrb	r3, [r4, #9]
		    PTR->Button_Pressed_Ticks = 0;
 8000510:	60e1      	str	r1, [r4, #12]
		    if (PTR->Button_Event == Button_Repressed)
 8000512:	2b02      	cmp	r3, #2
 8000514:	d110      	bne.n	8000538 <Button_Scan+0xac>
			PTR->Button_Clicked_Count++;
 8000516:	7d23      	ldrb	r3, [r4, #20]
 8000518:	3301      	adds	r3, #1
			PTR->Button_Clicked_Count = 1;
 800051a:	7523      	strb	r3, [r4, #20]
		if (PTR->Button_Released_Ticks > BUTTON_CLICKED_DELAY)
 800051c:	2a19      	cmp	r2, #25
 800051e:	d9de      	bls.n	80004de <Button_Scan+0x52>
		    if (PTR->Callback != NULL
 8000520:	69a3      	ldr	r3, [r4, #24]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0db      	beq.n	80004de <Button_Scan+0x52>
			    && PTR->Button_Event != Button_Idle)
 8000526:	7a62      	ldrb	r2, [r4, #9]
 8000528:	2a00      	cmp	r2, #0
 800052a:	d0d8      	beq.n	80004de <Button_Scan+0x52>
			PTR->Callback(PTR->Button_Clicked_Count);
 800052c:	7d20      	ldrb	r0, [r4, #20]
 800052e:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	7523      	strb	r3, [r4, #20]
			PTR->Button_Event = Button_Idle;
 8000534:	7263      	strb	r3, [r4, #9]
 8000536:	e7d2      	b.n	80004de <Button_Scan+0x52>
		    else if (PTR->Button_Event == Button_Pressed)
 8000538:	2b01      	cmp	r3, #1
 800053a:	d0ee      	beq.n	800051a <Button_Scan+0x8e>
		    else if (PTR->Button_Event == Button_Long_Pressed)
 800053c:	2b03      	cmp	r3, #3
 800053e:	d1ed      	bne.n	800051c <Button_Scan+0x90>
			PTR->Button_Event = Button_Idle;
 8000540:	7261      	strb	r1, [r4, #9]
 8000542:	e7eb      	b.n	800051c <Button_Scan+0x90>
 8000544:	20000048 	.word	0x20000048
 8000548:	20000044 	.word	0x20000044
 800054c:	2000004c 	.word	0x2000004c

08000550 <Button_Get_Clicked_Count>:
    }

uint8_t Button_Get_Clicked_Count(Button_Struct_t *PTR)
    {

    if (PTR != NULL)
 8000550:	2800      	cmp	r0, #0
 8000552:	d000      	beq.n	8000556 <Button_Get_Clicked_Count+0x6>
	{
	return PTR->Button_Clicked_Count;
 8000554:	7d00      	ldrb	r0, [r0, #20]
    else
	{
	//Error
	return 0;
	}
    }
 8000556:	4770      	bx	lr

08000558 <Button_Reset_Count>:

void Button_Reset_Count(Button_Struct_t *PTR)
    {

    if (PTR != NULL)
 8000558:	2800      	cmp	r0, #0
 800055a:	d001      	beq.n	8000560 <Button_Reset_Count+0x8>
	{
	PTR->Button_Clicked_Count = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	7503      	strb	r3, [r0, #20]
    else
	{
	//Error
	}

    }
 8000560:	4770      	bx	lr
	...

08000564 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2214      	movs	r2, #20
 800056a:	2100      	movs	r1, #0
 800056c:	a803      	add	r0, sp, #12
 800056e:	f002 f920 	bl	80027b2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	2080      	movs	r0, #128	; 0x80
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <MX_GPIO_Init+0xc4>)
 8000576:	03c0      	lsls	r0, r0, #15
 8000578:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800057a:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057c:	4301      	orrs	r1, r0
 800057e:	6159      	str	r1, [r3, #20]
 8000580:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000584:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	6959      	ldr	r1, [r3, #20]
 800058e:	0280      	lsls	r0, r0, #10
 8000590:	4301      	orrs	r1, r0
 8000592:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000596:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4002      	ands	r2, r0
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80005a4:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	430a      	orrs	r2, r1
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	400b      	ands	r3, r1
 80005b0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80005b2:	0028      	movs	r0, r5
 80005b4:	491d      	ldr	r1, [pc, #116]	; (800062c <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80005b8:	f001 fdf4 	bl	80021a4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005bc:	a903      	add	r1, sp, #12
 80005be:	481c      	ldr	r0, [pc, #112]	; (8000630 <MX_GPIO_Init+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005c6:	f001 fd37 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PA10 */
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_GPIO_Init+0xd0>)
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	a903      	add	r1, sp, #12
 80005ce:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 80005d0:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80005d2:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f001 fd2e 	bl	8002038 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80005de:	a903      	add	r1, sp, #12
 80005e0:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80005e4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f001 fd25 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005ee:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	a903      	add	r1, sp, #12
 80005f2:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f001 fd1d 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80005fe:	a903      	add	r1, sp, #12
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_GPIO_Init+0xd4>)
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 8000602:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 8000608:	f001 fd16 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	a903      	add	r1, sp, #12
 8000616:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f001 fd0b 	bl	8002038 <HAL_GPIO_Init>

}
 8000622:	b009      	add	sp, #36	; 0x24
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40021000 	.word	0x40021000
 800062c:	00000202 	.word	0x00000202
 8000630:	48001400 	.word	0x48001400
 8000634:	000004d1 	.word	0x000004d1
 8000638:	48000400 	.word	0x48000400

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	2510      	movs	r5, #16
{
 8000640:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	222c      	movs	r2, #44	; 0x2c
 8000644:	2100      	movs	r1, #0
 8000646:	a805      	add	r0, sp, #20
 8000648:	f002 f8b3 	bl	80027b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	002a      	movs	r2, r5
 800064e:	2100      	movs	r1, #0
 8000650:	4668      	mov	r0, sp
 8000652:	f002 f8ae 	bl	80027b2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000656:	2312      	movs	r3, #18
 8000658:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800065a:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000660:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000662:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000668:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800066c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f001 fd9e 	bl	80021b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	2307      	movs	r3, #7
 8000676:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067a:	0021      	movs	r1, r4
 800067c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000684:	f001 ffc8 	bl	8002618 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000688:	b011      	add	sp, #68	; 0x44
 800068a:	bd30      	pop	{r4, r5, pc}

0800068c <main>:
{
 800068c:	b510      	push	{r4, lr}
  HAL_Init();
 800068e:	f001 fa5d 	bl	8001b4c <HAL_Init>
  SystemClock_Config();
 8000692:	f7ff ffd3 	bl	800063c <SystemClock_Config>
  MX_GPIO_Init();
 8000696:	f7ff ff65 	bl	8000564 <MX_GPIO_Init>
  MX_ADC_Init();
 800069a:	f7ff fdcb 	bl	8000234 <MX_ADC_Init>
  HAL_ADC_Start(&hadc);
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0x20>)
 80006a0:	f001 fb7a 	bl	8001d98 <HAL_ADC_Start>
  Spot_Welder_Main();
 80006a4:	f001 f84a 	bl	800173c <Spot_Welder_Main>
 80006a8:	e7fe      	b.n	80006a8 <main+0x1c>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000480 	.word	0x20000480

080006b0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b0:	4770      	bx	lr

080006b2 <Encoder_Button_Callback>:
    }

void Encoder_Button_Callback(uint8_t Clicked_Count)
    {

    }
 80006b2:	4770      	bx	lr

080006b4 <Systic_Callback>:
    {
 80006b4:	b510      	push	{r4, lr}
    Encoder_Scan();
 80006b6:	f000 fd8b 	bl	80011d0 <Encoder_Scan>
    Button_Scan();
 80006ba:	f7ff fee7 	bl	800048c <Button_Scan>
    }
 80006be:	bd10      	pop	{r4, pc}

080006c0 <Menu_Change_Page>:

void Menu_Change_Page(uint8_t page_no)
    {

    Refresh_Screen = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <Menu_Change_Page+0x3c>)
 80006c4:	7013      	strb	r3, [r2, #0]

    switch (page_no)
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d002      	beq.n	80006d0 <Menu_Change_Page+0x10>
 80006ca:	2802      	cmp	r0, #2
 80006cc:	d00c      	beq.n	80006e8 <Menu_Change_Page+0x28>
	Page_Screen = 1;
	Screens_In_Page = 4;
	break;
	}

    }
 80006ce:	4770      	bx	lr
	Show_Page = Show_Page1;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <Menu_Change_Page+0x40>)
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <Menu_Change_Page+0x44>)
 80006d4:	601a      	str	r2, [r3, #0]
	Enter_Page_Screen = Enter_Page1_Screen;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <Menu_Change_Page+0x48>)
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <Menu_Change_Page+0x4c>)
 80006da:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <Menu_Change_Page+0x50>)
 80006de:	7018      	strb	r0, [r3, #0]
	Screens_In_Page = 4;
 80006e0:	2204      	movs	r2, #4
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <Menu_Change_Page+0x54>)
 80006e4:	701a      	strb	r2, [r3, #0]
    }
 80006e6:	e7f2      	b.n	80006ce <Menu_Change_Page+0xe>
	Show_Page = Show_Page2;
 80006e8:	4a05      	ldr	r2, [pc, #20]	; (8000700 <Menu_Change_Page+0x40>)
 80006ea:	490b      	ldr	r1, [pc, #44]	; (8000718 <Menu_Change_Page+0x58>)
 80006ec:	6011      	str	r1, [r2, #0]
	Enter_Page_Screen = Enter_Page2_Screen;
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <Menu_Change_Page+0x48>)
 80006f0:	490a      	ldr	r1, [pc, #40]	; (800071c <Menu_Change_Page+0x5c>)
 80006f2:	6011      	str	r1, [r2, #0]
	Page_Screen = 1;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <Menu_Change_Page+0x50>)
 80006f6:	7013      	strb	r3, [r2, #0]
 80006f8:	e7f2      	b.n	80006e0 <Menu_Change_Page+0x20>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000060 	.word	0x20000060
 8000700:	200004f4 	.word	0x200004f4
 8000704:	08000a01 	.word	0x08000a01
 8000708:	200004f8 	.word	0x200004f8
 800070c:	08000e2d 	.word	0x08000e2d
 8000710:	20000010 	.word	0x20000010
 8000714:	20000068 	.word	0x20000068
 8000718:	08001041 	.word	0x08001041
 800071c:	080010e5 	.word	0x080010e5

08000720 <Menu_Init>:

void Menu_Init()
    {
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <Menu_Init+0x48>)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <Menu_Init+0x4c>)
    {
 8000724:	b510      	push	{r4, lr}
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 8000726:	6003      	str	r3, [r0, #0]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
    Encoder.Encoder_Pin_1 = ENCDR_A_Pin;
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	6043      	str	r3, [r0, #4]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
 800072e:	6083      	str	r3, [r0, #8]
    Encoder.Encoder_Pin_1_Port = ENCDR_A_GPIO_Port;
    Encoder_Attach(&Encoder);
 8000730:	f000 fcf6 	bl	8001120 <Encoder_Attach>

    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 8000734:	2302      	movs	r3, #2
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
    Encoder_Button.Button_Pressed_Logic = LOW;
 8000736:	2400      	movs	r4, #0
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <Menu_Init+0x50>)
 800073a:	8003      	strh	r3, [r0, #0]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <Menu_Init+0x54>)
    Encoder_Button.Button_Pressed_Logic = LOW;
 800073e:	7204      	strb	r4, [r0, #8]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000740:	6043      	str	r3, [r0, #4]
    Encoder_Button.Callback = Encoder_Button_Callback;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <Menu_Init+0x58>)
 8000744:	6183      	str	r3, [r0, #24]
    Button_Attach(&Encoder_Button);
 8000746:	f7ff fe51 	bl	80003ec <Button_Attach>
	Show_Page = Show_Page1;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <Menu_Init+0x5c>)
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <Menu_Init+0x60>)
 800074e:	601a      	str	r2, [r3, #0]
	Enter_Page_Screen = Enter_Page1_Screen;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <Menu_Init+0x64>)
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <Menu_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 8000756:	2201      	movs	r2, #1
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <Menu_Init+0x6c>)
 800075a:	701a      	strb	r2, [r3, #0]
	Screens_In_Page = 4;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <Menu_Init+0x70>)
 800075e:	3203      	adds	r2, #3
 8000760:	701a      	strb	r2, [r3, #0]

    Menu_Change_Page(1);
    Refresh_Screen = 0;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <Menu_Init+0x74>)
 8000764:	701c      	strb	r4, [r3, #0]
    }
 8000766:	bd10      	pop	{r4, pc}
 8000768:	200004dc 	.word	0x200004dc
 800076c:	00800040 	.word	0x00800040
 8000770:	200004c0 	.word	0x200004c0
 8000774:	48000400 	.word	0x48000400
 8000778:	080006b3 	.word	0x080006b3
 800077c:	200004f4 	.word	0x200004f4
 8000780:	08000a01 	.word	0x08000a01
 8000784:	200004f8 	.word	0x200004f8
 8000788:	08000e2d 	.word	0x08000e2d
 800078c:	20000010 	.word	0x20000010
 8000790:	20000068 	.word	0x20000068
 8000794:	20000060 	.word	0x20000060

08000798 <Menu_Loop>:


void Menu_Loop()
    {
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    static uint8_t in_screen = 1;

    static uint32_t Scan_Time_Stamp = 0;

    if (HAL_GetTick() - Scan_Time_Stamp > (100 - 1))
 800079a:	f001 f9f3 	bl	8001b84 <HAL_GetTick>
 800079e:	4c33      	ldr	r4, [pc, #204]	; (800086c <Menu_Loop+0xd4>)
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	1ac0      	subs	r0, r0, r3
 80007a4:	2863      	cmp	r0, #99	; 0x63
 80007a6:	d93e      	bls.n	8000826 <Menu_Loop+0x8e>
	{

	Scan_Time_Stamp = HAL_GetTick();
 80007a8:	f001 f9ec 	bl	8001b84 <HAL_GetTick>

	int16_t count = Encoder_Get_Count(&Encoder);
 80007ac:	4e30      	ldr	r6, [pc, #192]	; (8000870 <Menu_Loop+0xd8>)
	Scan_Time_Stamp = HAL_GetTick();
 80007ae:	6020      	str	r0, [r4, #0]
	int16_t count = Encoder_Get_Count(&Encoder);
 80007b0:	0030      	movs	r0, r6
 80007b2:	f000 fd6b 	bl	800128c <Encoder_Get_Count>
 80007b6:	0007      	movs	r7, r0
	Encoder_Reset_Count(&Encoder);
 80007b8:	0030      	movs	r0, r6
 80007ba:	f000 fd6c 	bl	8001296 <Encoder_Reset_Count>

	uint8_t clicks = Button_Get_Clicked_Count(&Encoder_Button);
 80007be:	4c2d      	ldr	r4, [pc, #180]	; (8000874 <Menu_Loop+0xdc>)
 80007c0:	0020      	movs	r0, r4
 80007c2:	f7ff fec5 	bl	8000550 <Button_Get_Clicked_Count>
 80007c6:	0005      	movs	r5, r0
	Button_Reset_Count(&Encoder_Button);
 80007c8:	0020      	movs	r0, r4
 80007ca:	f7ff fec5 	bl	8000558 <Button_Reset_Count>

	if (!in_screen)
 80007ce:	4c2a      	ldr	r4, [pc, #168]	; (8000878 <Menu_Loop+0xe0>)
 80007d0:	7823      	ldrb	r3, [r4, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d134      	bne.n	8000840 <Menu_Loop+0xa8>
	    {

	    if (count < 0)
 80007d6:	2f00      	cmp	r7, #0
 80007d8:	da26      	bge.n	8000828 <Menu_Loop+0x90>
		{
		Page_Screen++;
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <Menu_Loop+0xe4>)
		if (Page_Screen > Screens_In_Page)
 80007dc:	4928      	ldr	r1, [pc, #160]	; (8000880 <Menu_Loop+0xe8>)
		Page_Screen++;
 80007de:	7813      	ldrb	r3, [r2, #0]
		if (Page_Screen > Screens_In_Page)
 80007e0:	7809      	ldrb	r1, [r1, #0]
		Page_Screen++;
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	7013      	strb	r3, [r2, #0]
		if (Page_Screen > Screens_In_Page)
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d900      	bls.n	80007ee <Menu_Loop+0x56>
		    {
		    Page_Screen = Screens_In_Page;
 80007ec:	7011      	strb	r1, [r2, #0]
		Page_Screen--;
		if (Page_Screen == 0)
		    {
		    Page_Screen = 1;
		    }
		Show_Page(Page_Screen);
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <Menu_Loop+0xec>)
 80007f0:	7810      	ldrb	r0, [r2, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4798      	blx	r3
		}

	    if (clicks == 1)
 80007f6:	2d01      	cmp	r5, #1
 80007f8:	d10a      	bne.n	8000810 <Menu_Loop+0x78>
		{
		in_screen = Enter_Page_Screen(Page_Screen, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <Menu_Loop+0xe4>)
 80007fe:	0011      	movs	r1, r2
 8000800:	7818      	ldrb	r0, [r3, #0]
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <Menu_Loop+0xf0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4798      	blx	r3
 8000808:	7020      	strb	r0, [r4, #0]
		Encoder_Reset_Count(&Encoder);
 800080a:	0030      	movs	r0, r6
 800080c:	f000 fd43 	bl	8001296 <Encoder_Reset_Count>
		}

	    if (Refresh_Screen)
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <Menu_Loop+0xf4>)
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	2a00      	cmp	r2, #0
 8000816:	d006      	beq.n	8000826 <Menu_Loop+0x8e>
		{
		Refresh_Screen = 0;
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
		Show_Page(Page_Screen);
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <Menu_Loop+0xe4>)
 800081e:	7818      	ldrb	r0, [r3, #0]
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <Menu_Loop+0xec>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4798      	blx	r3
		}
	    }

	}

    }
 8000826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    if (count > 0)
 8000828:	2f00      	cmp	r7, #0
 800082a:	d0e4      	beq.n	80007f6 <Menu_Loop+0x5e>
		Page_Screen--;
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <Menu_Loop+0xe4>)
 800082e:	7813      	ldrb	r3, [r2, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	b2db      	uxtb	r3, r3
		if (Page_Screen == 0)
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <Menu_Loop+0xa4>
		    Page_Screen = 1;
 8000838:	7013      	strb	r3, [r2, #0]
 800083a:	e7d8      	b.n	80007ee <Menu_Loop+0x56>
 800083c:	2301      	movs	r3, #1
 800083e:	e7fb      	b.n	8000838 <Menu_Loop+0xa0>
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <Menu_Loop+0xe4>)
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <Menu_Loop+0xf0>)
 8000844:	7810      	ldrb	r0, [r2, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
		in_screen = Enter_Page_Screen(Page_Screen, clicks, count);
 8000848:	003a      	movs	r2, r7
 800084a:	0029      	movs	r1, r5
	    if (clicks == 1 || count)
 800084c:	2d01      	cmp	r5, #1
 800084e:	d001      	beq.n	8000854 <Menu_Loop+0xbc>
 8000850:	2f00      	cmp	r7, #0
 8000852:	d008      	beq.n	8000866 <Menu_Loop+0xce>
		in_screen = Enter_Page_Screen(Page_Screen, clicks, count);
 8000854:	4798      	blx	r3
 8000856:	7020      	strb	r0, [r4, #0]
		Encoder_Reset_Count(&Encoder);
 8000858:	0030      	movs	r0, r6
 800085a:	f000 fd1c 	bl	8001296 <Encoder_Reset_Count>
		Refresh_Screen = 1;
 800085e:	2201      	movs	r2, #1
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <Menu_Loop+0xf4>)
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e7df      	b.n	8000826 <Menu_Loop+0x8e>
		in_screen = Enter_Page_Screen(Page_Screen, clicks, count);
 8000866:	4798      	blx	r3
 8000868:	7020      	strb	r0, [r4, #0]
    }
 800086a:	e7dc      	b.n	8000826 <Menu_Loop+0x8e>
 800086c:	20000064 	.word	0x20000064
 8000870:	200004dc 	.word	0x200004dc
 8000874:	200004c0 	.word	0x200004c0
 8000878:	20000011 	.word	0x20000011
 800087c:	20000010 	.word	0x20000010
 8000880:	20000068 	.word	0x20000068
 8000884:	200004f4 	.word	0x200004f4
 8000888:	200004f8 	.word	0x200004f8
 800088c:	20000060 	.word	0x20000060

08000890 <Show_Page1_Screen1>:
 */

#include "menu_main.h"

void Show_Page1_Screen1()
    {
 8000890:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 ffc6 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	0008      	movs	r0, r1
 800089c:	f001 f8de 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, Black);
 80008a0:	4c0e      	ldr	r4, [pc, #56]	; (80008dc <Show_Page1_Screen1+0x4c>)
 80008a2:	2300      	movs	r3, #0
 80008a4:	6862      	ldr	r2, [r4, #4]
 80008a6:	6821      	ldr	r1, [r4, #0]
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <Show_Page1_Screen1+0x50>)
 80008aa:	f001 f8c3 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80008ae:	2114      	movs	r1, #20
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 f8d3 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 80008b6:	2301      	movs	r3, #1
 80008b8:	6821      	ldr	r1, [r4, #0]
 80008ba:	6862      	ldr	r2, [r4, #4]
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <Show_Page1_Screen1+0x54>)
 80008be:	f001 f8b9 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80008c2:	2128      	movs	r1, #40	; 0x28
 80008c4:	2000      	movs	r0, #0
 80008c6:	f001 f8c9 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80008ca:	cc06      	ldmia	r4!, {r1, r2}
 80008cc:	2301      	movs	r3, #1
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <Show_Page1_Screen1+0x58>)
 80008d0:	f001 f8b0 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80008d4:	f000 ffb4 	bl	8001840 <ssd1306_UpdateScreen>
    }
 80008d8:	bd10      	pop	{r4, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000000 	.word	0x20000000
 80008e0:	08003d45 	.word	0x08003d45
 80008e4:	08003d2e 	.word	0x08003d2e
 80008e8:	08003d4a 	.word	0x08003d4a

080008ec <Show_Page1_Screen2>:


void Show_Page1_Screen2()
    {
 80008ec:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 ff98 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80008f4:	2100      	movs	r1, #0
 80008f6:	0008      	movs	r0, r1
 80008f8:	f001 f8b0 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 80008fc:	4c0e      	ldr	r4, [pc, #56]	; (8000938 <Show_Page1_Screen2+0x4c>)
 80008fe:	2301      	movs	r3, #1
 8000900:	6862      	ldr	r2, [r4, #4]
 8000902:	6821      	ldr	r1, [r4, #0]
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <Show_Page1_Screen2+0x50>)
 8000906:	f001 f895 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800090a:	2114      	movs	r1, #20
 800090c:	2000      	movs	r0, #0
 800090e:	f001 f8a5 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, Black);
 8000912:	2300      	movs	r3, #0
 8000914:	6821      	ldr	r1, [r4, #0]
 8000916:	6862      	ldr	r2, [r4, #4]
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <Show_Page1_Screen2+0x54>)
 800091a:	f001 f88b 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800091e:	2128      	movs	r1, #40	; 0x28
 8000920:	2000      	movs	r0, #0
 8000922:	f001 f89b 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 8000926:	cc06      	ldmia	r4!, {r1, r2}
 8000928:	2301      	movs	r3, #1
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <Show_Page1_Screen2+0x58>)
 800092c:	f001 f882 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000930:	f000 ff86 	bl	8001840 <ssd1306_UpdateScreen>
    }
 8000934:	bd10      	pop	{r4, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000000 	.word	0x20000000
 800093c:	08003d45 	.word	0x08003d45
 8000940:	08003d2e 	.word	0x08003d2e
 8000944:	08003d4a 	.word	0x08003d4a

08000948 <Show_Page1_Screen3>:

void Show_Page1_Screen3()
    {
 8000948:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 ff6a 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	0008      	movs	r0, r1
 8000954:	f001 f882 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 8000958:	4c0e      	ldr	r4, [pc, #56]	; (8000994 <Show_Page1_Screen3+0x4c>)
 800095a:	2301      	movs	r3, #1
 800095c:	6862      	ldr	r2, [r4, #4]
 800095e:	6821      	ldr	r1, [r4, #0]
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <Show_Page1_Screen3+0x50>)
 8000962:	f001 f867 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8000966:	2114      	movs	r1, #20
 8000968:	2000      	movs	r0, #0
 800096a:	f001 f877 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 800096e:	2301      	movs	r3, #1
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	6862      	ldr	r2, [r4, #4]
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <Show_Page1_Screen3+0x54>)
 8000976:	f001 f85d 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800097a:	2128      	movs	r1, #40	; 0x28
 800097c:	2000      	movs	r0, #0
 800097e:	f001 f86d 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, Black);
 8000982:	cc06      	ldmia	r4!, {r1, r2}
 8000984:	2300      	movs	r3, #0
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <Show_Page1_Screen3+0x58>)
 8000988:	f001 f854 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800098c:	f000 ff58 	bl	8001840 <ssd1306_UpdateScreen>

    }
 8000990:	bd10      	pop	{r4, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000000 	.word	0x20000000
 8000998:	08003d45 	.word	0x08003d45
 800099c:	08003d2e 	.word	0x08003d2e
 80009a0:	08003d4a 	.word	0x08003d4a

080009a4 <Show_Page1_Screen4>:

void Show_Page1_Screen4()
    {
 80009a4:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 ff3c 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	0008      	movs	r0, r1
 80009b0:	f001 f854 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 80009b4:	4c0e      	ldr	r4, [pc, #56]	; (80009f0 <Show_Page1_Screen4+0x4c>)
 80009b6:	2301      	movs	r3, #1
 80009b8:	6862      	ldr	r2, [r4, #4]
 80009ba:	6821      	ldr	r1, [r4, #0]
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <Show_Page1_Screen4+0x50>)
 80009be:	f001 f839 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80009c2:	2114      	movs	r1, #20
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 f849 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80009ca:	2301      	movs	r3, #1
 80009cc:	6821      	ldr	r1, [r4, #0]
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <Show_Page1_Screen4+0x54>)
 80009d2:	f001 f82f 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80009d6:	2128      	movs	r1, #40	; 0x28
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f83f 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, Black);
 80009de:	cc06      	ldmia	r4!, {r1, r2}
 80009e0:	2300      	movs	r3, #0
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <Show_Page1_Screen4+0x58>)
 80009e4:	f001 f826 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80009e8:	f000 ff2a 	bl	8001840 <ssd1306_UpdateScreen>

    }
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000000 	.word	0x20000000
 80009f4:	08003d2e 	.word	0x08003d2e
 80009f8:	08003d4a 	.word	0x08003d4a
 80009fc:	08003d6d 	.word	0x08003d6d

08000a00 <Show_Page1>:

void Show_Page1(uint8_t screen)
    {

    switch (screen)
 8000a00:	3801      	subs	r0, #1
    {
 8000a02:	b510      	push	{r4, lr}
    switch (screen)
 8000a04:	2803      	cmp	r0, #3
 8000a06:	d805      	bhi.n	8000a14 <Show_Page1+0x14>
 8000a08:	f7ff fb7e 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000a0c:	0b080502 	.word	0x0b080502
	{
    case 1:
	Show_Page1_Screen1();
 8000a10:	f7ff ff3e 	bl	8000890 <Show_Page1_Screen1>
	break;
    case 4:
	Show_Page1_Screen4();
	break;
	}
    }
 8000a14:	bd10      	pop	{r4, pc}
	Show_Page1_Screen2();
 8000a16:	f7ff ff69 	bl	80008ec <Show_Page1_Screen2>
	break;
 8000a1a:	e7fb      	b.n	8000a14 <Show_Page1+0x14>
	Show_Page1_Screen3();
 8000a1c:	f7ff ff94 	bl	8000948 <Show_Page1_Screen3>
	break;
 8000a20:	e7f8      	b.n	8000a14 <Show_Page1+0x14>
	Show_Page1_Screen4();
 8000a22:	f7ff ffbf 	bl	80009a4 <Show_Page1_Screen4>
    }
 8000a26:	e7f5      	b.n	8000a14 <Show_Page1+0x14>

08000a28 <Enter_Page1_Screen1>:
    uint8_t xreturn = 1;
    char temp[10];

    int16_t bat_voltage;

    if (button == 1)
 8000a28:	3801      	subs	r0, #1
 8000a2a:	1e43      	subs	r3, r0, #1
 8000a2c:	4198      	sbcs	r0, r3
    {
 8000a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t xreturn = 1;
 8000a30:	b2c3      	uxtb	r3, r0
    {
 8000a32:	b087      	sub	sp, #28
 8000a34:	000c      	movs	r4, r1
    uint8_t xreturn = 1;
 8000a36:	9301      	str	r3, [sp, #4]
	{
	xreturn = 0; // exit loop
	}

    Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 8000a38:	f000 fdfe 	bl	8001638 <Get_Main_Pulse_Duration>
 8000a3c:	1900      	adds	r0, r0, r4
 8000a3e:	b200      	sxth	r0, r0
 8000a40:	f000 fde8 	bl	8001614 <Set_Main_Pulse_Duration>

    HAL_ADC_PollForConversion(&hadc, 10);
 8000a44:	4ca7      	ldr	r4, [pc, #668]	; (8000ce4 <Enter_Page1_Screen1+0x2bc>)
 8000a46:	210a      	movs	r1, #10
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f001 f9d1 	bl	8001df0 <HAL_ADC_PollForConversion>
    bat_voltage = HAL_ADC_GetValue(&hadc) * 13;
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f001 fa2c 	bl	8001eac <HAL_ADC_GetValue>
 8000a54:	270d      	movs	r7, #13
 8000a56:	4347      	muls	r7, r0

    if (bat_voltage < Get_Batt_Alarm())
 8000a58:	b23f      	sxth	r7, r7
 8000a5a:	f000 fe23 	bl	80016a4 <Get_Batt_Alarm>
 8000a5e:	4287      	cmp	r7, r0
 8000a60:	da01      	bge.n	8000a66 <Enter_Page1_Screen1+0x3e>
	{
	Disble_Welder();
 8000a62:	f000 fe25 	bl	80016b0 <Disble_Welder>
	}

    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 8000a66:	f000 fe49 	bl	80016fc <Get_Foot_Switch_Status>
 8000a6a:	4d9f      	ldr	r5, [pc, #636]	; (8000ce8 <Enter_Page1_Screen1+0x2c0>)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d035      	beq.n	8000adc <Enter_Page1_Screen1+0xb4>
	{

	if (Get_Welder_Status())
 8000a70:	f000 fe24 	bl	80016bc <Get_Welder_Status>
 8000a74:	4c9d      	ldr	r4, [pc, #628]	; (8000cec <Enter_Page1_Screen1+0x2c4>)
 8000a76:	1e06      	subs	r6, r0, #0
 8000a78:	d000      	beq.n	8000a7c <Enter_Page1_Screen1+0x54>
 8000a7a:	e0a8      	b.n	8000bce <Enter_Page1_Screen1+0x1a6>
		ssd1306_UpdateScreen();
		}
	    }
	else
	    {
	    ssd1306_Fill(Black);
 8000a7c:	f000 fed2 	bl	8001824 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000a80:	0031      	movs	r1, r6
 8000a82:	0030      	movs	r0, r6
 8000a84:	f000 ffea 	bl	8001a5c <ssd1306_SetCursor>
	    ssd1306_WriteString("Battery Low", Font_7x10, White);
 8000a88:	6862      	ldr	r2, [r4, #4]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	6821      	ldr	r1, [r4, #0]
 8000a8e:	4898      	ldr	r0, [pc, #608]	; (8000cf0 <Enter_Page1_Screen1+0x2c8>)
 8000a90:	f000 ffd0 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 15);
 8000a94:	0030      	movs	r0, r6
 8000a96:	210f      	movs	r1, #15
 8000a98:	f000 ffe0 	bl	8001a5c <ssd1306_SetCursor>
	    ssd1306_WriteString("Under Voltage", Font_7x10, White);
 8000a9c:	6862      	ldr	r2, [r4, #4]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	6821      	ldr	r1, [r4, #0]
 8000aa2:	4894      	ldr	r0, [pc, #592]	; (8000cf4 <Enter_Page1_Screen1+0x2cc>)
 8000aa4:	f000 ffc6 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 30);
 8000aa8:	0030      	movs	r0, r6
 8000aaa:	211e      	movs	r1, #30
 8000aac:	f000 ffd6 	bl	8001a5c <ssd1306_SetCursor>
	    ssd1306_WriteString("Lock Out", Font_7x10, White);
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	6821      	ldr	r1, [r4, #0]
 8000ab4:	6862      	ldr	r2, [r4, #4]
 8000ab6:	4890      	ldr	r0, [pc, #576]	; (8000cf8 <Enter_Page1_Screen1+0x2d0>)
 8000ab8:	f000 ffbc 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 45);
 8000abc:	0030      	movs	r0, r6
 8000abe:	212d      	movs	r1, #45	; 0x2d
 8000ac0:	f000 ffcc 	bl	8001a5c <ssd1306_SetCursor>
	    ssd1306_WriteString("Reboot Welder", Font_7x10, White);
 8000ac4:	cc06      	ldmia	r4!, {r1, r2}
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	488c      	ldr	r0, [pc, #560]	; (8000cfc <Enter_Page1_Screen1+0x2d4>)
 8000aca:	f000 ffb3 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000ace:	f000 feb7 	bl	8001840 <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 8000ad2:	20fa      	movs	r0, #250	; 0xfa
 8000ad4:	00c0      	lsls	r0, r0, #3
 8000ad6:	f001 f85b 	bl	8001b90 <HAL_Delay>
 8000ada:	e003      	b.n	8000ae4 <Enter_Page1_Screen1+0xbc>
    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 8000adc:	f000 fe20 	bl	8001720 <Get_Auto_Puse_In_Status>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d1c5      	bne.n	8000a70 <Enter_Page1_Screen1+0x48>
	    }

	}

    ssd1306_Fill(Black);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fe9d 	bl	8001824 <ssd1306_Fill>

    ssd1306_SetCursor(45, 0);
 8000aea:	2100      	movs	r1, #0
 8000aec:	202d      	movs	r0, #45	; 0x2d
 8000aee:	f000 ffb5 	bl	8001a5c <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000af2:	f000 fda1 	bl	8001638 <Get_Main_Pulse_Duration>
 8000af6:	220a      	movs	r2, #10
 8000af8:	a903      	add	r1, sp, #12
 8000afa:	f001 fe4d 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000afe:	2301      	movs	r3, #1
 8000b00:	6829      	ldr	r1, [r5, #0]
 8000b02:	686a      	ldr	r2, [r5, #4]
 8000b04:	a803      	add	r0, sp, #12
 8000b06:	f000 ff95 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_WriteString("ms", Font_11x18, White);
 8000b0a:	cd06      	ldmia	r5!, {r1, r2}
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	487c      	ldr	r0, [pc, #496]	; (8000d00 <Enter_Page1_Screen1+0x2d8>)
 8000b10:	f000 ff90 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000b14:	2114      	movs	r1, #20
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 ffa0 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("Battery:", Font_7x10, White);
 8000b1c:	4c73      	ldr	r4, [pc, #460]	; (8000cec <Enter_Page1_Screen1+0x2c4>)
 8000b1e:	2301      	movs	r3, #1
 8000b20:	6862      	ldr	r2, [r4, #4]
 8000b22:	6821      	ldr	r1, [r4, #0]
 8000b24:	4877      	ldr	r0, [pc, #476]	; (8000d04 <Enter_Page1_Screen1+0x2dc>)
 8000b26:	f000 ff85 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(75, 20);
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	204b      	movs	r0, #75	; 0x4b
 8000b2e:	f000 ff95 	bl	8001a5c <ssd1306_SetCursor>
    itoa(bat_voltage, temp, 10);
 8000b32:	220a      	movs	r2, #10
 8000b34:	a903      	add	r1, sp, #12
 8000b36:	0038      	movs	r0, r7
 8000b38:	f001 fe2e 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	6821      	ldr	r1, [r4, #0]
 8000b40:	6862      	ldr	r2, [r4, #4]
 8000b42:	a803      	add	r0, sp, #12
 8000b44:	f000 ff76 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_WriteString("mV", Font_7x10, White);
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6862      	ldr	r2, [r4, #4]
 8000b4c:	6821      	ldr	r1, [r4, #0]
 8000b4e:	486e      	ldr	r0, [pc, #440]	; (8000d08 <Enter_Page1_Screen1+0x2e0>)
 8000b50:	f000 ff70 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 35);
 8000b54:	2123      	movs	r1, #35	; 0x23
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 ff80 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("Tot Welds:", Font_7x10, White);
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	6821      	ldr	r1, [r4, #0]
 8000b62:	486a      	ldr	r0, [pc, #424]	; (8000d0c <Enter_Page1_Screen1+0x2e4>)
 8000b64:	f000 ff66 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(75, 35);
 8000b68:	2123      	movs	r1, #35	; 0x23
 8000b6a:	204b      	movs	r0, #75	; 0x4b
 8000b6c:	f000 ff76 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("125", Font_7x10, White);
 8000b70:	2301      	movs	r3, #1
 8000b72:	6862      	ldr	r2, [r4, #4]
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	4866      	ldr	r0, [pc, #408]	; (8000d10 <Enter_Page1_Screen1+0x2e8>)
 8000b78:	f000 ff5c 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000b7c:	2132      	movs	r1, #50	; 0x32
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 ff6c 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto, Font_7x10, White);
 8000b84:	2301      	movs	r3, #1
 8000b86:	6821      	ldr	r1, [r4, #0]
 8000b88:	6862      	ldr	r2, [r4, #4]
 8000b8a:	4862      	ldr	r0, [pc, #392]	; (8000d14 <Enter_Page1_Screen1+0x2ec>)
 8000b8c:	f000 ff52 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_WriteString(STR_Space, Font_7x10, White);
 8000b90:	2301      	movs	r3, #1
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	6862      	ldr	r2, [r4, #4]
 8000b96:	4860      	ldr	r0, [pc, #384]	; (8000d18 <Enter_Page1_Screen1+0x2f0>)
 8000b98:	f000 ff4c 	bl	8001a34 <ssd1306_WriteString>
    if(Get_Auto_Status())
 8000b9c:	f000 fda8 	bl	80016f0 <Get_Auto_Status>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	6821      	ldr	r1, [r4, #0]
 8000ba4:	6862      	ldr	r2, [r4, #4]
    if(Get_Auto_Status())
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	d100      	bne.n	8000bac <Enter_Page1_Screen1+0x184>
 8000baa:	e099      	b.n	8000ce0 <Enter_Page1_Screen1+0x2b8>
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000bac:	485b      	ldr	r0, [pc, #364]	; (8000d1c <Enter_Page1_Screen1+0x2f4>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000bae:	f000 ff41 	bl	8001a34 <ssd1306_WriteString>
	}
    ssd1306_SetCursor(100, 50);
 8000bb2:	2132      	movs	r1, #50	; 0x32
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f000 ff51 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(">>", Font_7x10, White);
 8000bba:	cc06      	ldmia	r4!, {r1, r2}
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4858      	ldr	r0, [pc, #352]	; (8000d20 <Enter_Page1_Screen1+0x2f8>)
 8000bc0:	f000 ff38 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000bc4:	f000 fe3c 	bl	8001840 <ssd1306_UpdateScreen>

    return xreturn;
    }
 8000bc8:	9801      	ldr	r0, [sp, #4]
 8000bca:	b007      	add	sp, #28
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    HAL_Delay(Get_Auto_Pulse_Delay());
 8000bce:	f000 fd1b 	bl	8001608 <Get_Auto_Pulse_Delay>
 8000bd2:	f000 ffdd 	bl	8001b90 <HAL_Delay>
	    ssd1306_Fill(Black);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 fe24 	bl	8001824 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	0008      	movs	r0, r1
 8000be0:	f000 ff3c 	bl	8001a5c <ssd1306_SetCursor>
	    ssd1306_WriteString("Pulse:", Font_11x18, White);
 8000be4:	2301      	movs	r3, #1
 8000be6:	6829      	ldr	r1, [r5, #0]
 8000be8:	686a      	ldr	r2, [r5, #4]
 8000bea:	484e      	ldr	r0, [pc, #312]	; (8000d24 <Enter_Page1_Screen1+0x2fc>)
 8000bec:	f000 ff22 	bl	8001a34 <ssd1306_WriteString>
	    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000bf0:	f000 fd22 	bl	8001638 <Get_Main_Pulse_Duration>
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	a903      	add	r1, sp, #12
 8000bf8:	f001 fdce 	bl	8002798 <itoa>
	    ssd1306_WriteString(temp, Font_11x18, White);
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	6829      	ldr	r1, [r5, #0]
 8000c00:	686a      	ldr	r2, [r5, #4]
 8000c02:	a803      	add	r0, sp, #12
 8000c04:	f000 ff16 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_WriteString("ms", Font_11x18, White);
 8000c08:	2301      	movs	r3, #1
 8000c0a:	6829      	ldr	r1, [r5, #0]
 8000c0c:	686a      	ldr	r2, [r5, #4]
 8000c0e:	483c      	ldr	r0, [pc, #240]	; (8000d00 <Enter_Page1_Screen1+0x2d8>)
 8000c10:	f000 ff10 	bl	8001a34 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000c14:	f000 fe14 	bl	8001840 <ssd1306_UpdateScreen>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c18:	2090      	movs	r0, #144	; 0x90
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	05c0      	lsls	r0, r0, #23
 8000c20:	f001 fac0 	bl	80021a4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Short_Pulse_Duration());
 8000c24:	f000 fd20 	bl	8001668 <Get_Short_Pulse_Duration>
 8000c28:	f000 ffb2 	bl	8001b90 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c2c:	2090      	movs	r0, #144	; 0x90
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	05c0      	lsls	r0, r0, #23
 8000c34:	f001 fab6 	bl	80021a4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Short_Pulse_Duration());
 8000c38:	f000 fd16 	bl	8001668 <Get_Short_Pulse_Duration>
 8000c3c:	f000 ffa8 	bl	8001b90 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c40:	2090      	movs	r0, #144	; 0x90
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	05c0      	lsls	r0, r0, #23
 8000c48:	f001 faac 	bl	80021a4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Main_Pulse_Duration());
 8000c4c:	f000 fcf4 	bl	8001638 <Get_Main_Pulse_Duration>
 8000c50:	f000 ff9e 	bl	8001b90 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c54:	2090      	movs	r0, #144	; 0x90
 8000c56:	2200      	movs	r2, #0
 8000c58:	05c0      	lsls	r0, r0, #23
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	f001 faa2 	bl	80021a4 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8000c60:	2064      	movs	r0, #100	; 0x64
 8000c62:	f000 ff95 	bl	8001b90 <HAL_Delay>
	    while (Get_Auto_Puse_In_Status())
 8000c66:	f000 fd5b 	bl	8001720 <Get_Auto_Puse_In_Status>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d11e      	bne.n	8000cac <Enter_Page1_Screen1+0x284>
	    while (Get_Foot_Switch_Status())
 8000c6e:	f000 fd45 	bl	80016fc <Get_Foot_Switch_Status>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d100      	bne.n	8000c78 <Enter_Page1_Screen1+0x250>
 8000c76:	e735      	b.n	8000ae4 <Enter_Page1_Screen1+0xbc>
		ssd1306_Fill(Black);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fdd3 	bl	8001824 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0008      	movs	r0, r1
 8000c82:	f000 feeb 	bl	8001a5c <ssd1306_SetCursor>
		ssd1306_WriteString("Release", Font_7x10, White);
 8000c86:	6862      	ldr	r2, [r4, #4]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	6821      	ldr	r1, [r4, #0]
 8000c8c:	4826      	ldr	r0, [pc, #152]	; (8000d28 <Enter_Page1_Screen1+0x300>)
 8000c8e:	f000 fed1 	bl	8001a34 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000c92:	210f      	movs	r1, #15
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fee1 	bl	8001a5c <ssd1306_SetCursor>
		ssd1306_WriteString("Foot SW", Font_7x10, White);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	6821      	ldr	r1, [r4, #0]
 8000c9e:	6862      	ldr	r2, [r4, #4]
 8000ca0:	4822      	ldr	r0, [pc, #136]	; (8000d2c <Enter_Page1_Screen1+0x304>)
 8000ca2:	f000 fec7 	bl	8001a34 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ca6:	f000 fdcb 	bl	8001840 <ssd1306_UpdateScreen>
 8000caa:	e7e0      	b.n	8000c6e <Enter_Page1_Screen1+0x246>
		ssd1306_Fill(Black);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fdb9 	bl	8001824 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	0008      	movs	r0, r1
 8000cb6:	f000 fed1 	bl	8001a5c <ssd1306_SetCursor>
		ssd1306_WriteString("Disconnect", Font_7x10, White);
 8000cba:	6862      	ldr	r2, [r4, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	6821      	ldr	r1, [r4, #0]
 8000cc0:	481b      	ldr	r0, [pc, #108]	; (8000d30 <Enter_Page1_Screen1+0x308>)
 8000cc2:	f000 feb7 	bl	8001a34 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fec7 	bl	8001a5c <ssd1306_SetCursor>
		ssd1306_WriteString("Now", Font_7x10, White);
 8000cce:	2301      	movs	r3, #1
 8000cd0:	6821      	ldr	r1, [r4, #0]
 8000cd2:	6862      	ldr	r2, [r4, #4]
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <Enter_Page1_Screen1+0x30c>)
 8000cd6:	f000 fead 	bl	8001a34 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000cda:	f000 fdb1 	bl	8001840 <ssd1306_UpdateScreen>
 8000cde:	e7c2      	b.n	8000c66 <Enter_Page1_Screen1+0x23e>
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <Enter_Page1_Screen1+0x310>)
 8000ce2:	e764      	b.n	8000bae <Enter_Page1_Screen1+0x186>
 8000ce4:	20000480 	.word	0x20000480
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	08003da3 	.word	0x08003da3
 8000cf4:	08003daf 	.word	0x08003daf
 8000cf8:	08003dbd 	.word	0x08003dbd
 8000cfc:	08003dc6 	.word	0x08003dc6
 8000d00:	08003d81 	.word	0x08003d81
 8000d04:	08003dd4 	.word	0x08003dd4
 8000d08:	08003df0 	.word	0x08003df0
 8000d0c:	08003ddd 	.word	0x08003ddd
 8000d10:	08003de8 	.word	0x08003de8
 8000d14:	08003d28 	.word	0x08003d28
 8000d18:	08003d78 	.word	0x08003d78
 8000d1c:	08003d6a 	.word	0x08003d6a
 8000d20:	08003dec 	.word	0x08003dec
 8000d24:	08003d7a 	.word	0x08003d7a
 8000d28:	08003d93 	.word	0x08003d93
 8000d2c:	08003d9b 	.word	0x08003d9b
 8000d30:	08003d84 	.word	0x08003d84
 8000d34:	08003d8f 	.word	0x08003d8f
 8000d38:	08003d66 	.word	0x08003d66

08000d3c <Enter_Page1_Screen3>:
    Menu_Change_Page(2);
    return 0;
    }

uint8_t Enter_Page1_Screen3(uint8_t button, int16_t count)
    {
 8000d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000d3e:	000d      	movs	r5, r1
    if (button == 1)
	{
	xreturn = 0; // execution complete
	}

    Set_Batt_Alarm(Get_Batt_Alarm() + (count * 10));
 8000d40:	260a      	movs	r6, #10
    {
 8000d42:	0004      	movs	r4, r0
    Set_Batt_Alarm(Get_Batt_Alarm() + (count * 10));
 8000d44:	f000 fcae 	bl	80016a4 <Get_Batt_Alarm>
 8000d48:	4375      	muls	r5, r6
 8000d4a:	1940      	adds	r0, r0, r5
 8000d4c:	b200      	sxth	r0, r0
 8000d4e:	f000 fc91 	bl	8001674 <Set_Batt_Alarm>

    ssd1306_Fill(Black);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fd66 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	0008      	movs	r0, r1
 8000d5c:	f000 fe7e 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 8000d60:	4d11      	ldr	r5, [pc, #68]	; (8000da8 <Enter_Page1_Screen3+0x6c>)
 8000d62:	2301      	movs	r3, #1
 8000d64:	686a      	ldr	r2, [r5, #4]
 8000d66:	6829      	ldr	r1, [r5, #0]
 8000d68:	4810      	ldr	r0, [pc, #64]	; (8000dac <Enter_Page1_Screen3+0x70>)
 8000d6a:	f000 fe63 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000d6e:	2114      	movs	r1, #20
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 fe73 	bl	8001a5c <ssd1306_SetCursor>
    itoa(Get_Batt_Alarm(), temp, 10);
 8000d76:	f000 fc95 	bl	80016a4 <Get_Batt_Alarm>
 8000d7a:	0032      	movs	r2, r6
 8000d7c:	a901      	add	r1, sp, #4
 8000d7e:	f001 fd0b 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000d82:	2301      	movs	r3, #1
 8000d84:	6829      	ldr	r1, [r5, #0]
 8000d86:	686a      	ldr	r2, [r5, #4]
 8000d88:	a801      	add	r0, sp, #4
 8000d8a:	f000 fe53 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_WriteString(" mV", Font_11x18, White);
 8000d8e:	cd06      	ldmia	r5!, {r1, r2}
 8000d90:	2301      	movs	r3, #1
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <Enter_Page1_Screen3+0x74>)
    if (button == 1)
 8000d94:	3c01      	subs	r4, #1
    ssd1306_WriteString(" mV", Font_11x18, White);
 8000d96:	f000 fe4d 	bl	8001a34 <ssd1306_WriteString>
    if (button == 1)
 8000d9a:	1e60      	subs	r0, r4, #1
 8000d9c:	4184      	sbcs	r4, r0
    ssd1306_UpdateScreen();
 8000d9e:	f000 fd4f 	bl	8001840 <ssd1306_UpdateScreen>

    return xreturn;
 8000da2:	b2e0      	uxtb	r0, r4
    }
 8000da4:	b004      	add	sp, #16
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	08003d4a 	.word	0x08003d4a
 8000db0:	08003def 	.word	0x08003def

08000db4 <Enter_Page1_Screen4>:


uint8_t Enter_Page1_Screen4(uint8_t button, int16_t count)
    {
 8000db4:	b530      	push	{r4, r5, lr}
 8000db6:	b085      	sub	sp, #20
 8000db8:	000d      	movs	r5, r1
 8000dba:	0004      	movs	r4, r0

    uint8_t xreturn = 1;
    char temp[10];

    Set_Short_Pulse_Duration(Get_Short_Pulse_Duration() + (count));
 8000dbc:	f000 fc54 	bl	8001668 <Get_Short_Pulse_Duration>
 8000dc0:	1940      	adds	r0, r0, r5
 8000dc2:	b200      	sxth	r0, r0
 8000dc4:	f000 fc3e 	bl	8001644 <Set_Short_Pulse_Duration>
    if (button == 1)
	{
	xreturn = 0; //execution complete
	}

    ssd1306_Fill(Black);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fd2b 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	f000 fe43 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, White);
 8000dd6:	4d12      	ldr	r5, [pc, #72]	; (8000e20 <Enter_Page1_Screen4+0x6c>)
 8000dd8:	2301      	movs	r3, #1
 8000dda:	686a      	ldr	r2, [r5, #4]
 8000ddc:	6829      	ldr	r1, [r5, #0]
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <Enter_Page1_Screen4+0x70>)
 8000de0:	f000 fe28 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000de4:	2114      	movs	r1, #20
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 fe38 	bl	8001a5c <ssd1306_SetCursor>
    itoa(Get_Short_Pulse_Duration(), temp, 10);
 8000dec:	f000 fc3c 	bl	8001668 <Get_Short_Pulse_Duration>
 8000df0:	a901      	add	r1, sp, #4
 8000df2:	220a      	movs	r2, #10
 8000df4:	f001 fcd0 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	6829      	ldr	r1, [r5, #0]
 8000dfc:	686a      	ldr	r2, [r5, #4]
 8000dfe:	a801      	add	r0, sp, #4
 8000e00:	f000 fe18 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000e04:	cd06      	ldmia	r5!, {r1, r2}
 8000e06:	2301      	movs	r3, #1
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <Enter_Page1_Screen4+0x74>)
    if (button == 1)
 8000e0a:	3c01      	subs	r4, #1
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000e0c:	f000 fe12 	bl	8001a34 <ssd1306_WriteString>
    if (button == 1)
 8000e10:	1e60      	subs	r0, r4, #1
 8000e12:	4184      	sbcs	r4, r0
    ssd1306_UpdateScreen();
 8000e14:	f000 fd14 	bl	8001840 <ssd1306_UpdateScreen>

    return xreturn;
 8000e18:	b2e0      	uxtb	r0, r4
    }
 8000e1a:	b005      	add	sp, #20
 8000e1c:	bd30      	pop	{r4, r5, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08003d6d 	.word	0x08003d6d
 8000e28:	08003df3 	.word	0x08003df3

08000e2c <Enter_Page1_Screen>:
uint8_t Enter_Page1_Screen(uint8_t screen, uint8_t button, int16_t count)
    {

    uint8_t xreturn = 0;

    switch (screen)
 8000e2c:	1e43      	subs	r3, r0, #1
    {
 8000e2e:	b510      	push	{r4, lr}
    uint8_t xreturn = 0;
 8000e30:	2000      	movs	r0, #0
    {
 8000e32:	000c      	movs	r4, r1
 8000e34:	0011      	movs	r1, r2
    switch (screen)
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d807      	bhi.n	8000e4a <Enter_Page1_Screen+0x1e>
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f964 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000e40:	0f0b0602 	.word	0x0f0b0602
	{
    case 1:
	xreturn = Enter_Page1_Screen1(button, count);
 8000e44:	0020      	movs	r0, r4
 8000e46:	f7ff fdef 	bl	8000a28 <Enter_Page1_Screen1>
	xreturn = Enter_Page1_Screen4(button, count);
	break;
	}

    return xreturn;
    }
 8000e4a:	bd10      	pop	{r4, pc}
    Menu_Change_Page(2);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fc37 	bl	80006c0 <Menu_Change_Page>
	xreturn = Enter_Page1_Screen2(button, count);
 8000e52:	2000      	movs	r0, #0
	break;
 8000e54:	e7f9      	b.n	8000e4a <Enter_Page1_Screen+0x1e>
	xreturn = Enter_Page1_Screen3(button, count);
 8000e56:	0020      	movs	r0, r4
 8000e58:	f7ff ff70 	bl	8000d3c <Enter_Page1_Screen3>
	break;
 8000e5c:	e7f5      	b.n	8000e4a <Enter_Page1_Screen+0x1e>
	xreturn = Enter_Page1_Screen4(button, count);
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f7ff ffa8 	bl	8000db4 <Enter_Page1_Screen4>
	break;
 8000e64:	e7f1      	b.n	8000e4a <Enter_Page1_Screen+0x1e>
	...

08000e68 <Show_Page2_Comman>:
 */

#include "menu_main.h"

void Show_Page2_Comman()
    {
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];

    ssd1306_Fill(Black);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fcda 	bl	8001824 <ssd1306_Fill>

    ssd1306_SetCursor(0, 5);
 8000e70:	2105      	movs	r1, #5
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 fdf2 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, White);
 8000e78:	4c2b      	ldr	r4, [pc, #172]	; (8000f28 <Show_Page2_Comman+0xc0>)
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6862      	ldr	r2, [r4, #4]
 8000e7e:	6821      	ldr	r1, [r4, #0]
 8000e80:	482a      	ldr	r0, [pc, #168]	; (8000f2c <Show_Page2_Comman+0xc4>)
 8000e82:	f000 fdd7 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000e86:	2114      	movs	r1, #20
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 fde7 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, White);
 8000e8e:	2301      	movs	r3, #1
 8000e90:	6862      	ldr	r2, [r4, #4]
 8000e92:	6821      	ldr	r1, [r4, #0]
 8000e94:	4826      	ldr	r0, [pc, #152]	; (8000f30 <Show_Page2_Comman+0xc8>)
 8000e96:	f000 fdcd 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000e9a:	2114      	movs	r1, #20
 8000e9c:	2050      	movs	r0, #80	; 0x50
 8000e9e:	f000 fddd 	bl	8001a5c <ssd1306_SetCursor>
    if(Get_Auto_Status())
 8000ea2:	f000 fc25 	bl	80016f0 <Get_Auto_Status>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	6821      	ldr	r1, [r4, #0]
 8000eaa:	6862      	ldr	r2, [r4, #4]
    if(Get_Auto_Status())
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d038      	beq.n	8000f22 <Show_Page2_Comman+0xba>
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000eb0:	4820      	ldr	r0, [pc, #128]	; (8000f34 <Show_Page2_Comman+0xcc>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000eb2:	f000 fdbf 	bl	8001a34 <ssd1306_WriteString>
	}


    ssd1306_SetCursor(0, 35);
 8000eb6:	2123      	movs	r1, #35	; 0x23
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 fdcf 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, White);
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	6862      	ldr	r2, [r4, #4]
 8000ec2:	6821      	ldr	r1, [r4, #0]
 8000ec4:	481c      	ldr	r0, [pc, #112]	; (8000f38 <Show_Page2_Comman+0xd0>)
 8000ec6:	f000 fdb5 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000eca:	2123      	movs	r1, #35	; 0x23
 8000ecc:	2050      	movs	r0, #80	; 0x50
 8000ece:	f000 fdc5 	bl	8001a5c <ssd1306_SetCursor>
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000ed2:	f000 fb99 	bl	8001608 <Get_Auto_Pulse_Delay>
 8000ed6:	a901      	add	r1, sp, #4
 8000ed8:	220a      	movs	r2, #10
 8000eda:	f001 fc5d 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000ede:	6862      	ldr	r2, [r4, #4]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	a801      	add	r0, sp, #4
 8000ee6:	f000 fda5 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000eea:	2132      	movs	r1, #50	; 0x32
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 fdb5 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, White);
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	6862      	ldr	r2, [r4, #4]
 8000ef6:	6821      	ldr	r1, [r4, #0]
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <Show_Page2_Comman+0xd4>)
 8000efa:	f000 fd9b 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8000efe:	2132      	movs	r1, #50	; 0x32
 8000f00:	2050      	movs	r0, #80	; 0x50
 8000f02:	f000 fdab 	bl	8001a5c <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000f06:	f000 fb97 	bl	8001638 <Get_Main_Pulse_Duration>
 8000f0a:	a901      	add	r1, sp, #4
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	f001 fc43 	bl	8002798 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000f12:	cc06      	ldmia	r4!, {r1, r2}
 8000f14:	2301      	movs	r3, #1
 8000f16:	a801      	add	r0, sp, #4
 8000f18:	f000 fd8c 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000f1c:	f000 fc90 	bl	8001840 <ssd1306_UpdateScreen>
    }
 8000f20:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <Show_Page2_Comman+0xd8>)
 8000f24:	e7c5      	b.n	8000eb2 <Show_Page2_Comman+0x4a>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	08003d45 	.word	0x08003d45
 8000f30:	08003d39 	.word	0x08003d39
 8000f34:	08003d6a 	.word	0x08003d6a
 8000f38:	08003d55 	.word	0x08003d55
 8000f3c:	08003d5c 	.word	0x08003d5c
 8000f40:	08003d66 	.word	0x08003d66

08000f44 <Show_Page2_Screen1>:

void Show_Page2_Screen1()
    {
 8000f44:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 5);
 8000f46:	2105      	movs	r1, #5
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fd87 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, Black);
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <Show_Page2_Screen1+0x20>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <Show_Page2_Screen1+0x24>)
 8000f56:	6852      	ldr	r2, [r2, #4]
 8000f58:	f000 fd6c 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000f5c:	f000 fc70 	bl	8001840 <ssd1306_UpdateScreen>
    }
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000008 	.word	0x20000008
 8000f68:	08003d45 	.word	0x08003d45

08000f6c <Show_Page2_Screen2>:

void Show_Page2_Screen2()
    {
 8000f6c:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 20);
 8000f6e:	2114      	movs	r1, #20
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 fd73 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, Black);
 8000f76:	4c0c      	ldr	r4, [pc, #48]	; (8000fa8 <Show_Page2_Screen2+0x3c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	6862      	ldr	r2, [r4, #4]
 8000f7c:	6821      	ldr	r1, [r4, #0]
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <Show_Page2_Screen2+0x40>)
 8000f80:	f000 fd58 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000f84:	2114      	movs	r1, #20
 8000f86:	2050      	movs	r0, #80	; 0x50
 8000f88:	f000 fd68 	bl	8001a5c <ssd1306_SetCursor>
    if(Get_Auto_Status())
 8000f8c:	f000 fbb0 	bl	80016f0 <Get_Auto_Status>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000f90:	cc06      	ldmia	r4!, {r1, r2}
 8000f92:	2301      	movs	r3, #1
    if(Get_Auto_Status())
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d005      	beq.n	8000fa4 <Show_Page2_Screen2+0x38>
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <Show_Page2_Screen2+0x44>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000f9a:	f000 fd4b 	bl	8001a34 <ssd1306_WriteString>
	}
    ssd1306_UpdateScreen();
 8000f9e:	f000 fc4f 	bl	8001840 <ssd1306_UpdateScreen>
    }
 8000fa2:	bd10      	pop	{r4, pc}
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <Show_Page2_Screen2+0x48>)
 8000fa6:	e7f8      	b.n	8000f9a <Show_Page2_Screen2+0x2e>
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	08003d39 	.word	0x08003d39
 8000fb0:	08003d6a 	.word	0x08003d6a
 8000fb4:	08003d66 	.word	0x08003d66

08000fb8 <Show_Page2_Screen3>:

void Show_Page2_Screen3()
    {
 8000fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000fba:	f000 fb25 	bl	8001608 <Get_Auto_Pulse_Delay>
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	a901      	add	r1, sp, #4
 8000fc2:	f001 fbe9 	bl	8002798 <itoa>

    ssd1306_SetCursor(0, 35);
 8000fc6:	2123      	movs	r1, #35	; 0x23
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fd47 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, Black);
 8000fce:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <Show_Page2_Screen3+0x3c>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6821      	ldr	r1, [r4, #0]
 8000fd4:	6862      	ldr	r2, [r4, #4]
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <Show_Page2_Screen3+0x40>)
 8000fd8:	f000 fd2c 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000fdc:	2123      	movs	r1, #35	; 0x23
 8000fde:	2050      	movs	r0, #80	; 0x50
 8000fe0:	f000 fd3c 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8000fe4:	cc06      	ldmia	r4!, {r1, r2}
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	a801      	add	r0, sp, #4
 8000fea:	f000 fd23 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000fee:	f000 fc27 	bl	8001840 <ssd1306_UpdateScreen>

    }
 8000ff2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	08003d55 	.word	0x08003d55

08000ffc <Show_Page2_Screen4>:

void Show_Page2_Screen4()
    {
 8000ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000ffe:	f000 fb1b 	bl	8001638 <Get_Main_Pulse_Duration>
 8001002:	220a      	movs	r2, #10
 8001004:	a901      	add	r1, sp, #4
 8001006:	f001 fbc7 	bl	8002798 <itoa>

    ssd1306_SetCursor(0, 50);
 800100a:	2132      	movs	r1, #50	; 0x32
 800100c:	2000      	movs	r0, #0
 800100e:	f000 fd25 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, Black);
 8001012:	4c09      	ldr	r4, [pc, #36]	; (8001038 <Show_Page2_Screen4+0x3c>)
 8001014:	2300      	movs	r3, #0
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	6862      	ldr	r2, [r4, #4]
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <Show_Page2_Screen4+0x40>)
 800101c:	f000 fd0a 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8001020:	2132      	movs	r1, #50	; 0x32
 8001022:	2050      	movs	r0, #80	; 0x50
 8001024:	f000 fd1a 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8001028:	cc06      	ldmia	r4!, {r1, r2}
 800102a:	2300      	movs	r3, #0
 800102c:	a801      	add	r0, sp, #4
 800102e:	f000 fd01 	bl	8001a34 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001032:	f000 fc05 	bl	8001840 <ssd1306_UpdateScreen>
    }
 8001036:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001038:	20000008 	.word	0x20000008
 800103c:	08003d5c 	.word	0x08003d5c

08001040 <Show_Page2>:

void Show_Page2(uint8_t screen)
    {

    switch (screen)
 8001040:	3801      	subs	r0, #1
    {
 8001042:	b510      	push	{r4, lr}
    switch (screen)
 8001044:	2803      	cmp	r0, #3
 8001046:	d807      	bhi.n	8001058 <Show_Page2+0x18>
 8001048:	f7ff f85e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800104c:	110c0702 	.word	0x110c0702
	{
    break;
case 1:
    Show_Page2_Comman();
 8001050:	f7ff ff0a 	bl	8000e68 <Show_Page2_Comman>
    Show_Page2_Screen1();
 8001054:	f7ff ff76 	bl	8000f44 <Show_Page2_Screen1>
case 4:
    Show_Page2_Comman();
    Show_Page2_Screen4();
    break;
    }
}
 8001058:	bd10      	pop	{r4, pc}
    Show_Page2_Comman();
 800105a:	f7ff ff05 	bl	8000e68 <Show_Page2_Comman>
    Show_Page2_Screen2();
 800105e:	f7ff ff85 	bl	8000f6c <Show_Page2_Screen2>
    break;
 8001062:	e7f9      	b.n	8001058 <Show_Page2+0x18>
    Show_Page2_Comman();
 8001064:	f7ff ff00 	bl	8000e68 <Show_Page2_Comman>
    Show_Page2_Screen3();
 8001068:	f7ff ffa6 	bl	8000fb8 <Show_Page2_Screen3>
    break;
 800106c:	e7f4      	b.n	8001058 <Show_Page2+0x18>
    Show_Page2_Comman();
 800106e:	f7ff fefb 	bl	8000e68 <Show_Page2_Comman>
    Show_Page2_Screen4();
 8001072:	f7ff ffc3 	bl	8000ffc <Show_Page2_Screen4>
}
 8001076:	e7ef      	b.n	8001058 <Show_Page2+0x18>

08001078 <Enter_Page2_Screen2>:
Menu_Change_Page(1);
return 0; // execution complete
}

uint8_t Enter_Page2_Screen2(uint8_t button, int16_t count)
{
 8001078:	b510      	push	{r4, lr}

static uint8_t toggle = 0;

if (toggle)
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <Enter_Page2_Screen2+0x28>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	2a00      	cmp	r2, #0
 8001080:	d009      	beq.n	8001096 <Enter_Page2_Screen2+0x1e>
    {
    toggle = 0;
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    Disble_Auto_Welder();
 8001086:	f000 fb1f 	bl	80016c8 <Disble_Auto_Welder>
else
    {
    toggle = 1;
    Enable_Auto_Welder();
    }
Show_Page2_Comman();
 800108a:	f7ff feed 	bl	8000e68 <Show_Page2_Comman>
Show_Page2_Screen2();
 800108e:	f7ff ff6d 	bl	8000f6c <Show_Page2_Screen2>

return 0; // execution complete

}
 8001092:	2000      	movs	r0, #0
 8001094:	bd10      	pop	{r4, pc}
    toggle = 1;
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    Enable_Auto_Welder();
 800109a:	f000 fb1f 	bl	80016dc <Enable_Auto_Welder>
 800109e:	e7f4      	b.n	800108a <Enter_Page2_Screen2+0x12>
 80010a0:	20000069 	.word	0x20000069

080010a4 <Enter_Page2_Screen3>:

uint8_t Enter_Page2_Screen3(uint8_t button, int16_t count)
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	000d      	movs	r5, r1
 80010a8:	0004      	movs	r4, r0

uint8_t xreturn = 1;

Set_Auto_Pulse_Delay(count + Get_Auto_Pulse_Delay());
 80010aa:	f000 faad 	bl	8001608 <Get_Auto_Pulse_Delay>
 80010ae:	1940      	adds	r0, r0, r5
 80010b0:	b200      	sxth	r0, r0

if (button == 1)
 80010b2:	3c01      	subs	r4, #1
Set_Auto_Pulse_Delay(count + Get_Auto_Pulse_Delay());
 80010b4:	f000 fa92 	bl	80015dc <Set_Auto_Pulse_Delay>
if (button == 1)
 80010b8:	1e60      	subs	r0, r4, #1
 80010ba:	4184      	sbcs	r4, r0
    {
    xreturn = 0;
    }

Show_Page2_Screen3();
 80010bc:	f7ff ff7c 	bl	8000fb8 <Show_Page2_Screen3>

return xreturn;
 80010c0:	b2e0      	uxtb	r0, r4

}
 80010c2:	bd70      	pop	{r4, r5, r6, pc}

080010c4 <Enter_Page2_Screen4>:

uint8_t Enter_Page2_Screen4(uint8_t button, int16_t count)
{
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	000d      	movs	r5, r1
 80010c8:	0004      	movs	r4, r0
if (button == 1)
    {
    xreturn = 0;
    }

Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 80010ca:	f000 fab5 	bl	8001638 <Get_Main_Pulse_Duration>
 80010ce:	1940      	adds	r0, r0, r5
 80010d0:	b200      	sxth	r0, r0
if (button == 1)
 80010d2:	3c01      	subs	r4, #1
Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 80010d4:	f000 fa9e 	bl	8001614 <Set_Main_Pulse_Duration>
if (button == 1)
 80010d8:	1e60      	subs	r0, r4, #1
 80010da:	4184      	sbcs	r4, r0

Show_Page2_Screen4();
 80010dc:	f7ff ff8e 	bl	8000ffc <Show_Page2_Screen4>

return xreturn;
 80010e0:	b2e0      	uxtb	r0, r4
}
 80010e2:	bd70      	pop	{r4, r5, r6, pc}

080010e4 <Enter_Page2_Screen>:
uint8_t Enter_Page2_Screen(uint8_t screen, uint8_t button, int16_t count)
{

uint8_t xreturn = 0;

switch (screen)
 80010e4:	1e43      	subs	r3, r0, #1
{
 80010e6:	b510      	push	{r4, lr}
uint8_t xreturn = 0;
 80010e8:	2000      	movs	r0, #0
{
 80010ea:	000c      	movs	r4, r1
 80010ec:	0011      	movs	r1, r2
switch (screen)
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d808      	bhi.n	8001104 <Enter_Page2_Screen+0x20>
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff f808 	bl	8000108 <__gnu_thumb1_case_uqi>
 80010f8:	0f0b0702 	.word	0x0f0b0702
Menu_Change_Page(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fadf 	bl	80006c0 <Menu_Change_Page>
    {
case 1:
    xreturn = Enter_Page2_Screen1(button, count);
 8001102:	2000      	movs	r0, #0
    xreturn = Enter_Page2_Screen4(button, count);
    break;
    }

return xreturn;
}
 8001104:	bd10      	pop	{r4, pc}
    xreturn = Enter_Page2_Screen2(button, count);
 8001106:	0020      	movs	r0, r4
 8001108:	f7ff ffb6 	bl	8001078 <Enter_Page2_Screen2>
    break;
 800110c:	e7fa      	b.n	8001104 <Enter_Page2_Screen+0x20>
    xreturn = Enter_Page2_Screen3(button, count);
 800110e:	0020      	movs	r0, r4
 8001110:	f7ff ffc8 	bl	80010a4 <Enter_Page2_Screen3>
    break;
 8001114:	e7f6      	b.n	8001104 <Enter_Page2_Screen+0x20>
    xreturn = Enter_Page2_Screen4(button, count);
 8001116:	0020      	movs	r0, r4
 8001118:	f7ff ffd4 	bl	80010c4 <Enter_Page2_Screen4>
    break;
 800111c:	e7f2      	b.n	8001104 <Enter_Page2_Screen+0x20>
	...

08001120 <Encoder_Attach>:
static Encoder_Struct_t *Encoder_Struct_PTR_Array[MAX_ENCODERS];

static uint8_t Attached_Encoders = 0;

uint8_t Encoder_Attach(Encoder_Struct_t *Encoder_Struct_PTR)
    {
 8001120:	b570      	push	{r4, r5, r6, lr}
    //init GPIOs as input

    GPIO_InitTypeDef GPIO_InitStruct;

    if (Attached_Encoders < MAX_ENCODERS)
 8001122:	4d28      	ldr	r5, [pc, #160]	; (80011c4 <Encoder_Attach+0xa4>)
    {
 8001124:	0004      	movs	r4, r0
    if (Attached_Encoders < MAX_ENCODERS)
 8001126:	782b      	ldrb	r3, [r5, #0]
    {
 8001128:	b08a      	sub	sp, #40	; 0x28
	return (Attached_Encoders - 1); //return encoder ID
	}
    else
	{
	//Error
	return (255); //return error
 800112a:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Encoders < MAX_ENCODERS)
 800112c:	2b01      	cmp	r3, #1
 800112e:	d846      	bhi.n	80011be <Encoder_Attach+0x9e>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <Encoder_Attach+0xa8>)
 8001134:	0300      	lsls	r0, r0, #12
 8001136:	6959      	ldr	r1, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2600      	movs	r6, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800113a:	4301      	orrs	r1, r0
 800113c:	6159      	str	r1, [r3, #20]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	4002      	ands	r2, r0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001142:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001148:	6959      	ldr	r1, [r3, #20]
 800114a:	0340      	lsls	r0, r0, #13
 800114c:	4301      	orrs	r1, r0
 800114e:	6159      	str	r1, [r3, #20]
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	4002      	ands	r2, r0
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001154:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001156:	9202      	str	r2, [sp, #8]
 8001158:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800115a:	6959      	ldr	r1, [r3, #20]
 800115c:	0280      	lsls	r0, r0, #10
 800115e:	4301      	orrs	r1, r0
 8001160:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001162:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001164:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001166:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001168:	4002      	ands	r2, r0
 800116a:	9203      	str	r2, [sp, #12]
 800116c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800116e:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001170:	6860      	ldr	r0, [r4, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001172:	430a      	orrs	r2, r1
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	695b      	ldr	r3, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	9606      	str	r6, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800117a:	400b      	ands	r3, r1
 800117c:	9304      	str	r3, [sp, #16]
 800117e:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8001180:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001182:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8001184:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 800118a:	f000 ff55 	bl	8002038 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 800118e:	8863      	ldrh	r3, [r4, #2]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8001190:	a905      	add	r1, sp, #20
 8001192:	68a0      	ldr	r0, [r4, #8]
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8001194:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8001196:	f000 ff4f 	bl	8002038 <HAL_GPIO_Init>
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 800119a:	8821      	ldrh	r1, [r4, #0]
	Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
 800119c:	6126      	str	r6, [r4, #16]
	Encoder_Struct_PTR->Encoder_Count = 0;
 800119e:	82a6      	strh	r6, [r4, #20]
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 80011a0:	6860      	ldr	r0, [r4, #4]
 80011a2:	f000 fff9 	bl	8002198 <HAL_GPIO_ReadPin>
	Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 80011a6:	8861      	ldrh	r1, [r4, #2]
	Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 80011a8:	7320      	strb	r0, [r4, #12]
	Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 80011aa:	68a0      	ldr	r0, [r4, #8]
 80011ac:	f000 fff4 	bl	8002198 <HAL_GPIO_ReadPin>
 80011b0:	7360      	strb	r0, [r4, #13]
	Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 80011b2:	7828      	ldrb	r0, [r5, #0]
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <Encoder_Attach+0xac>)
 80011b6:	0082      	lsls	r2, r0, #2
 80011b8:	50d4      	str	r4, [r2, r3]
	Attached_Encoders++;
 80011ba:	1c43      	adds	r3, r0, #1
 80011bc:	702b      	strb	r3, [r5, #0]
	}

    }
 80011be:	b00a      	add	sp, #40	; 0x28
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	2000006a 	.word	0x2000006a
 80011c8:	40021000 	.word	0x40021000
 80011cc:	2000006c 	.word	0x2000006c

080011d0 <Encoder_Scan>:

/* call in millis callback or systick callback */
void Encoder_Scan()
    {
 80011d0:	b570      	push	{r4, r5, r6, lr}

    Encoder_Struct_t *PTR = NULL;

    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 80011d2:	2500      	movs	r5, #0
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <Encoder_Scan+0xb4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	42ab      	cmp	r3, r5
 80011da:	d800      	bhi.n	80011de <Encoder_Scan+0xe>
		PTR->Encoder_Time_Stamp = HAL_GetTick();
		}
	    }
	}

    }
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
	PTR = Encoder_Struct_PTR_Array[Index];
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <Encoder_Scan+0xb8>)
 80011e0:	00aa      	lsls	r2, r5, #2
 80011e2:	58d4      	ldr	r4, [r2, r3]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 80011e4:	8821      	ldrh	r1, [r4, #0]
 80011e6:	6860      	ldr	r0, [r4, #4]
 80011e8:	f000 ffd6 	bl	8002198 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_0__State)
 80011ec:	7b23      	ldrb	r3, [r4, #12]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d013      	beq.n	800121a <Encoder_Scan+0x4a>
	    PTR->Encoder_Pin_0__State = !PTR->Encoder_Pin_0__State;
 80011f2:	425a      	negs	r2, r3
 80011f4:	415a      	adcs	r2, r3
 80011f6:	7322      	strb	r2, [r4, #12]
	    if (PTR->Encoder_Pin_0__State && !PTR->Encoder_Pin_1__State)
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10e      	bne.n	800121a <Encoder_Scan+0x4a>
 80011fc:	7b63      	ldrb	r3, [r4, #13]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10b      	bne.n	800121a <Encoder_Scan+0x4a>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 8001202:	f000 fcbf 	bl	8001b84 <HAL_GetTick>
 8001206:	6923      	ldr	r3, [r4, #16]
 8001208:	1ac0      	subs	r0, r0, r3
 800120a:	280a      	cmp	r0, #10
 800120c:	d923      	bls.n	8001256 <Encoder_Scan+0x86>
		    PTR->Encoder_Count += 1;
 800120e:	8aa3      	ldrh	r3, [r4, #20]
 8001210:	3301      	adds	r3, #1
		    PTR->Encoder_Count += 50;
 8001212:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 8001214:	f000 fcb6 	bl	8001b84 <HAL_GetTick>
 8001218:	6120      	str	r0, [r4, #16]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 800121a:	8861      	ldrh	r1, [r4, #2]
 800121c:	68a0      	ldr	r0, [r4, #8]
 800121e:	f000 ffbb 	bl	8002198 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_1__State)
 8001222:	7b63      	ldrb	r3, [r4, #13]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 8001224:	4298      	cmp	r0, r3
 8001226:	d013      	beq.n	8001250 <Encoder_Scan+0x80>
	    PTR->Encoder_Pin_1__State = !PTR->Encoder_Pin_1__State;
 8001228:	425a      	negs	r2, r3
 800122a:	415a      	adcs	r2, r3
 800122c:	7362      	strb	r2, [r4, #13]
	    if (PTR->Encoder_Pin_1__State && !PTR->Encoder_Pin_0__State)
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10e      	bne.n	8001250 <Encoder_Scan+0x80>
 8001232:	7b23      	ldrb	r3, [r4, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <Encoder_Scan+0x80>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 8001238:	f000 fca4 	bl	8001b84 <HAL_GetTick>
 800123c:	6923      	ldr	r3, [r4, #16]
 800123e:	1ac0      	subs	r0, r0, r3
 8001240:	280a      	cmp	r0, #10
 8001242:	d913      	bls.n	800126c <Encoder_Scan+0x9c>
		    PTR->Encoder_Count -= 1;
 8001244:	8aa3      	ldrh	r3, [r4, #20]
 8001246:	3b01      	subs	r3, #1
		    PTR->Encoder_Count -= 50;
 8001248:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 800124a:	f000 fc9b 	bl	8001b84 <HAL_GetTick>
 800124e:	6120      	str	r0, [r4, #16]
    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8001250:	3501      	adds	r5, #1
 8001252:	b2ed      	uxtb	r5, r5
 8001254:	e7be      	b.n	80011d4 <Encoder_Scan+0x4>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 8001256:	f000 fc95 	bl	8001b84 <HAL_GetTick>
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	8aa3      	ldrh	r3, [r4, #20]
 8001260:	2805      	cmp	r0, #5
 8001262:	d901      	bls.n	8001268 <Encoder_Scan+0x98>
		    PTR->Encoder_Count += 10;
 8001264:	330a      	adds	r3, #10
 8001266:	e7d4      	b.n	8001212 <Encoder_Scan+0x42>
		    PTR->Encoder_Count += 50;
 8001268:	3332      	adds	r3, #50	; 0x32
 800126a:	e7d2      	b.n	8001212 <Encoder_Scan+0x42>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 800126c:	f000 fc8a 	bl	8001b84 <HAL_GetTick>
 8001270:	6923      	ldr	r3, [r4, #16]
 8001272:	1ac0      	subs	r0, r0, r3
 8001274:	8aa3      	ldrh	r3, [r4, #20]
 8001276:	2805      	cmp	r0, #5
 8001278:	d901      	bls.n	800127e <Encoder_Scan+0xae>
		    PTR->Encoder_Count -= 10;
 800127a:	3b0a      	subs	r3, #10
 800127c:	e7e4      	b.n	8001248 <Encoder_Scan+0x78>
		    PTR->Encoder_Count -= 50;
 800127e:	3b32      	subs	r3, #50	; 0x32
 8001280:	e7e2      	b.n	8001248 <Encoder_Scan+0x78>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	2000006a 	.word	0x2000006a
 8001288:	2000006c 	.word	0x2000006c

0800128c <Encoder_Get_Count>:

int16_t Encoder_Get_Count(Encoder_Struct_t *PTR)
    {
 800128c:	1e03      	subs	r3, r0, #0

    if (PTR != NULL)
 800128e:	d001      	beq.n	8001294 <Encoder_Get_Count+0x8>
	{
	return PTR->Encoder_Count;
 8001290:	2014      	movs	r0, #20
 8001292:	5e18      	ldrsh	r0, [r3, r0]
    else
	{
	//Error
	return 0;
	}
    }
 8001294:	4770      	bx	lr

08001296 <Encoder_Reset_Count>:

/* to reset*/
void Encoder_Reset_Count(Encoder_Struct_t *PTR)
    {

    if (PTR != NULL)
 8001296:	2800      	cmp	r0, #0
 8001298:	d001      	beq.n	800129e <Encoder_Reset_Count+0x8>
	{
	PTR->Encoder_Count = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	8283      	strh	r3, [r0, #20]
	}
    else
	{
	//Error
	}
    }
 800129e:	4770      	bx	lr

080012a0 <Soft_I2C_SDA_High>:
#include "soft_i2c.h"
#include "delay_us.h"


void Soft_I2C_SDA_High(Soft_I2C_t* i2c_handle)
    {
 80012a0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80012a2:	2201      	movs	r2, #1
 80012a4:	8981      	ldrh	r1, [r0, #12]
 80012a6:	6880      	ldr	r0, [r0, #8]
 80012a8:	f000 ff7c 	bl	80021a4 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 80012ac:	bd10      	pop	{r4, pc}

080012ae <Soft_I2C_SDA_Low>:

void Soft_I2C_SDA_Low(Soft_I2C_t* i2c_handle)
    {
 80012ae:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80012b0:	2200      	movs	r2, #0
 80012b2:	8981      	ldrh	r1, [r0, #12]
 80012b4:	6880      	ldr	r0, [r0, #8]
 80012b6:	f000 ff75 	bl	80021a4 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 80012ba:	bd10      	pop	{r4, pc}

080012bc <Soft_I2C_SDA_Read>:

uint8_t Soft_I2C_SDA_Read(Soft_I2C_t* i2c_handle)
    {
 80012bc:	b510      	push	{r4, lr}
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 80012be:	8981      	ldrh	r1, [r0, #12]
 80012c0:	6880      	ldr	r0, [r0, #8]
 80012c2:	f000 ff69 	bl	8002198 <HAL_GPIO_ReadPin>
    }
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <Soft_I2C_SCL_High>:

void Soft_I2C_SCL_High(Soft_I2C_t* i2c_handle)
    {
 80012c8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80012ca:	2201      	movs	r2, #1
 80012cc:	8881      	ldrh	r1, [r0, #4]
 80012ce:	6800      	ldr	r0, [r0, #0]
 80012d0:	f000 ff68 	bl	80021a4 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 80012d4:	bd10      	pop	{r4, pc}

080012d6 <Soft_I2C_SCL_Low>:

void Soft_I2C_SCL_Low(Soft_I2C_t* i2c_handle)
    {
 80012d6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80012d8:	2200      	movs	r2, #0
 80012da:	8881      	ldrh	r1, [r0, #4]
 80012dc:	6800      	ldr	r0, [r0, #0]
 80012de:	f000 ff61 	bl	80021a4 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <Soft_I2C_Init>:
    {
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin);
    }

void Soft_I2C_Init(Soft_I2C_t* i2c_handle)
    {
 80012e4:	b510      	push	{r4, lr}
 80012e6:	0004      	movs	r4, r0

    GPIO_InitTypeDef GPIO_Init;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 80012e8:	2080      	movs	r0, #128	; 0x80
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <Soft_I2C_Init+0x84>)
 80012ec:	0300      	lsls	r0, r0, #12
 80012ee:	6959      	ldr	r1, [r3, #20]
    {
 80012f0:	b08a      	sub	sp, #40	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE()
 80012f2:	4301      	orrs	r1, r0
 80012f4:	6159      	str	r1, [r3, #20]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOD_CLK_ENABLE()
 80012fa:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE()
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8001300:	6959      	ldr	r1, [r3, #20]
 8001302:	0340      	lsls	r0, r0, #13
 8001304:	4301      	orrs	r1, r0
 8001306:	6159      	str	r1, [r3, #20]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800130c:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE()
 800130e:	9202      	str	r2, [sp, #8]
 8001310:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8001312:	6959      	ldr	r1, [r3, #20]
 8001314:	0280      	lsls	r0, r0, #10
 8001316:	4301      	orrs	r1, r0
 8001318:	6159      	str	r1, [r3, #20]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
 800131a:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800131c:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 800131e:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8001320:	4002      	ands	r2, r0
 8001322:	9203      	str	r2, [sp, #12]
 8001324:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8001326:	695a      	ldr	r2, [r3, #20]
    ;
    Soft_I2C_SDA_High(i2c_handle);
 8001328:	0020      	movs	r0, r4
    __HAL_RCC_GPIOB_CLK_ENABLE()
 800132a:	430a      	orrs	r2, r1
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	400b      	ands	r3, r1
 8001332:	9304      	str	r3, [sp, #16]
 8001334:	9b04      	ldr	r3, [sp, #16]
    Soft_I2C_SDA_High(i2c_handle);
 8001336:	f7ff ffb3 	bl	80012a0 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 800133a:	0020      	movs	r0, r4
 800133c:	f7ff ffc4 	bl	80012c8 <Soft_I2C_SCL_High>

    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
 8001340:	2311      	movs	r3, #17
 8001342:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull  = GPIO_PULLUP;
 8001344:	3b10      	subs	r3, #16
 8001346:	9307      	str	r3, [sp, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001348:	9308      	str	r3, [sp, #32]

    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 800134a:	89a3      	ldrh	r3, [r4, #12]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 800134c:	a905      	add	r1, sp, #20
 800134e:	68a0      	ldr	r0, [r4, #8]
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 8001350:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 8001352:	f000 fe71 	bl	8002038 <HAL_GPIO_Init>

    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 8001356:	88a3      	ldrh	r3, [r4, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 8001358:	a905      	add	r1, sp, #20
 800135a:	6820      	ldr	r0, [r4, #0]
    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 800135c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 800135e:	f000 fe6b 	bl	8002038 <HAL_GPIO_Init>
    }
 8001362:	b00a      	add	sp, #40	; 0x28
 8001364:	bd10      	pop	{r4, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000

0800136c <Soft_I2C_Start>:


/*generate start condition */

uint8_t Soft_I2C_Start(Soft_I2C_t* i2c_handle)
    {
 800136c:	b510      	push	{r4, lr}
 800136e:	0004      	movs	r4, r0

    Soft_I2C_SCL_High(i2c_handle);
 8001370:	f7ff ffaa 	bl	80012c8 <Soft_I2C_SCL_High>
    Soft_I2C_SDA_Low(i2c_handle);
 8001374:	0020      	movs	r0, r4
 8001376:	f7ff ff9a 	bl	80012ae <Soft_I2C_SDA_Low>
    asm("nop");
 800137a:	46c0      	nop			; (mov r8, r8)

    Soft_I2C_Delay();

    if (Soft_I2C_SDA_Read(i2c_handle))
 800137c:	0020      	movs	r0, r4
 800137e:	f7ff ff9d 	bl	80012bc <Soft_I2C_SDA_Read>
 8001382:	1e43      	subs	r3, r0, #1
 8001384:	4198      	sbcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}

    return SOFT_I2C_OK;
    }
 8001386:	b2c0      	uxtb	r0, r0
 8001388:	bd10      	pop	{r4, pc}

0800138a <Soft_I2C_Stop>:

/*generate stop condition */

void Soft_I2C_Stop(Soft_I2C_t* i2c_handle)
    {
 800138a:	b510      	push	{r4, lr}
 800138c:	0004      	movs	r4, r0
    Soft_I2C_SCL_Low(i2c_handle);
 800138e:	f7ff ffa2 	bl	80012d6 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 8001392:	0020      	movs	r0, r4
 8001394:	f7ff ff8b 	bl	80012ae <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 8001398:	0020      	movs	r0, r4
 800139a:	f7ff ff95 	bl	80012c8 <Soft_I2C_SCL_High>
    asm("nop");
 800139e:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SDA_High(i2c_handle);
 80013a0:	0020      	movs	r0, r4
 80013a2:	f7ff ff7d 	bl	80012a0 <Soft_I2C_SDA_High>
    }
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <Soft_I2C_Wait_ACK>:

uint8_t Soft_I2C_Wait_ACK(Soft_I2C_t* i2c_handle)
    {
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	0004      	movs	r4, r0

    uint16_t timeOut = 5000;

    Soft_I2C_SCL_Low(i2c_handle);
 80013ac:	f7ff ff93 	bl	80012d6 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 80013b0:	0020      	movs	r0, r4
 80013b2:	f7ff ff75 	bl	80012a0 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 80013b6:	0020      	movs	r0, r4
 80013b8:	f7ff ff86 	bl	80012c8 <Soft_I2C_SCL_High>
    asm("nop");
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	4d0a      	ldr	r5, [pc, #40]	; (80013e8 <Soft_I2C_Wait_ACK+0x40>)
    Soft_I2C_Delay();

    while (Soft_I2C_SDA_Read(i2c_handle))
 80013c0:	0020      	movs	r0, r4
 80013c2:	f7ff ff7b 	bl	80012bc <Soft_I2C_SDA_Read>
 80013c6:	1e06      	subs	r6, r0, #0
 80013c8:	d103      	bne.n	80013d2 <Soft_I2C_Wait_ACK+0x2a>
	    Soft_I2C_Stop(i2c_handle);
	    return SOFT_I2C_ERR;
	    }
	}

    Soft_I2C_SCL_Low(i2c_handle);
 80013ca:	0020      	movs	r0, r4
 80013cc:	f7ff ff83 	bl	80012d6 <Soft_I2C_SCL_Low>

    return SOFT_I2C_OK;
 80013d0:	e007      	b.n	80013e2 <Soft_I2C_Wait_ACK+0x3a>
 80013d2:	3d01      	subs	r5, #1
 80013d4:	b2ad      	uxth	r5, r5
	if (timeOut == 0)
 80013d6:	2d00      	cmp	r5, #0
 80013d8:	d1f2      	bne.n	80013c0 <Soft_I2C_Wait_ACK+0x18>
	    Soft_I2C_Stop(i2c_handle);
 80013da:	0020      	movs	r0, r4
 80013dc:	f7ff ffd5 	bl	800138a <Soft_I2C_Stop>
	    return SOFT_I2C_ERR;
 80013e0:	2601      	movs	r6, #1

    }
 80013e2:	0030      	movs	r0, r6
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	00001388 	.word	0x00001388

080013ec <Soft_I2C_ACK>:

void Soft_I2C_ACK(Soft_I2C_t* i2c_handle)
    {
 80013ec:	b510      	push	{r4, lr}
 80013ee:	0004      	movs	r4, r0

    Soft_I2C_SCL_Low(i2c_handle);
 80013f0:	f7ff ff71 	bl	80012d6 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 80013f4:	0020      	movs	r0, r4
 80013f6:	f7ff ff5a 	bl	80012ae <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 80013fa:	0020      	movs	r0, r4
 80013fc:	f7ff ff64 	bl	80012c8 <Soft_I2C_SCL_High>
    asm("nop");
 8001400:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff ff67 	bl	80012d6 <Soft_I2C_SCL_Low>
    asm("nop");
 8001408:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();

    }
 800140a:	bd10      	pop	{r4, pc}

0800140c <Soft_I2C_NACK>:

void Soft_I2C_NACK(Soft_I2C_t* i2c_handle)
    {
 800140c:	b510      	push	{r4, lr}
 800140e:	0004      	movs	r4, r0

    Soft_I2C_SCL_Low(i2c_handle);
 8001410:	f7ff ff61 	bl	80012d6 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 8001414:	0020      	movs	r0, r4
 8001416:	f7ff ff43 	bl	80012a0 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 800141a:	0020      	movs	r0, r4
 800141c:	f7ff ff54 	bl	80012c8 <Soft_I2C_SCL_High>
    asm("nop");
 8001420:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
 8001422:	0020      	movs	r0, r4
 8001424:	f7ff ff57 	bl	80012d6 <Soft_I2C_SCL_Low>
    asm("nop");
 8001428:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();

    }
 800142a:	bd10      	pop	{r4, pc}

0800142c <Soft_I2C_Send_Byte>:

uint8_t Soft_I2C_Send_Byte(Soft_I2C_t* i2c_handle, uint8_t byte)
    {
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	0004      	movs	r4, r0
 8001430:	000e      	movs	r6, r1

    uint8_t count = 8;

    Soft_I2C_SCL_Low(i2c_handle);

    while (count--)
 8001432:	2509      	movs	r5, #9
    Soft_I2C_SCL_Low(i2c_handle);
 8001434:	f7ff ff4f 	bl	80012d6 <Soft_I2C_SCL_Low>
 8001438:	3d01      	subs	r5, #1
 800143a:	b2ed      	uxtb	r5, r5
    while (count--)
 800143c:	2d00      	cmp	r5, #0
 800143e:	d107      	bne.n	8001450 <Soft_I2C_Send_Byte+0x24>
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	Soft_I2C_SCL_Low(i2c_handle);
	Soft_I2C_Delay();
	}
    if (Soft_I2C_Wait_ACK(i2c_handle) == SOFT_I2C_ERR)
 8001440:	0020      	movs	r0, r4
 8001442:	f7ff ffb1 	bl	80013a8 <Soft_I2C_Wait_ACK>
 8001446:	3801      	subs	r0, #1
 8001448:	4243      	negs	r3, r0
 800144a:	4158      	adcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}
    return SOFT_I2C_OK;
    }
 800144c:	b2c0      	uxtb	r0, r0
 800144e:	bd70      	pop	{r4, r5, r6, pc}
	if (byte & 0x80)
 8001450:	b273      	sxtb	r3, r6
	    Soft_I2C_SDA_High(i2c_handle);
 8001452:	0020      	movs	r0, r4
	if (byte & 0x80)
 8001454:	2b00      	cmp	r3, #0
 8001456:	da0c      	bge.n	8001472 <Soft_I2C_Send_Byte+0x46>
	    Soft_I2C_SDA_High(i2c_handle);
 8001458:	f7ff ff22 	bl	80012a0 <Soft_I2C_SDA_High>
	Soft_I2C_SCL_High(i2c_handle);
 800145c:	0020      	movs	r0, r4
	byte <<= 1;
 800145e:	0076      	lsls	r6, r6, #1
	Soft_I2C_SCL_High(i2c_handle);
 8001460:	f7ff ff32 	bl	80012c8 <Soft_I2C_SCL_High>
	byte <<= 1;
 8001464:	b2f6      	uxtb	r6, r6
    asm("nop");
 8001466:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_Low(i2c_handle);
 8001468:	0020      	movs	r0, r4
 800146a:	f7ff ff34 	bl	80012d6 <Soft_I2C_SCL_Low>
    asm("nop");
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	e7e2      	b.n	8001438 <Soft_I2C_Send_Byte+0xc>
	    Soft_I2C_SDA_Low(i2c_handle);
 8001472:	f7ff ff1c 	bl	80012ae <Soft_I2C_SDA_Low>
 8001476:	e7f1      	b.n	800145c <Soft_I2C_Send_Byte+0x30>

08001478 <Soft_I2C_Receive_Byte>:

uint8_t Soft_I2C_Receive_Byte(Soft_I2C_t* i2c_handle)
    {
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	0005      	movs	r5, r0

    uint8_t i = 8;
    uint8_t ReceivedByte = 0;

    Soft_I2C_SDA_High(i2c_handle);
    while (i--)
 800147c:	2609      	movs	r6, #9
    Soft_I2C_SDA_High(i2c_handle);
 800147e:	f7ff ff0f 	bl	80012a0 <Soft_I2C_SDA_High>
    uint8_t ReceivedByte = 0;
 8001482:	2400      	movs	r4, #0
	Soft_I2C_Delay();
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	if (Soft_I2C_SDA_Read(i2c_handle))
	    {
	    ReceivedByte |= 0x01;
 8001484:	2701      	movs	r7, #1
 8001486:	3e01      	subs	r6, #1
 8001488:	b2f6      	uxtb	r6, r6
    while (i--)
 800148a:	2e00      	cmp	r6, #0
 800148c:	d104      	bne.n	8001498 <Soft_I2C_Receive_Byte+0x20>
	    }
	}
    Soft_I2C_SCL_Low(i2c_handle);
 800148e:	0028      	movs	r0, r5
 8001490:	f7ff ff21 	bl	80012d6 <Soft_I2C_SCL_Low>
    return ReceivedByte;

    }
 8001494:	0020      	movs	r0, r4
 8001496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Soft_I2C_SCL_Low(i2c_handle);
 8001498:	0028      	movs	r0, r5
	ReceivedByte <<= 1;
 800149a:	0064      	lsls	r4, r4, #1
	Soft_I2C_SCL_Low(i2c_handle);
 800149c:	f7ff ff1b 	bl	80012d6 <Soft_I2C_SCL_Low>
	ReceivedByte <<= 1;
 80014a0:	b2e4      	uxtb	r4, r4
    asm("nop");
 80014a2:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_High(i2c_handle);
 80014a4:	0028      	movs	r0, r5
 80014a6:	f7ff ff0f 	bl	80012c8 <Soft_I2C_SCL_High>
    asm("nop");
 80014aa:	46c0      	nop			; (mov r8, r8)
	if (Soft_I2C_SDA_Read(i2c_handle))
 80014ac:	0028      	movs	r0, r5
 80014ae:	f7ff ff05 	bl	80012bc <Soft_I2C_SDA_Read>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d0e7      	beq.n	8001486 <Soft_I2C_Receive_Byte+0xe>
	    ReceivedByte |= 0x01;
 80014b6:	433c      	orrs	r4, r7
 80014b8:	e7e5      	b.n	8001486 <Soft_I2C_Receive_Byte+0xe>

080014ba <Soft_I2C_Write_Byte>:

uint8_t Soft_I2C_Write_Byte(Soft_I2C_t* i2c_handle,
	                    uint8_t     slave_address,
	                    uint8_t     register_address,
			    uint8_t     *byte)
    {
 80014ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014bc:	0004      	movs	r4, r0
 80014be:	9101      	str	r1, [sp, #4]
 80014c0:	0017      	movs	r7, r2
 80014c2:	001e      	movs	r6, r3

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 80014c4:	f7ff ff52 	bl	800136c <Soft_I2C_Start>
 80014c8:	0005      	movs	r5, r0
 80014ca:	2801      	cmp	r0, #1
 80014cc:	d104      	bne.n	80014d8 <Soft_I2C_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(i2c_handle);
 80014ce:	0020      	movs	r0, r4
 80014d0:	f7ff ff5b 	bl	800138a <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 80014d4:	0028      	movs	r0, r5
 80014d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80014d8:	9901      	ldr	r1, [sp, #4]
 80014da:	0020      	movs	r0, r4
 80014dc:	f7ff ffa6 	bl	800142c <Soft_I2C_Send_Byte>
 80014e0:	2801      	cmp	r0, #1
 80014e2:	d101      	bne.n	80014e8 <Soft_I2C_Write_Byte+0x2e>
	return SOFT_I2C_ERR;
 80014e4:	2501      	movs	r5, #1
 80014e6:	e7f5      	b.n	80014d4 <Soft_I2C_Write_Byte+0x1a>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 80014e8:	0039      	movs	r1, r7
 80014ea:	0020      	movs	r0, r4
 80014ec:	f7ff ff9e 	bl	800142c <Soft_I2C_Send_Byte>
 80014f0:	2801      	cmp	r0, #1
 80014f2:	d0f7      	beq.n	80014e4 <Soft_I2C_Write_Byte+0x2a>
    if (byte)
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	d104      	bne.n	8001502 <Soft_I2C_Write_Byte+0x48>
    Soft_I2C_Stop(i2c_handle);
 80014f8:	0020      	movs	r0, r4
 80014fa:	f7ff ff46 	bl	800138a <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 80014fe:	2500      	movs	r5, #0
 8001500:	e7e8      	b.n	80014d4 <Soft_I2C_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(i2c_handle, *byte) == SOFT_I2C_ERR)
 8001502:	7831      	ldrb	r1, [r6, #0]
 8001504:	0020      	movs	r0, r4
 8001506:	f7ff ff91 	bl	800142c <Soft_I2C_Send_Byte>
 800150a:	2801      	cmp	r0, #1
 800150c:	d1f4      	bne.n	80014f8 <Soft_I2C_Write_Byte+0x3e>
 800150e:	e7e9      	b.n	80014e4 <Soft_I2C_Write_Byte+0x2a>

08001510 <Soft_I2C_Write_Bytes>:
uint8_t Soft_I2C_Write_Bytes(Soft_I2C_t* i2c_handle,
	                     uint8_t     slave_address,
	                     uint8_t     register_address,
			     uint8_t     *buf,
			     uint8_t     num)
    {
 8001510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	ab08      	add	r3, sp, #32
 8001516:	0004      	movs	r4, r0
 8001518:	000f      	movs	r7, r1
 800151a:	9200      	str	r2, [sp, #0]
 800151c:	781e      	ldrb	r6, [r3, #0]

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 800151e:	f7ff ff25 	bl	800136c <Soft_I2C_Start>
 8001522:	0005      	movs	r5, r0
 8001524:	2801      	cmp	r0, #1
 8001526:	d104      	bne.n	8001532 <Soft_I2C_Write_Bytes+0x22>
	{
	Soft_I2C_Stop(i2c_handle);
 8001528:	0020      	movs	r0, r4
 800152a:	f7ff ff2e 	bl	800138a <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 800152e:	0028      	movs	r0, r5
 8001530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 8001532:	0039      	movs	r1, r7
 8001534:	0020      	movs	r0, r4
 8001536:	f7ff ff79 	bl	800142c <Soft_I2C_Send_Byte>
 800153a:	2801      	cmp	r0, #1
 800153c:	d101      	bne.n	8001542 <Soft_I2C_Write_Bytes+0x32>
	return SOFT_I2C_ERR;
 800153e:	2501      	movs	r5, #1
 8001540:	e7f5      	b.n	800152e <Soft_I2C_Write_Bytes+0x1e>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 8001542:	9900      	ldr	r1, [sp, #0]
 8001544:	0020      	movs	r0, r4
 8001546:	f7ff ff71 	bl	800142c <Soft_I2C_Send_Byte>
 800154a:	2801      	cmp	r0, #1
 800154c:	d0f7      	beq.n	800153e <Soft_I2C_Write_Bytes+0x2e>
 800154e:	9d01      	ldr	r5, [sp, #4]
 8001550:	19ae      	adds	r6, r5, r6
    while (num--)
 8001552:	42b5      	cmp	r5, r6
 8001554:	d104      	bne.n	8001560 <Soft_I2C_Write_Bytes+0x50>
    Soft_I2C_Stop(i2c_handle);
 8001556:	0020      	movs	r0, r4
 8001558:	f7ff ff17 	bl	800138a <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 800155c:	2500      	movs	r5, #0
 800155e:	e7e6      	b.n	800152e <Soft_I2C_Write_Bytes+0x1e>
	if (Soft_I2C_Send_Byte(i2c_handle, *buf++) == SOFT_I2C_ERR)
 8001560:	7829      	ldrb	r1, [r5, #0]
 8001562:	0020      	movs	r0, r4
 8001564:	f7ff ff62 	bl	800142c <Soft_I2C_Send_Byte>
 8001568:	3501      	adds	r5, #1
 800156a:	2801      	cmp	r0, #1
 800156c:	d1f1      	bne.n	8001552 <Soft_I2C_Write_Bytes+0x42>
 800156e:	e7e6      	b.n	800153e <Soft_I2C_Write_Bytes+0x2e>

08001570 <Foot_Switch_Callback>:
    {

    if(Clicked_Count == 1)
	{
	}
    }
 8001570:	4770      	bx	lr

08001572 <Auto_Pulse_In_Callback>:
 8001572:	4770      	bx	lr

08001574 <Update_Data_In_EEPROM>:
    {
 8001574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (HAL_GetTick() - Update_Time_Stamp > (5000 - 1))
 8001576:	f000 fb05 	bl	8001b84 <HAL_GetTick>
 800157a:	4c10      	ldr	r4, [pc, #64]	; (80015bc <Update_Data_In_EEPROM+0x48>)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	1ac0      	subs	r0, r0, r3
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <Update_Data_In_EEPROM+0x4c>)
 8001582:	4298      	cmp	r0, r3
 8001584:	d918      	bls.n	80015b8 <Update_Data_In_EEPROM+0x44>
	uint8_t *data = (uint8_t*) Welder_Data_Handle;
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <Update_Data_In_EEPROM+0x50>)
	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Dtata));
 8001588:	ad01      	add	r5, sp, #4
	uint8_t *data = (uint8_t*) Welder_Data_Handle;
 800158a:	681e      	ldr	r6, [r3, #0]
	Update_Time_Stamp = HAL_GetTick();
 800158c:	f000 fafa 	bl	8001b84 <HAL_GetTick>
	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Dtata));
 8001590:	220a      	movs	r2, #10
	Update_Time_Stamp = HAL_GetTick();
 8001592:	6020      	str	r0, [r4, #0]
	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Dtata));
 8001594:	0029      	movs	r1, r5
 8001596:	2000      	movs	r0, #0
 8001598:	f7fe fee2 	bl	8000360 <AT24CXX_Read_Buffer>
 800159c:	2400      	movs	r4, #0
	    if (cmp_buffer[i] != data[i])
 800159e:	5d31      	ldrb	r1, [r6, r4]
 80015a0:	5d2b      	ldrb	r3, [r5, r4]
 80015a2:	428b      	cmp	r3, r1
 80015a4:	d002      	beq.n	80015ac <Update_Data_In_EEPROM+0x38>
		AT24CXX_Write_Byte(i, data[i]);
 80015a6:	b2a0      	uxth	r0, r4
 80015a8:	f7fe feaa 	bl	8000300 <AT24CXX_Write_Byte>
 80015ac:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < sizeof(Welder_Dtata); i++)
 80015ae:	2c0a      	cmp	r4, #10
 80015b0:	d1f5      	bne.n	800159e <Update_Data_In_EEPROM+0x2a>
	HAL_Delay(AT24CXX_WRITE_DELAY);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f000 faec 	bl	8001b90 <HAL_Delay>
    }
 80015b8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000074 	.word	0x20000074
 80015c0:	00001387 	.word	0x00001387
 80015c4:	20000014 	.word	0x20000014

080015c8 <Read_Data_From_EEPROM>:
    {
 80015c8:	b510      	push	{r4, lr}
    AT24CXX_Read_Buffer(0x00, (uint8_t*)Welder_Data_Handle, sizeof(Welder_Dtata));
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <Read_Data_From_EEPROM+0x10>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7fe fec5 	bl	8000360 <AT24CXX_Read_Buffer>
    }
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	20000014 	.word	0x20000014

080015dc <Set_Auto_Pulse_Delay>:
    {
 80015dc:	4a08      	ldr	r2, [pc, #32]	; (8001600 <Set_Auto_Pulse_Delay+0x24>)
 80015de:	b510      	push	{r4, lr}
 80015e0:	1c03      	adds	r3, r0, #0
 80015e2:	4290      	cmp	r0, r2
 80015e4:	dd00      	ble.n	80015e8 <Set_Auto_Pulse_Delay+0xc>
 80015e6:	1c13      	adds	r3, r2, #0
    Welder_Data_Handle->Auto_Pulse_Delay = delay;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <Set_Auto_Pulse_Delay+0x28>)
 80015ea:	b218      	sxth	r0, r3
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	22fa      	movs	r2, #250	; 0xfa
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	4290      	cmp	r0, r2
 80015f4:	da00      	bge.n	80015f8 <Set_Auto_Pulse_Delay+0x1c>
 80015f6:	1c13      	adds	r3, r2, #0
 80015f8:	80cb      	strh	r3, [r1, #6]
    Update_Data_In_EEPROM();
 80015fa:	f7ff ffbb 	bl	8001574 <Update_Data_In_EEPROM>
    }
 80015fe:	bd10      	pop	{r4, pc}
 8001600:	00002710 	.word	0x00002710
 8001604:	20000014 	.word	0x20000014

08001608 <Get_Auto_Pulse_Delay>:
    return Welder_Data_Handle->Auto_Pulse_Delay;
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <Get_Auto_Pulse_Delay+0x8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	88d8      	ldrh	r0, [r3, #6]
    }
 800160e:	4770      	bx	lr
 8001610:	20000014 	.word	0x20000014

08001614 <Set_Main_Pulse_Duration>:
    {
 8001614:	b510      	push	{r4, lr}
 8001616:	1c03      	adds	r3, r0, #0
 8001618:	2832      	cmp	r0, #50	; 0x32
 800161a:	dd00      	ble.n	800161e <Set_Main_Pulse_Duration+0xa>
 800161c:	2332      	movs	r3, #50	; 0x32
    Welder_Data_Handle->Main_Pulse_Duration = duration;
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <Set_Main_Pulse_Duration+0x20>)
 8001620:	b219      	sxth	r1, r3
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	2903      	cmp	r1, #3
 8001626:	da00      	bge.n	800162a <Set_Main_Pulse_Duration+0x16>
 8001628:	2303      	movs	r3, #3
 800162a:	8053      	strh	r3, [r2, #2]
    Update_Data_In_EEPROM();
 800162c:	f7ff ffa2 	bl	8001574 <Update_Data_In_EEPROM>
    }
 8001630:	bd10      	pop	{r4, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	20000014 	.word	0x20000014

08001638 <Get_Main_Pulse_Duration>:
    return Welder_Data_Handle->Main_Pulse_Duration;
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <Get_Main_Pulse_Duration+0x8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	8858      	ldrh	r0, [r3, #2]
    }
 800163e:	4770      	bx	lr
 8001640:	20000014 	.word	0x20000014

08001644 <Set_Short_Pulse_Duration>:
    {
 8001644:	b510      	push	{r4, lr}
 8001646:	1c03      	adds	r3, r0, #0
 8001648:	2814      	cmp	r0, #20
 800164a:	dd00      	ble.n	800164e <Set_Short_Pulse_Duration+0xa>
 800164c:	2314      	movs	r3, #20
    Welder_Data_Handle->Short_Pulse_Duration = duration;
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <Set_Short_Pulse_Duration+0x20>)
 8001650:	b219      	sxth	r1, r3
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	2902      	cmp	r1, #2
 8001656:	da00      	bge.n	800165a <Set_Short_Pulse_Duration+0x16>
 8001658:	2302      	movs	r3, #2
 800165a:	8093      	strh	r3, [r2, #4]
    Update_Data_In_EEPROM();
 800165c:	f7ff ff8a 	bl	8001574 <Update_Data_In_EEPROM>
    }
 8001660:	bd10      	pop	{r4, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000014 	.word	0x20000014

08001668 <Get_Short_Pulse_Duration>:
    return Welder_Data_Handle->Short_Pulse_Duration;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <Get_Short_Pulse_Duration+0x8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	8898      	ldrh	r0, [r3, #4]
    }
 800166e:	4770      	bx	lr
 8001670:	20000014 	.word	0x20000014

08001674 <Set_Batt_Alarm>:
    {
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <Set_Batt_Alarm+0x24>)
 8001676:	b510      	push	{r4, lr}
 8001678:	1c03      	adds	r3, r0, #0
 800167a:	4290      	cmp	r0, r2
 800167c:	dd00      	ble.n	8001680 <Set_Batt_Alarm+0xc>
 800167e:	1c13      	adds	r3, r2, #0
    Welder_Data_Handle->Batt_Alarm = voltage;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <Set_Batt_Alarm+0x28>)
 8001682:	b218      	sxth	r0, r3
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <Set_Batt_Alarm+0x2c>)
 8001688:	4290      	cmp	r0, r2
 800168a:	da00      	bge.n	800168e <Set_Batt_Alarm+0x1a>
 800168c:	1c13      	adds	r3, r2, #0
 800168e:	810b      	strh	r3, [r1, #8]
    Update_Data_In_EEPROM();
 8001690:	f7ff ff70 	bl	8001574 <Update_Data_In_EEPROM>
    }
 8001694:	bd10      	pop	{r4, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	000032c8 	.word	0x000032c8
 800169c:	20000014 	.word	0x20000014
 80016a0:	00002710 	.word	0x00002710

080016a4 <Get_Batt_Alarm>:
    return Welder_Data_Handle->Batt_Alarm;
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <Get_Batt_Alarm+0x8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	8918      	ldrh	r0, [r3, #8]
    }
 80016aa:	4770      	bx	lr
 80016ac:	20000014 	.word	0x20000014

080016b0 <Disble_Welder>:
    Welder_Enable_Flag = 0;
 80016b0:	2200      	movs	r2, #0
 80016b2:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <Disble_Welder+0x8>)
 80016b4:	701a      	strb	r2, [r3, #0]
    }
 80016b6:	4770      	bx	lr
 80016b8:	20000018 	.word	0x20000018

080016bc <Get_Welder_Status>:
    return Welder_Enable_Flag;
 80016bc:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <Get_Welder_Status+0x8>)
 80016be:	7818      	ldrb	r0, [r3, #0]
    }
 80016c0:	4770      	bx	lr
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20000018 	.word	0x20000018

080016c8 <Disble_Auto_Welder>:
    Welder_Data_Handle->Welder_Auto_Flag = 0;
 80016c8:	2200      	movs	r2, #0
    {
 80016ca:	b510      	push	{r4, lr}
    Welder_Data_Handle->Welder_Auto_Flag = 0;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <Disble_Auto_Welder+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	801a      	strh	r2, [r3, #0]
    Update_Data_In_EEPROM();
 80016d2:	f7ff ff4f 	bl	8001574 <Update_Data_In_EEPROM>
    }
 80016d6:	bd10      	pop	{r4, pc}
 80016d8:	20000014 	.word	0x20000014

080016dc <Enable_Auto_Welder>:
    Welder_Data_Handle->Welder_Auto_Flag = 1;
 80016dc:	2201      	movs	r2, #1
    {
 80016de:	b510      	push	{r4, lr}
    Welder_Data_Handle->Welder_Auto_Flag = 1;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <Enable_Auto_Welder+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	801a      	strh	r2, [r3, #0]
    Update_Data_In_EEPROM();
 80016e6:	f7ff ff45 	bl	8001574 <Update_Data_In_EEPROM>
    }
 80016ea:	bd10      	pop	{r4, pc}
 80016ec:	20000014 	.word	0x20000014

080016f0 <Get_Auto_Status>:
    return Welder_Data_Handle->Welder_Auto_Flag;
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <Get_Auto_Status+0x8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	7818      	ldrb	r0, [r3, #0]
    }
 80016f6:	4770      	bx	lr
 80016f8:	20000014 	.word	0x20000014

080016fc <Get_Foot_Switch_Status>:
    return 0;
 80016fc:	2000      	movs	r0, #0
    return Welder_Data_Handle->Welder_Auto_Flag;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <Get_Foot_Switch_Status+0x20>)
    {
 8001700:	b510      	push	{r4, lr}
    return Welder_Data_Handle->Welder_Auto_Flag;
 8001702:	681b      	ldr	r3, [r3, #0]
    if (!Get_Auto_Status())
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4283      	cmp	r3, r0
 8001708:	d107      	bne.n	800171a <Get_Foot_Switch_Status+0x1e>
	return HAL_GPIO_ReadPin(Foot_Switch_GPIO_Port, Foot_Switch_Pin)?0:1;
 800170a:	2090      	movs	r0, #144	; 0x90
 800170c:	2110      	movs	r1, #16
 800170e:	05c0      	lsls	r0, r0, #23
 8001710:	f000 fd42 	bl	8002198 <HAL_GPIO_ReadPin>
 8001714:	4243      	negs	r3, r0
 8001716:	4158      	adcs	r0, r3
 8001718:	b2c0      	uxtb	r0, r0
    }
 800171a:	bd10      	pop	{r4, pc}
 800171c:	20000014 	.word	0x20000014

08001720 <Get_Auto_Puse_In_Status>:
    return Welder_Data_Handle->Welder_Auto_Flag;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <Get_Auto_Puse_In_Status+0x18>)
    {
 8001722:	b510      	push	{r4, lr}
    return Welder_Data_Handle->Welder_Auto_Flag;
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	7818      	ldrb	r0, [r3, #0]
    if (Get_Auto_Status())
 8001728:	2800      	cmp	r0, #0
 800172a:	d004      	beq.n	8001736 <Get_Auto_Puse_In_Status+0x16>
	return HAL_GPIO_ReadPin(Auto_Pulse_In_GPIO_Port, Auto_Pulse_In_Pin);
 800172c:	2090      	movs	r0, #144	; 0x90
 800172e:	2101      	movs	r1, #1
 8001730:	05c0      	lsls	r0, r0, #23
 8001732:	f000 fd31 	bl	8002198 <HAL_GPIO_ReadPin>
    }
 8001736:	bd10      	pop	{r4, pc}
 8001738:	20000014 	.word	0x20000014

0800173c <Spot_Welder_Main>:
    }

void Spot_Welder_Main()
    {

    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	4828      	ldr	r0, [pc, #160]	; (80017e0 <Spot_Welder_Main+0xa4>)
 8001740:	009b      	lsls	r3, r3, #2
    {
 8001742:	b570      	push	{r4, r5, r6, lr}
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8001744:	8083      	strh	r3, [r0, #4]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8001746:	2490      	movs	r4, #144	; 0x90

    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8001748:	2380      	movs	r3, #128	; 0x80
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 800174a:	05e4      	lsls	r4, r4, #23
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 800174c:	00db      	lsls	r3, r3, #3
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 800174e:	6004      	str	r4, [r0, #0]
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8001750:	8183      	strh	r3, [r0, #12]
    Soft_I2C1.GPIO_SDA_Port = SOFT_I2C_SDA_PORT;
 8001752:	6084      	str	r4, [r0, #8]

    Soft_I2C_Init(&Soft_I2C1);
 8001754:	f7ff fdc6 	bl	80012e4 <Soft_I2C_Init>

    Foot_Switch.Button_Pin = Foot_Switch_Pin;
 8001758:	2310      	movs	r3, #16
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
    Foot_Switch.Button_Pressed_Logic = LOW;
 800175a:	2500      	movs	r5, #0
    Foot_Switch.Callback = Foot_Switch_Callback;
    Button_Attach(&Foot_Switch);

    Auto_Pulse_SW.Button_Pin = Auto_Pulse_In_Pin;
 800175c:	2601      	movs	r6, #1
    Foot_Switch.Button_Pin = Foot_Switch_Pin;
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <Spot_Welder_Main+0xa8>)
 8001760:	8003      	strh	r3, [r0, #0]
    Foot_Switch.Callback = Foot_Switch_Callback;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <Spot_Welder_Main+0xac>)
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
 8001764:	6044      	str	r4, [r0, #4]
    Foot_Switch.Callback = Foot_Switch_Callback;
 8001766:	6183      	str	r3, [r0, #24]
    Foot_Switch.Button_Pressed_Logic = LOW;
 8001768:	7205      	strb	r5, [r0, #8]
    Button_Attach(&Foot_Switch);
 800176a:	f7fe fe3f 	bl	80003ec <Button_Attach>
    Auto_Pulse_SW.Button_Pin_Port = Auto_Pulse_In_GPIO_Port;
    Auto_Pulse_SW.Button_Pressed_Logic = HIGH;
    Auto_Pulse_SW.Callback = Auto_Pulse_In_Callback;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <Spot_Welder_Main+0xb0>)
    Auto_Pulse_SW.Button_Pin = Auto_Pulse_In_Pin;
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <Spot_Welder_Main+0xb4>)
    Auto_Pulse_SW.Callback = Auto_Pulse_In_Callback;
 8001772:	6183      	str	r3, [r0, #24]
    Auto_Pulse_SW.Button_Pin_Port = Auto_Pulse_In_GPIO_Port;
 8001774:	6044      	str	r4, [r0, #4]
    Auto_Pulse_SW.Button_Pin = Auto_Pulse_In_Pin;
 8001776:	8006      	strh	r6, [r0, #0]
    Auto_Pulse_SW.Button_Pressed_Logic = HIGH;
 8001778:	7206      	strb	r6, [r0, #8]
    Button_Attach(&Auto_Pulse_SW);
 800177a:	f7fe fe37 	bl	80003ec <Button_Attach>

    Read_Data_From_EEPROM();
 800177e:	f7ff ff23 	bl	80015c8 <Read_Data_From_EEPROM>

    ssd1306_Init();
 8001782:	f000 f881 	bl	8001888 <ssd1306_Init>

    ssd1306_Fill(Black);
 8001786:	0028      	movs	r0, r5
 8001788:	f000 f84c 	bl	8001824 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800178c:	0029      	movs	r1, r5
 800178e:	0028      	movs	r0, r5
 8001790:	f000 f964 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("  Arduino", Font_11x18, White);
 8001794:	4c17      	ldr	r4, [pc, #92]	; (80017f4 <Spot_Welder_Main+0xb8>)
 8001796:	0033      	movs	r3, r6
 8001798:	6862      	ldr	r2, [r4, #4]
 800179a:	6821      	ldr	r1, [r4, #0]
 800179c:	4816      	ldr	r0, [pc, #88]	; (80017f8 <Spot_Welder_Main+0xbc>)
 800179e:	f000 f949 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80017a2:	2114      	movs	r1, #20
 80017a4:	0028      	movs	r0, r5
 80017a6:	f000 f959 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("Spot Welder", Font_11x18, White);
 80017aa:	0033      	movs	r3, r6
 80017ac:	6821      	ldr	r1, [r4, #0]
 80017ae:	6862      	ldr	r2, [r4, #4]
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <Spot_Welder_Main+0xc0>)
 80017b2:	f000 f93f 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80017b6:	2128      	movs	r1, #40	; 0x28
 80017b8:	0028      	movs	r0, r5
 80017ba:	f000 f94f 	bl	8001a5c <ssd1306_SetCursor>
    ssd1306_WriteString("    V3", Font_11x18, White);
 80017be:	cc06      	ldmia	r4!, {r1, r2}
 80017c0:	0033      	movs	r3, r6
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <Spot_Welder_Main+0xc4>)
 80017c4:	f000 f936 	bl	8001a34 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80017c8:	f000 f83a 	bl	8001840 <ssd1306_UpdateScreen>

    Menu_Init();
 80017cc:	f7fe ffa8 	bl	8000720 <Menu_Init>

    HAL_Delay(2000);
 80017d0:	20fa      	movs	r0, #250	; 0xfa
 80017d2:	00c0      	lsls	r0, r0, #3
 80017d4:	f000 f9dc 	bl	8001b90 <HAL_Delay>

    while (1)
	{

	Menu_Loop();
 80017d8:	f7fe ffde 	bl	8000798 <Menu_Loop>
 80017dc:	e7fc      	b.n	80017d8 <Spot_Welder_Main+0x9c>
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	20000534 	.word	0x20000534
 80017e4:	20000518 	.word	0x20000518
 80017e8:	08001571 	.word	0x08001571
 80017ec:	08001573 	.word	0x08001573
 80017f0:	200004fc 	.word	0x200004fc
 80017f4:	20000000 	.word	0x20000000
 80017f8:	08003df8 	.word	0x08003df8
 80017fc:	08003e02 	.word	0x08003e02
 8001800:	08003e0e 	.word	0x08003e0e

08001804 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 8001804:	b507      	push	{r0, r1, r2, lr}
 8001806:	466b      	mov	r3, sp
 8001808:	3307      	adds	r3, #7
 800180a:	7018      	strb	r0, [r3, #0]
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 800180c:	2200      	movs	r2, #0
 800180e:	2178      	movs	r1, #120	; 0x78
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <ssd1306_WriteCommand+0x1c>)
 8001812:	f7ff fe52 	bl	80014ba <Soft_I2C_Write_Byte>
 8001816:	2801      	cmp	r0, #1
 8001818:	d101      	bne.n	800181e <ssd1306_WriteCommand+0x1a>
    {
    	Error_Handler();
 800181a:	f7fe ff49 	bl	80006b0 <Error_Handler>
    }
}
 800181e:	bd07      	pop	{r0, r1, r2, pc}
 8001820:	20000534 	.word	0x20000534

08001824 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001824:	1e42      	subs	r2, r0, #1
 8001826:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800182c:	4903      	ldr	r1, [pc, #12]	; (800183c <ssd1306_Fill+0x18>)
 800182e:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001830:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001832:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001834:	3301      	adds	r3, #1
 8001836:	4293      	cmp	r3, r2
 8001838:	d1fb      	bne.n	8001832 <ssd1306_Fill+0xe>
	}
}
 800183a:	4770      	bx	lr
 800183c:	2000007e 	.word	0x2000007e

08001840 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001842:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 8001844:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 8001846:	0020      	movs	r0, r4
 8001848:	3850      	subs	r0, #80	; 0x50
 800184a:	b2c0      	uxtb	r0, r0
 800184c:	f7ff ffda 	bl	8001804 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ffd7 	bl	8001804 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001856:	2010      	movs	r0, #16
 8001858:	f7ff ffd4 	bl	8001804 <ssd1306_WriteCommand>
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <ssd1306_UpdateScreen+0x40>)
 800185e:	01e3      	lsls	r3, r4, #7
 8001860:	189b      	adds	r3, r3, r2
 8001862:	9500      	str	r5, [sp, #0]
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	2178      	movs	r1, #120	; 0x78
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <ssd1306_UpdateScreen+0x44>)
 800186a:	f7ff fe51 	bl	8001510 <Soft_I2C_Write_Bytes>
 800186e:	2801      	cmp	r0, #1
 8001870:	d101      	bne.n	8001876 <ssd1306_UpdateScreen+0x36>
	    {
	    	Error_Handler();
 8001872:	f7fe ff1d 	bl	80006b0 <Error_Handler>
 8001876:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 8001878:	2c08      	cmp	r4, #8
 800187a:	d1e4      	bne.n	8001846 <ssd1306_UpdateScreen+0x6>
	    }
	}
}
 800187c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	2000007e 	.word	0x2000007e
 8001884:	20000534 	.word	0x20000534

08001888 <ssd1306_Init>:
{	
 8001888:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(0xAE); //display off
 800188a:	20ae      	movs	r0, #174	; 0xae
 800188c:	f7ff ffba 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001890:	2020      	movs	r0, #32
 8001892:	f7ff ffb7 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001896:	2010      	movs	r0, #16
 8001898:	f7ff ffb4 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800189c:	20b0      	movs	r0, #176	; 0xb0
 800189e:	f7ff ffb1 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018a2:	20c8      	movs	r0, #200	; 0xc8
 80018a4:	f7ff ffae 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffab 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80018ae:	2010      	movs	r0, #16
 80018b0:	f7ff ffa8 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80018b4:	2040      	movs	r0, #64	; 0x40
 80018b6:	f7ff ffa5 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80018ba:	2081      	movs	r0, #129	; 0x81
 80018bc:	f7ff ffa2 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80018c0:	20ff      	movs	r0, #255	; 0xff
 80018c2:	f7ff ff9f 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80018c6:	20a1      	movs	r0, #161	; 0xa1
 80018c8:	f7ff ff9c 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80018cc:	20a6      	movs	r0, #166	; 0xa6
 80018ce:	f7ff ff99 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80018d2:	20a8      	movs	r0, #168	; 0xa8
 80018d4:	f7ff ff96 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80018d8:	203f      	movs	r0, #63	; 0x3f
 80018da:	f7ff ff93 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018de:	20a4      	movs	r0, #164	; 0xa4
 80018e0:	f7ff ff90 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80018e4:	20d3      	movs	r0, #211	; 0xd3
 80018e6:	f7ff ff8d 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff8a 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018f0:	20d5      	movs	r0, #213	; 0xd5
 80018f2:	f7ff ff87 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018f6:	20f0      	movs	r0, #240	; 0xf0
 80018f8:	f7ff ff84 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018fc:	20d9      	movs	r0, #217	; 0xd9
 80018fe:	f7ff ff81 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001902:	2022      	movs	r0, #34	; 0x22
 8001904:	f7ff ff7e 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001908:	20da      	movs	r0, #218	; 0xda
 800190a:	f7ff ff7b 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800190e:	2012      	movs	r0, #18
 8001910:	f7ff ff78 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001914:	20db      	movs	r0, #219	; 0xdb
 8001916:	f7ff ff75 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800191a:	2020      	movs	r0, #32
 800191c:	f7ff ff72 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001920:	208d      	movs	r0, #141	; 0x8d
 8001922:	f7ff ff6f 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001926:	2014      	movs	r0, #20
 8001928:	f7ff ff6c 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800192c:	20af      	movs	r0, #175	; 0xaf
 800192e:	f7ff ff69 	bl	8001804 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff ff76 	bl	8001824 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001938:	f7ff ff82 	bl	8001840 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800193c:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 800193e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <ssd1306_Init+0xc4>)
 8001942:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001944:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001946:	7158      	strb	r0, [r3, #5]
}
 8001948:	bd10      	pop	{r4, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	20000078 	.word	0x20000078

08001950 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001950:	b243      	sxtb	r3, r0
{
 8001952:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001954:	2b00      	cmp	r3, #0
 8001956:	db16      	blt.n	8001986 <ssd1306_DrawPixel+0x36>
 8001958:	293f      	cmp	r1, #63	; 0x3f
 800195a:	d814      	bhi.n	8001986 <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <ssd1306_DrawPixel+0x40>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 8001964:	4253      	negs	r3, r2
 8001966:	415a      	adcs	r2, r3
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	2407      	movs	r4, #7
 800196c:	08cb      	lsrs	r3, r1, #3
 800196e:	400c      	ands	r4, r1
 8001970:	2101      	movs	r1, #1
 8001972:	40a1      	lsls	r1, r4
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	4d07      	ldr	r5, [pc, #28]	; (8001994 <ssd1306_DrawPixel+0x44>)
 8001978:	1818      	adds	r0, r3, r0
 800197a:	562e      	ldrsb	r6, [r5, r0]
 800197c:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 800197e:	2a01      	cmp	r2, #1
 8001980:	d102      	bne.n	8001988 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001982:	4333      	orrs	r3, r6
 8001984:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 8001986:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001988:	439e      	bics	r6, r3
 800198a:	542e      	strb	r6, [r5, r0]
 800198c:	e7fb      	b.n	8001986 <ssd1306_DrawPixel+0x36>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	20000078 	.word	0x20000078
 8001994:	2000007e 	.word	0x2000007e

08001998 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	9303      	str	r3, [sp, #12]
 800199e:	b2cb      	uxtb	r3, r1
 80019a0:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <ssd1306_WriteChar+0x98>)
{
 80019a4:	9106      	str	r1, [sp, #24]
 80019a6:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019a8:	9901      	ldr	r1, [sp, #4]
 80019aa:	881a      	ldrh	r2, [r3, #0]
{
 80019ac:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019ae:	9200      	str	r2, [sp, #0]
 80019b0:	1852      	adds	r2, r2, r1
 80019b2:	2a7f      	cmp	r2, #127	; 0x7f
 80019b4:	dc3a      	bgt.n	8001a2c <ssd1306_WriteChar+0x94>
 80019b6:	aa06      	add	r2, sp, #24
 80019b8:	7852      	ldrb	r2, [r2, #1]
 80019ba:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80019bc:	885c      	ldrh	r4, [r3, #2]
 80019be:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019c0:	2b3f      	cmp	r3, #63	; 0x3f
 80019c2:	dc33      	bgt.n	8001a2c <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019c4:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 80019c6:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019c8:	3b20      	subs	r3, #32
 80019ca:	435a      	muls	r2, r3
 80019cc:	b2e4      	uxtb	r4, r4
 80019ce:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 80019d0:	9b02      	ldr	r3, [sp, #8]
 80019d2:	42bb      	cmp	r3, r7
 80019d4:	d808      	bhi.n	80019e8 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 80019d6:	9a01      	ldr	r2, [sp, #4]
 80019d8:	9b00      	ldr	r3, [sp, #0]
 80019da:	4694      	mov	ip, r2
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <ssd1306_WriteChar+0x98>)
 80019de:	4463      	add	r3, ip
 80019e0:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 80019e2:	0030      	movs	r0, r6
 80019e4:	b009      	add	sp, #36	; 0x24
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 80019e8:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019ea:	9b04      	ldr	r3, [sp, #16]
 80019ec:	9a07      	ldr	r2, [sp, #28]
 80019ee:	19db      	adds	r3, r3, r7
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	5a9b      	ldrh	r3, [r3, r2]
 80019f4:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	42ab      	cmp	r3, r5
 80019fa:	d803      	bhi.n	8001a04 <ssd1306_WriteChar+0x6c>
 80019fc:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 80019fe:	3701      	adds	r7, #1
 8001a00:	b2e4      	uxtb	r4, r4
 8001a02:	e7e5      	b.n	80019d0 <ssd1306_WriteChar+0x38>
 8001a04:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	18e8      	adds	r0, r5, r3
 8001a0a:	9b05      	ldr	r3, [sp, #20]
 8001a0c:	0212      	lsls	r2, r2, #8
 8001a0e:	40ab      	lsls	r3, r5
 8001a10:	b2c0      	uxtb	r0, r0
 8001a12:	4213      	tst	r3, r2
 8001a14:	d005      	beq.n	8001a22 <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a16:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a18:	0021      	movs	r1, r4
 8001a1a:	f7ff ff99 	bl	8001950 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001a1e:	3501      	adds	r5, #1
 8001a20:	e7e9      	b.n	80019f6 <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a22:	9a03      	ldr	r2, [sp, #12]
 8001a24:	4253      	negs	r3, r2
 8001a26:	415a      	adcs	r2, r3
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	e7f5      	b.n	8001a18 <ssd1306_WriteChar+0x80>
		return 0;
 8001a2c:	2600      	movs	r6, #0
 8001a2e:	e7d8      	b.n	80019e2 <ssd1306_WriteChar+0x4a>
 8001a30:	20000078 	.word	0x20000078

08001a34 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a36:	0004      	movs	r4, r0
 8001a38:	001d      	movs	r5, r3
 8001a3a:	9100      	str	r1, [sp, #0]
 8001a3c:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8001a3e:	7820      	ldrb	r0, [r4, #0]
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d100      	bne.n	8001a46 <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8001a44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001a46:	002b      	movs	r3, r5
 8001a48:	9900      	ldr	r1, [sp, #0]
 8001a4a:	9a01      	ldr	r2, [sp, #4]
 8001a4c:	f7ff ffa4 	bl	8001998 <ssd1306_WriteChar>
 8001a50:	0003      	movs	r3, r0
 8001a52:	7820      	ldrb	r0, [r4, #0]
 8001a54:	4283      	cmp	r3, r0
 8001a56:	d1f5      	bne.n	8001a44 <ssd1306_WriteString+0x10>
		str++;
 8001a58:	3401      	adds	r4, #1
 8001a5a:	e7f0      	b.n	8001a3e <ssd1306_WriteString+0xa>

08001a5c <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <ssd1306_SetCursor+0x8>)
 8001a5e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001a60:	8059      	strh	r1, [r3, #2]
}
 8001a62:	4770      	bx	lr
 8001a64:	20000078 	.word	0x20000078

08001a68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	2001      	movs	r0, #1
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_MspInit+0x2c>)
{
 8001a6c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	6999      	ldr	r1, [r3, #24]
 8001a70:	4301      	orrs	r1, r0
 8001a72:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4002      	ands	r2, r0
 8001a7c:	9200      	str	r2, [sp, #0]
 8001a7e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	61da      	str	r2, [r3, #28]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	b002      	add	sp, #8
 8001a90:	4770      	bx	lr
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000

08001a98 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a98:	4770      	bx	lr

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler>

08001a9c <SVC_Handler>:
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa2:	f000 f863 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systic_Callback();
 8001aa6:	f7fe fe05 	bl	80006b4 <Systic_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001aaa:	bd10      	pop	{r4, pc}

08001aac <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001aac:	4770      	bx	lr
	...

08001ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab6:	490e      	ldr	r1, [pc, #56]	; (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001acc:	4c0b      	ldr	r4, [pc, #44]	; (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ada:	f7ff ffe7 	bl	8001aac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001ade:	f000 fe1f 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae2:	f7fe fdd3 	bl	800068c <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001af4:	08003e54 	.word	0x08003e54
  ldr r2, =_sbss
 8001af8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001afc:	20000554 	.word	0x20000554

08001b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_IRQHandler>
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	20fa      	movs	r0, #250	; 0xfa
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_InitTick+0x3c>)
 8001b0c:	0080      	lsls	r0, r0, #2
 8001b0e:	7819      	ldrb	r1, [r3, #0]
 8001b10:	f7fe fb04 	bl	800011c <__udivsi3>
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_InitTick+0x40>)
 8001b16:	0001      	movs	r1, r0
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f7fe faff 	bl	800011c <__udivsi3>
 8001b1e:	f000 fa71 	bl	8002004 <HAL_SYSTICK_Config>
 8001b22:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b26:	2c00      	cmp	r4, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	2d03      	cmp	r5, #3
 8001b2c:	d807      	bhi.n	8001b3e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2e:	3802      	subs	r0, #2
 8001b30:	0022      	movs	r2, r4
 8001b32:	0029      	movs	r1, r5
 8001b34:	f000 fa3c 	bl	8001fb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	0020      	movs	r0, r4
 8001b3a:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_InitTick+0x44>)
 8001b3c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	20000020 	.word	0x20000020
 8001b44:	2000001c 	.word	0x2000001c
 8001b48:	20000024 	.word	0x20000024

08001b4c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_Init+0x1c>)
{
 8001b50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b52:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b54:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	f7ff ffd3 	bl	8001b04 <HAL_InitTick>
  HAL_MspInit();
 8001b5e:	f7ff ff83 	bl	8001a68 <HAL_MspInit>
}
 8001b62:	2000      	movs	r0, #0
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b6c:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_IncTick+0x10>)
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_IncTick+0x14>)
 8001b70:	6811      	ldr	r1, [r2, #0]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	185b      	adds	r3, r3, r1
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	4770      	bx	lr
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000550 	.word	0x20000550
 8001b80:	20000020 	.word	0x20000020

08001b84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b84:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <HAL_GetTick+0x8>)
 8001b86:	6818      	ldr	r0, [r3, #0]
}
 8001b88:	4770      	bx	lr
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	20000550 	.word	0x20000550

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fff6 	bl	8001b84 <HAL_GetTick>
 8001b98:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	1c63      	adds	r3, r4, #1
 8001b9c:	d002      	beq.n	8001ba4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_Delay+0x20>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	1b40      	subs	r0, r0, r5
 8001baa:	42a0      	cmp	r0, r4
 8001bac:	d3fa      	bcc.n	8001ba4 <HAL_Delay+0x14>
  {
  }
}
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
 8001bb0:	20000020 	.word	0x20000020

08001bb4 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001bb4:	2300      	movs	r3, #0
{
 8001bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bb8:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001bba:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	6803      	ldr	r3, [r0, #0]
{
 8001bbe:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	2a01      	cmp	r2, #1
 8001bc6:	d107      	bne.n	8001bd8 <ADC_Enable+0x24>
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	4211      	tst	r1, r2
 8001bcc:	d001      	beq.n	8001bd2 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bce:	2000      	movs	r0, #0
}
 8001bd0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	d4fa      	bmi.n	8001bce <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <ADC_Enable+0x8c>)
 8001bdc:	4211      	tst	r1, r2
 8001bde:	d008      	beq.n	8001bf2 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001be6:	4313      	orrs	r3, r2
 8001be8:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bec:	4303      	orrs	r3, r0
 8001bee:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001bf0:	e7ee      	b.n	8001bd0 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <ADC_Enable+0x90>)
 8001bfc:	4912      	ldr	r1, [pc, #72]	; (8001c48 <ADC_Enable+0x94>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	f7fe fa8c 	bl	800011c <__udivsi3>
 8001c04:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d115      	bne.n	8001c38 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001c0c:	f7ff ffba 	bl	8001b84 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c10:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001c12:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	422b      	tst	r3, r5
 8001c1a:	d1d8      	bne.n	8001bce <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c1c:	f7ff ffb2 	bl	8001b84 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9f6      	bls.n	8001c14 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	2310      	movs	r3, #16
 8001c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c32:	432b      	orrs	r3, r5
 8001c34:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001c36:	e7cb      	b.n	8001bd0 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	e7e2      	b.n	8001c06 <ADC_Enable+0x52>
 8001c40:	80000017 	.word	0x80000017
 8001c44:	2000001c 	.word	0x2000001c
 8001c48:	000f4240 	.word	0x000f4240

08001c4c <HAL_ADC_Init>:
{
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d07e      	beq.n	8001d54 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001c5c:	0022      	movs	r2, r4
 8001c5e:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001c60:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001c62:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001c64:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001c66:	f7fe fb1d 	bl	80002a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c6c:	06db      	lsls	r3, r3, #27
 8001c6e:	d500      	bpl.n	8001c72 <HAL_ADC_Init+0x26>
 8001c70:	e085      	b.n	8001d7e <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c72:	2204      	movs	r2, #4
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	6898      	ldr	r0, [r3, #8]
 8001c78:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c7a:	d000      	beq.n	8001c7e <HAL_ADC_Init+0x32>
 8001c7c:	e07f      	b.n	8001d7e <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c80:	4942      	ldr	r1, [pc, #264]	; (8001d8c <HAL_ADC_Init+0x140>)
 8001c82:	4011      	ands	r1, r2
 8001c84:	2202      	movs	r2, #2
 8001c86:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c88:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	2a01      	cmp	r2, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_Init+0x54>
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	4211      	tst	r1, r2
 8001c98:	d10e      	bne.n	8001cb8 <HAL_ADC_Init+0x6c>
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	0412      	lsls	r2, r2, #16
 8001c9e:	d40b      	bmi.n	8001cb8 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ca0:	2118      	movs	r1, #24
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	68a1      	ldr	r1, [r4, #8]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	6862      	ldr	r2, [r4, #4]
 8001cb0:	0089      	lsls	r1, r1, #2
 8001cb2:	0889      	lsrs	r1, r1, #2
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_ADC_Init+0x144>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc0:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cc2:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc4:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cc6:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc8:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ccc:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	1e56      	subs	r6, r2, #1
 8001cd2:	41b2      	sbcs	r2, r6
 8001cd4:	0316      	lsls	r6, r2, #12
 8001cd6:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cd8:	034f      	lsls	r7, r1, #13
 8001cda:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cdc:	6922      	ldr	r2, [r4, #16]
 8001cde:	432f      	orrs	r7, r5
 8001ce0:	2a02      	cmp	r2, #2
 8001ce2:	d100      	bne.n	8001ce6 <HAL_ADC_Init+0x9a>
 8001ce4:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ce6:	1d62      	adds	r2, r4, #5
 8001ce8:	7fd2      	ldrb	r2, [r2, #31]
 8001cea:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cec:	433a      	orrs	r2, r7
 8001cee:	4332      	orrs	r2, r6
 8001cf0:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf2:	7ee0      	ldrb	r0, [r4, #27]
 8001cf4:	2801      	cmp	r0, #1
 8001cf6:	d104      	bne.n	8001d02 <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d12c      	bne.n	8001d56 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0249      	lsls	r1, r1, #9
 8001d00:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d02:	20c2      	movs	r0, #194	; 0xc2
 8001d04:	69e1      	ldr	r1, [r4, #28]
 8001d06:	30ff      	adds	r0, #255	; 0xff
 8001d08:	4281      	cmp	r1, r0
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d0c:	6a20      	ldr	r0, [r4, #32]
 8001d0e:	4301      	orrs	r1, r0
 8001d10:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d12:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d14:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d16:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d1e:	4281      	cmp	r1, r0
 8001d20:	d002      	beq.n	8001d28 <HAL_ADC_Init+0xdc>
 8001d22:	1e48      	subs	r0, r1, #1
 8001d24:	2806      	cmp	r0, #6
 8001d26:	d807      	bhi.n	8001d38 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d28:	2507      	movs	r5, #7
 8001d2a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d2c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d2e:	43a8      	bics	r0, r5
 8001d30:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d32:	6958      	ldr	r0, [r3, #20]
 8001d34:	4301      	orrs	r1, r0
 8001d36:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4916      	ldr	r1, [pc, #88]	; (8001d94 <HAL_ADC_Init+0x148>)
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d111      	bne.n	8001d66 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001d44:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4313      	orrs	r3, r2
 8001d52:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d56:	2120      	movs	r1, #32
 8001d58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001d5a:	4329      	orrs	r1, r5
 8001d5c:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d60:	4308      	orrs	r0, r1
 8001d62:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001d64:	e7cd      	b.n	8001d02 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001d66:	2212      	movs	r2, #18
 8001d68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	001a      	movs	r2, r3
 8001d70:	2310      	movs	r3, #16
 8001d72:	4313      	orrs	r3, r2
 8001d74:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d78:	4303      	orrs	r3, r0
 8001d7a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001d7c:	e7ea      	b.n	8001d54 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	2310      	movs	r3, #16
 8001d80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	4313      	orrs	r3, r2
 8001d86:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d88:	e7e4      	b.n	8001d54 <HAL_ADC_Init+0x108>
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	fffffefd 	.word	0xfffffefd
 8001d90:	fffe0219 	.word	0xfffe0219
 8001d94:	833fffe7 	.word	0x833fffe7

08001d98 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d98:	6803      	ldr	r3, [r0, #0]
{
 8001d9a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d9c:	689b      	ldr	r3, [r3, #8]
{
 8001d9e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001da0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da2:	075b      	lsls	r3, r3, #29
 8001da4:	d41a      	bmi.n	8001ddc <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001da6:	0025      	movs	r5, r4
 8001da8:	3534      	adds	r5, #52	; 0x34
 8001daa:	782b      	ldrb	r3, [r5, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d015      	beq.n	8001ddc <HAL_ADC_Start+0x44>
 8001db0:	2301      	movs	r3, #1
 8001db2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001db4:	7e63      	ldrb	r3, [r4, #25]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d111      	bne.n	8001dde <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001dbe:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dc8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001dca:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dcc:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8001dce:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001dd0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dd2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	3a18      	subs	r2, #24
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
}
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001dde:	0020      	movs	r0, r4
 8001de0:	f7ff fee8 	bl	8001bb4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0e8      	beq.n	8001dba <HAL_ADC_Start+0x22>
 8001de8:	e7f8      	b.n	8001ddc <HAL_ADC_Start+0x44>
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	fffff0fe 	.word	0xfffff0fe

08001df0 <HAL_ADC_PollForConversion>:
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001df2:	6945      	ldr	r5, [r0, #20]
{
 8001df4:	0004      	movs	r4, r0
 8001df6:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001df8:	2d08      	cmp	r5, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001dfc:	6803      	ldr	r3, [r0, #0]
 8001dfe:	2001      	movs	r0, #1
 8001e00:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e02:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e04:	4203      	tst	r3, r0
 8001e06:	d007      	beq.n	8001e18 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	2320      	movs	r3, #32
 8001e0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001e0c:	3434      	adds	r4, #52	; 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001e12:	2300      	movs	r3, #0
 8001e14:	7023      	strb	r3, [r4, #0]
}
 8001e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001e18:	f7ff feb4 	bl	8001b84 <HAL_GetTick>
 8001e1c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4215      	tst	r5, r2
 8001e24:	d023      	beq.n	8001e6e <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e30:	22c0      	movs	r2, #192	; 0xc0
 8001e32:	68d9      	ldr	r1, [r3, #12]
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	4211      	tst	r1, r2
 8001e38:	d112      	bne.n	8001e60 <HAL_ADC_PollForConversion+0x70>
 8001e3a:	7ea2      	ldrb	r2, [r4, #26]
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	d10f      	bne.n	8001e60 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	0712      	lsls	r2, r2, #28
 8001e44:	d50c      	bpl.n	8001e60 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	0752      	lsls	r2, r2, #29
 8001e4a:	d423      	bmi.n	8001e94 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e4c:	210c      	movs	r1, #12
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	438a      	bics	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001e54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e56:	4914      	ldr	r1, [pc, #80]	; (8001ea8 <HAL_ADC_PollForConversion+0xb8>)
 8001e58:	4011      	ands	r1, r2
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	63a2      	str	r2, [r4, #56]	; 0x38
  return HAL_OK;
 8001e60:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001e62:	7e22      	ldrb	r2, [r4, #24]
 8001e64:	4282      	cmp	r2, r0
 8001e66:	d1d6      	bne.n	8001e16 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e68:	220c      	movs	r2, #12
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e7d3      	b.n	8001e16 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001e6e:	1c72      	adds	r2, r6, #1
 8001e70:	d0d6      	beq.n	8001e20 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001e72:	2e00      	cmp	r6, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e76:	2304      	movs	r3, #4
 8001e78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8001e7a:	3434      	adds	r4, #52	; 0x34
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001e80:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001e82:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8001e84:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001e86:	e7c6      	b.n	8001e16 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001e88:	f7ff fe7c 	bl	8001b84 <HAL_GetTick>
 8001e8c:	1bc0      	subs	r0, r0, r7
 8001e8e:	42b0      	cmp	r0, r6
 8001e90:	d9c5      	bls.n	8001e1e <HAL_ADC_PollForConversion+0x2e>
 8001e92:	e7f0      	b.n	8001e76 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	2220      	movs	r2, #32
 8001e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001ea4:	e7dc      	b.n	8001e60 <HAL_ADC_PollForConversion+0x70>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	fffffefe 	.word	0xfffffefe

08001eac <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_ADC_ConfigChannel>:
{
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001eb6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001eb8:	0004      	movs	r4, r0
{
 8001eba:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001ebc:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001ebe:	3434      	adds	r4, #52	; 0x34
 8001ec0:	7823      	ldrb	r3, [r4, #0]
{
 8001ec2:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d02f      	beq.n	8001f2a <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ecc:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ece:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8001ed0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ed2:	68bd      	ldr	r5, [r7, #8]
 8001ed4:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8001ed6:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ed8:	4005      	ands	r5, r0
 8001eda:	d159      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0xdc>
 8001edc:	680e      	ldr	r6, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ede:	482f      	ldr	r0, [pc, #188]	; (8001f9c <HAL_ADC_ConfigChannel+0xe8>)
 8001ee0:	40b3      	lsls	r3, r6
 8001ee2:	0032      	movs	r2, r6
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	684b      	ldr	r3, [r1, #4]
 8001ee8:	3a10      	subs	r2, #16
 8001eea:	4283      	cmp	r3, r0
 8001eec:	d03d      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	9801      	ldr	r0, [sp, #4]
 8001ef2:	4318      	orrs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ef4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ef6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ef8:	055b      	lsls	r3, r3, #21
 8001efa:	459c      	cmp	ip, r3
 8001efc:	d010      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x6c>
 8001efe:	4663      	mov	r3, ip
 8001f00:	3b01      	subs	r3, #1
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d90c      	bls.n	8001f20 <HAL_ADC_ConfigChannel+0x6c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f06:	688b      	ldr	r3, [r1, #8]
 8001f08:	2107      	movs	r1, #7
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	4008      	ands	r0, r1
 8001f0e:	4283      	cmp	r3, r0
 8001f10:	d006      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x6c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f12:	6978      	ldr	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f14:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f16:	4388      	bics	r0, r1
 8001f18:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	4303      	orrs	r3, r0
 8001f1e:	617b      	str	r3, [r7, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f20:	2a01      	cmp	r2, #1
 8001f22:	d904      	bls.n	8001f2e <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001f26:	2300      	movs	r3, #0
 8001f28:	7023      	strb	r3, [r4, #0]
}
 8001f2a:	b005      	add	sp, #20
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f2e:	0033      	movs	r3, r6
 8001f30:	3b10      	subs	r3, #16
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	4183      	sbcs	r3, r0
 8001f36:	2080      	movs	r0, #128	; 0x80
 8001f38:	4919      	ldr	r1, [pc, #100]	; (8001fa0 <HAL_ADC_ConfigChannel+0xec>)
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	680a      	ldr	r2, [r1, #0]
 8001f3e:	059b      	lsls	r3, r3, #22
 8001f40:	0400      	lsls	r0, r0, #16
 8001f42:	181b      	adds	r3, r3, r0
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f48:	2e10      	cmp	r6, #16
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_ADC_ConfigChannel+0xf0>)
 8001f4e:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_ADC_ConfigChannel+0xf4>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f7fe f8e3 	bl	800011c <__udivsi3>
 8001f56:	230a      	movs	r3, #10
 8001f58:	4358      	muls	r0, r3
 8001f5a:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8001f5c:	9b03      	ldr	r3, [sp, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0e0      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8001f62:	9b03      	ldr	r3, [sp, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	9303      	str	r3, [sp, #12]
 8001f68:	e7f8      	b.n	8001f5c <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	4399      	bics	r1, r3
 8001f70:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f72:	2a01      	cmp	r2, #1
 8001f74:	d8d6      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f76:	1e53      	subs	r3, r2, #1
 8001f78:	419a      	sbcs	r2, r3
 8001f7a:	4253      	negs	r3, r2
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <HAL_ADC_ConfigChannel+0xec>)
 8001f80:	03d2      	lsls	r2, r2, #15
 8001f82:	4013      	ands	r3, r2
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_ADC_ConfigChannel+0xf8>)
 8001f86:	6808      	ldr	r0, [r1, #0]
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	e7c9      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	2120      	movs	r1, #32
 8001f92:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001f94:	4301      	orrs	r1, r0
 8001f96:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001f98:	0018      	movs	r0, r3
 8001f9a:	e7c4      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x72>
 8001f9c:	00001001 	.word	0x00001001
 8001fa0:	40012708 	.word	0x40012708
 8001fa4:	2000001c 	.word	0x2000001c
 8001fa8:	000f4240 	.word	0x000f4240
 8001fac:	ff7fffff 	.word	0xff7fffff

08001fb0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb0:	b530      	push	{r4, r5, lr}
 8001fb2:	25ff      	movs	r5, #255	; 0xff
 8001fb4:	2403      	movs	r4, #3
 8001fb6:	002a      	movs	r2, r5
 8001fb8:	b2c3      	uxtb	r3, r0
 8001fba:	401c      	ands	r4, r3
 8001fbc:	00e4      	lsls	r4, r4, #3
 8001fbe:	40a2      	lsls	r2, r4
 8001fc0:	0189      	lsls	r1, r1, #6
 8001fc2:	4029      	ands	r1, r5
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	db0a      	blt.n	8001fe2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	24c0      	movs	r4, #192	; 0xc0
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_NVIC_SetPriority+0x4c>)
 8001fd0:	0880      	lsrs	r0, r0, #2
 8001fd2:	0080      	lsls	r0, r0, #2
 8001fd4:	18c0      	adds	r0, r0, r3
 8001fd6:	00a4      	lsls	r4, r4, #2
 8001fd8:	5903      	ldr	r3, [r0, r4]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001fe0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	4003      	ands	r3, r0
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_NVIC_SetPriority+0x50>)
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	181b      	adds	r3, r3, r0
 8001ff0:	69d8      	ldr	r0, [r3, #28]
 8001ff2:	4002      	ands	r2, r0
 8001ff4:	4311      	orrs	r1, r2
 8001ff6:	61d9      	str	r1, [r3, #28]
 8001ff8:	e7f2      	b.n	8001fe0 <HAL_NVIC_SetPriority+0x30>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_SYSTICK_Config+0x28>)
 8002006:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002008:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200a:	4293      	cmp	r3, r2
 800200c:	d80d      	bhi.n	800202a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800200e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002012:	4808      	ldr	r0, [pc, #32]	; (8002034 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002014:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002016:	6a03      	ldr	r3, [r0, #32]
 8002018:	0609      	lsls	r1, r1, #24
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	430b      	orrs	r3, r1
 8002020:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002022:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002024:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002026:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002028:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800202a:	4770      	bx	lr
 800202c:	00ffffff 	.word	0x00ffffff
 8002030:	e000e010 	.word	0xe000e010
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	680b      	ldr	r3, [r1, #0]
{ 
 800203c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002040:	2300      	movs	r3, #0
{ 
 8002042:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002044:	9a03      	ldr	r2, [sp, #12]
 8002046:	40da      	lsrs	r2, r3
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 800204a:	b007      	add	sp, #28
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204e:	2201      	movs	r2, #1
 8002050:	409a      	lsls	r2, r3
 8002052:	9202      	str	r2, [sp, #8]
 8002054:	9902      	ldr	r1, [sp, #8]
 8002056:	9a03      	ldr	r2, [sp, #12]
 8002058:	400a      	ands	r2, r1
 800205a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 800205c:	d100      	bne.n	8002060 <HAL_GPIO_Init+0x28>
 800205e:	e08c      	b.n	800217a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002060:	9a01      	ldr	r2, [sp, #4]
 8002062:	2110      	movs	r1, #16
 8002064:	6852      	ldr	r2, [r2, #4]
 8002066:	0016      	movs	r6, r2
 8002068:	438e      	bics	r6, r1
 800206a:	2e02      	cmp	r6, #2
 800206c:	d10e      	bne.n	800208c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206e:	2507      	movs	r5, #7
 8002070:	401d      	ands	r5, r3
 8002072:	00ad      	lsls	r5, r5, #2
 8002074:	3901      	subs	r1, #1
 8002076:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8002078:	08dc      	lsrs	r4, r3, #3
 800207a:	00a4      	lsls	r4, r4, #2
 800207c:	1904      	adds	r4, r0, r4
 800207e:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002080:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	9901      	ldr	r1, [sp, #4]
 8002084:	6909      	ldr	r1, [r1, #16]
 8002086:	40a9      	lsls	r1, r5
 8002088:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800208a:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800208c:	2403      	movs	r4, #3
 800208e:	005f      	lsls	r7, r3, #1
 8002090:	40bc      	lsls	r4, r7
 8002092:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002094:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002096:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002098:	4025      	ands	r5, r4
 800209a:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209c:	2503      	movs	r5, #3
 800209e:	4015      	ands	r5, r2
 80020a0:	40bd      	lsls	r5, r7
 80020a2:	4661      	mov	r1, ip
 80020a4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80020a6:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a8:	2e01      	cmp	r6, #1
 80020aa:	d80f      	bhi.n	80020cc <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ac:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80020ae:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020b2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	40bd      	lsls	r5, r7
 80020b6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80020b8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80020ba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020be:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020c2:	2101      	movs	r1, #1
 80020c4:	400d      	ands	r5, r1
 80020c6:	409d      	lsls	r5, r3
 80020c8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80020ca:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80020cc:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ce:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020d0:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d4:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d8:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020da:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80020dc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020de:	420a      	tst	r2, r1
 80020e0:	d04b      	beq.n	800217a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2101      	movs	r1, #1
 80020e4:	4c26      	ldr	r4, [pc, #152]	; (8002180 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ea:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	430d      	orrs	r5, r1
 80020ee:	61a5      	str	r5, [r4, #24]
 80020f0:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80020f2:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f4:	400c      	ands	r4, r1
 80020f6:	9405      	str	r4, [sp, #20]
 80020f8:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020fa:	240f      	movs	r4, #15
 80020fc:	4921      	ldr	r1, [pc, #132]	; (8002184 <HAL_GPIO_Init+0x14c>)
 80020fe:	00ad      	lsls	r5, r5, #2
 8002100:	00b6      	lsls	r6, r6, #2
 8002102:	186d      	adds	r5, r5, r1
 8002104:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002106:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002108:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210a:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210c:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210e:	2400      	movs	r4, #0
 8002110:	4288      	cmp	r0, r1
 8002112:	d00c      	beq.n	800212e <HAL_GPIO_Init+0xf6>
 8002114:	491c      	ldr	r1, [pc, #112]	; (8002188 <HAL_GPIO_Init+0x150>)
 8002116:	3401      	adds	r4, #1
 8002118:	4288      	cmp	r0, r1
 800211a:	d008      	beq.n	800212e <HAL_GPIO_Init+0xf6>
 800211c:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_GPIO_Init+0x154>)
 800211e:	3401      	adds	r4, #1
 8002120:	4288      	cmp	r0, r1
 8002122:	d004      	beq.n	800212e <HAL_GPIO_Init+0xf6>
 8002124:	491a      	ldr	r1, [pc, #104]	; (8002190 <HAL_GPIO_Init+0x158>)
 8002126:	3403      	adds	r4, #3
 8002128:	4288      	cmp	r0, r1
 800212a:	d100      	bne.n	800212e <HAL_GPIO_Init+0xf6>
 800212c:	3c02      	subs	r4, #2
 800212e:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002130:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002132:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002134:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002136:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002138:	4c16      	ldr	r4, [pc, #88]	; (8002194 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 800213a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800213c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800213e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	03d1      	lsls	r1, r2, #15
 8002142:	d401      	bmi.n	8002148 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8002144:	003e      	movs	r6, r7
 8002146:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002148:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800214a:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 800214c:	9e00      	ldr	r6, [sp, #0]
 800214e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002150:	0391      	lsls	r1, r2, #14
 8002152:	d401      	bmi.n	8002158 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002154:	003e      	movs	r6, r7
 8002156:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002158:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800215a:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 800215c:	9e00      	ldr	r6, [sp, #0]
 800215e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	02d1      	lsls	r1, r2, #11
 8002162:	d401      	bmi.n	8002168 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8002164:	003e      	movs	r6, r7
 8002166:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002168:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800216a:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 800216c:	9f00      	ldr	r7, [sp, #0]
 800216e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002170:	0292      	lsls	r2, r2, #10
 8002172:	d401      	bmi.n	8002178 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8002174:	402e      	ands	r6, r5
 8002176:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002178:	60e7      	str	r7, [r4, #12]
    position++;
 800217a:	3301      	adds	r3, #1
 800217c:	e762      	b.n	8002044 <HAL_GPIO_Init+0xc>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	48000c00 	.word	0x48000c00
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002198:	6900      	ldr	r0, [r0, #16]
 800219a:	4008      	ands	r0, r1
 800219c:	1e41      	subs	r1, r0, #1
 800219e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80021a0:	b2c0      	uxtb	r0, r0
  }
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d001      	beq.n	80021ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021a8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021aa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ac:	6281      	str	r1, [r0, #40]	; 0x28
}
 80021ae:	e7fc      	b.n	80021aa <HAL_GPIO_WritePin+0x6>

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	0004      	movs	r4, r0
 80021b4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80021ba:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80021bc:	b005      	add	sp, #20
 80021be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c0:	6803      	ldr	r3, [r0, #0]
 80021c2:	07db      	lsls	r3, r3, #31
 80021c4:	d42e      	bmi.n	8002224 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	079b      	lsls	r3, r3, #30
 80021ca:	d47e      	bmi.n	80022ca <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	071b      	lsls	r3, r3, #28
 80021d0:	d500      	bpl.n	80021d4 <HAL_RCC_OscConfig+0x24>
 80021d2:	e0ba      	b.n	800234a <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	075b      	lsls	r3, r3, #29
 80021d8:	d500      	bpl.n	80021dc <HAL_RCC_OscConfig+0x2c>
 80021da:	e0dd      	b.n	8002398 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	06db      	lsls	r3, r3, #27
 80021e0:	d51a      	bpl.n	8002218 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021e2:	6962      	ldr	r2, [r4, #20]
 80021e4:	4db4      	ldr	r5, [pc, #720]	; (80024b8 <HAL_RCC_OscConfig+0x308>)
 80021e6:	2304      	movs	r3, #4
 80021e8:	2a01      	cmp	r2, #1
 80021ea:	d000      	beq.n	80021ee <HAL_RCC_OscConfig+0x3e>
 80021ec:	e149      	b.n	8002482 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021f0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80021f2:	430b      	orrs	r3, r1
 80021f4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80021f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021f8:	431a      	orrs	r2, r3
 80021fa:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80021fc:	f7ff fcc2 	bl	8001b84 <HAL_GetTick>
 8002200:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002202:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002204:	4233      	tst	r3, r6
 8002206:	d100      	bne.n	800220a <HAL_RCC_OscConfig+0x5a>
 8002208:	e134      	b.n	8002474 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800220a:	21f8      	movs	r1, #248	; 0xf8
 800220c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800220e:	69a3      	ldr	r3, [r4, #24]
 8002210:	438a      	bics	r2, r1
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4313      	orrs	r3, r2
 8002216:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	6a23      	ldr	r3, [r4, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d000      	beq.n	8002220 <HAL_RCC_OscConfig+0x70>
 800221e:	e157      	b.n	80024d0 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8002220:	2000      	movs	r0, #0
 8002222:	e7cb      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002224:	210c      	movs	r1, #12
 8002226:	4da4      	ldr	r5, [pc, #656]	; (80024b8 <HAL_RCC_OscConfig+0x308>)
 8002228:	686a      	ldr	r2, [r5, #4]
 800222a:	400a      	ands	r2, r1
 800222c:	2a04      	cmp	r2, #4
 800222e:	d006      	beq.n	800223e <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	686b      	ldr	r3, [r5, #4]
 8002232:	400b      	ands	r3, r1
 8002234:	2b08      	cmp	r3, #8
 8002236:	d109      	bne.n	800224c <HAL_RCC_OscConfig+0x9c>
 8002238:	686b      	ldr	r3, [r5, #4]
 800223a:	03db      	lsls	r3, r3, #15
 800223c:	d506      	bpl.n	800224c <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	682b      	ldr	r3, [r5, #0]
 8002240:	039b      	lsls	r3, r3, #14
 8002242:	d5c0      	bpl.n	80021c6 <HAL_RCC_OscConfig+0x16>
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1bd      	bne.n	80021c6 <HAL_RCC_OscConfig+0x16>
 800224a:	e7b6      	b.n	80021ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d113      	bne.n	800227a <HAL_RCC_OscConfig+0xca>
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	682a      	ldr	r2, [r5, #0]
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	4313      	orrs	r3, r2
 800225a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800225c:	f7ff fc92 	bl	8001b84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002260:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002262:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002264:	02b6      	lsls	r6, r6, #10
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	4233      	tst	r3, r6
 800226a:	d1ac      	bne.n	80021c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fc8a 	bl	8001b84 <HAL_GetTick>
 8002270:	1bc0      	subs	r0, r0, r7
 8002272:	2864      	cmp	r0, #100	; 0x64
 8002274:	d9f7      	bls.n	8002266 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
 8002278:	e7a0      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_RCC_OscConfig+0xfa>
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	4a8e      	ldr	r2, [pc, #568]	; (80024bc <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	4013      	ands	r3, r2
 8002286:	602b      	str	r3, [r5, #0]
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	4a8d      	ldr	r2, [pc, #564]	; (80024c0 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	4013      	ands	r3, r2
 8002290:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002292:	f7ff fc77 	bl	8001b84 <HAL_GetTick>
 8002296:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	4233      	tst	r3, r6
 800229c:	d093      	beq.n	80021c6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229e:	f7ff fc71 	bl	8001b84 <HAL_GetTick>
 80022a2:	1bc0      	subs	r0, r0, r7
 80022a4:	2864      	cmp	r0, #100	; 0x64
 80022a6:	d9f7      	bls.n	8002298 <HAL_RCC_OscConfig+0xe8>
 80022a8:	e7e5      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x10a>
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	682a      	ldr	r2, [r5, #0]
 80022b2:	02db      	lsls	r3, r3, #11
 80022b4:	4313      	orrs	r3, r2
 80022b6:	602b      	str	r3, [r5, #0]
 80022b8:	e7cb      	b.n	8002252 <HAL_RCC_OscConfig+0xa2>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x30c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	602b      	str	r3, [r5, #0]
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x310>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	e7c7      	b.n	800225a <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022ca:	220c      	movs	r2, #12
 80022cc:	4d7a      	ldr	r5, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x308>)
 80022ce:	686b      	ldr	r3, [r5, #4]
 80022d0:	4213      	tst	r3, r2
 80022d2:	d006      	beq.n	80022e2 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022d4:	686b      	ldr	r3, [r5, #4]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d111      	bne.n	8002300 <HAL_RCC_OscConfig+0x150>
 80022dc:	686b      	ldr	r3, [r5, #4]
 80022de:	03db      	lsls	r3, r3, #15
 80022e0:	d40e      	bmi.n	8002300 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	079b      	lsls	r3, r3, #30
 80022e6:	d503      	bpl.n	80022f0 <HAL_RCC_OscConfig+0x140>
 80022e8:	68e3      	ldr	r3, [r4, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d000      	beq.n	80022f0 <HAL_RCC_OscConfig+0x140>
 80022ee:	e764      	b.n	80021ba <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	21f8      	movs	r1, #248	; 0xf8
 80022f2:	682a      	ldr	r2, [r5, #0]
 80022f4:	6923      	ldr	r3, [r4, #16]
 80022f6:	438a      	bics	r2, r1
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	e765      	b.n	80021cc <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002300:	68e2      	ldr	r2, [r4, #12]
 8002302:	2301      	movs	r3, #1
 8002304:	2a00      	cmp	r2, #0
 8002306:	d00f      	beq.n	8002328 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002308:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800230c:	4313      	orrs	r3, r2
 800230e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002310:	f7ff fc38 	bl	8001b84 <HAL_GetTick>
 8002314:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	4233      	tst	r3, r6
 800231a:	d1e9      	bne.n	80022f0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff fc32 	bl	8001b84 <HAL_GetTick>
 8002320:	1bc0      	subs	r0, r0, r7
 8002322:	2802      	cmp	r0, #2
 8002324:	d9f7      	bls.n	8002316 <HAL_RCC_OscConfig+0x166>
 8002326:	e7a6      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8002328:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800232c:	439a      	bics	r2, r3
 800232e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002330:	f7ff fc28 	bl	8001b84 <HAL_GetTick>
 8002334:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	4233      	tst	r3, r6
 800233a:	d100      	bne.n	800233e <HAL_RCC_OscConfig+0x18e>
 800233c:	e746      	b.n	80021cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fc21 	bl	8001b84 <HAL_GetTick>
 8002342:	1bc0      	subs	r0, r0, r7
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x186>
 8002348:	e795      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234a:	69e2      	ldr	r2, [r4, #28]
 800234c:	2301      	movs	r3, #1
 800234e:	4d5a      	ldr	r5, [pc, #360]	; (80024b8 <HAL_RCC_OscConfig+0x308>)
 8002350:	2a00      	cmp	r2, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002354:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8002358:	4313      	orrs	r3, r2
 800235a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800235c:	f7ff fc12 	bl	8001b84 <HAL_GetTick>
 8002360:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002364:	4233      	tst	r3, r6
 8002366:	d000      	beq.n	800236a <HAL_RCC_OscConfig+0x1ba>
 8002368:	e734      	b.n	80021d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7ff fc0b 	bl	8001b84 <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	2802      	cmp	r0, #2
 8002372:	d9f6      	bls.n	8002362 <HAL_RCC_OscConfig+0x1b2>
 8002374:	e77f      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8002376:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800237a:	439a      	bics	r2, r3
 800237c:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800237e:	f7ff fc01 	bl	8001b84 <HAL_GetTick>
 8002382:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002386:	4233      	tst	r3, r6
 8002388:	d100      	bne.n	800238c <HAL_RCC_OscConfig+0x1dc>
 800238a:	e723      	b.n	80021d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fbfa 	bl	8001b84 <HAL_GetTick>
 8002390:	1bc0      	subs	r0, r0, r7
 8002392:	2802      	cmp	r0, #2
 8002394:	d9f6      	bls.n	8002384 <HAL_RCC_OscConfig+0x1d4>
 8002396:	e76e      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239c:	4d46      	ldr	r5, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x308>)
 800239e:	0552      	lsls	r2, r2, #21
 80023a0:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a4:	4213      	tst	r3, r2
 80023a6:	d108      	bne.n	80023ba <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	69eb      	ldr	r3, [r5, #28]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61eb      	str	r3, [r5, #28]
 80023ae:	69eb      	ldr	r3, [r5, #28]
 80023b0:	4013      	ands	r3, r2
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	2780      	movs	r7, #128	; 0x80
 80023bc:	4e41      	ldr	r6, [pc, #260]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80023be:	007f      	lsls	r7, r7, #1
 80023c0:	6833      	ldr	r3, [r6, #0]
 80023c2:	423b      	tst	r3, r7
 80023c4:	d006      	beq.n	80023d4 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	68a3      	ldr	r3, [r4, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d113      	bne.n	80023f4 <HAL_RCC_OscConfig+0x244>
 80023cc:	6a2a      	ldr	r2, [r5, #32]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	622b      	str	r3, [r5, #32]
 80023d2:	e030      	b.n	8002436 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d4:	6833      	ldr	r3, [r6, #0]
 80023d6:	433b      	orrs	r3, r7
 80023d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023da:	f7ff fbd3 	bl	8001b84 <HAL_GetTick>
 80023de:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	6833      	ldr	r3, [r6, #0]
 80023e2:	423b      	tst	r3, r7
 80023e4:	d1ef      	bne.n	80023c6 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7ff fbcd 	bl	8001b84 <HAL_GetTick>
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	1ac0      	subs	r0, r0, r3
 80023ee:	2864      	cmp	r0, #100	; 0x64
 80023f0:	d9f6      	bls.n	80023e0 <HAL_RCC_OscConfig+0x230>
 80023f2:	e740      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
 80023f4:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <HAL_RCC_OscConfig+0x274>
 80023fa:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fe:	4393      	bics	r3, r2
 8002400:	622b      	str	r3, [r5, #32]
 8002402:	6a2b      	ldr	r3, [r5, #32]
 8002404:	3203      	adds	r2, #3
 8002406:	4393      	bics	r3, r2
 8002408:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800240a:	f7ff fbbb 	bl	8001b84 <HAL_GetTick>
 800240e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	6a2b      	ldr	r3, [r5, #32]
 8002412:	423b      	tst	r3, r7
 8002414:	d025      	beq.n	8002462 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff fbb5 	bl	8001b84 <HAL_GetTick>
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_OscConfig+0x318>)
 800241c:	1b80      	subs	r0, r0, r6
 800241e:	4298      	cmp	r0, r3
 8002420:	d9f6      	bls.n	8002410 <HAL_RCC_OscConfig+0x260>
 8002422:	e728      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x290>
 8002428:	6a29      	ldr	r1, [r5, #32]
 800242a:	3b01      	subs	r3, #1
 800242c:	430b      	orrs	r3, r1
 800242e:	622b      	str	r3, [r5, #32]
 8002430:	6a2b      	ldr	r3, [r5, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002436:	f7ff fba5 	bl	8001b84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800243c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	e00d      	b.n	800245c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	6a2b      	ldr	r3, [r5, #32]
 8002442:	4393      	bics	r3, r2
 8002444:	2204      	movs	r2, #4
 8002446:	622b      	str	r3, [r5, #32]
 8002448:	6a2b      	ldr	r3, [r5, #32]
 800244a:	4393      	bics	r3, r2
 800244c:	e7c0      	b.n	80023d0 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fb99 	bl	8001b84 <HAL_GetTick>
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_OscConfig+0x318>)
 8002454:	1b80      	subs	r0, r0, r6
 8002456:	4298      	cmp	r0, r3
 8002458:	d900      	bls.n	800245c <HAL_RCC_OscConfig+0x2ac>
 800245a:	e70c      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	6a2b      	ldr	r3, [r5, #32]
 800245e:	423b      	tst	r3, r7
 8002460:	d0f5      	beq.n	800244e <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8002462:	9b00      	ldr	r3, [sp, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d000      	beq.n	800246a <HAL_RCC_OscConfig+0x2ba>
 8002468:	e6b8      	b.n	80021dc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	69eb      	ldr	r3, [r5, #28]
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_RCC_OscConfig+0x31c>)
 800246e:	4013      	ands	r3, r2
 8002470:	61eb      	str	r3, [r5, #28]
 8002472:	e6b3      	b.n	80021dc <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002474:	f7ff fb86 	bl	8001b84 <HAL_GetTick>
 8002478:	1bc0      	subs	r0, r0, r7
 800247a:	2802      	cmp	r0, #2
 800247c:	d800      	bhi.n	8002480 <HAL_RCC_OscConfig+0x2d0>
 800247e:	e6c0      	b.n	8002202 <HAL_RCC_OscConfig+0x52>
 8002480:	e6f9      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002482:	3205      	adds	r2, #5
 8002484:	d103      	bne.n	800248e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002486:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002488:	439a      	bics	r2, r3
 800248a:	636a      	str	r2, [r5, #52]	; 0x34
 800248c:	e6bd      	b.n	800220a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 800248e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002490:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002492:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002494:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002496:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002498:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800249a:	4393      	bics	r3, r2
 800249c:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800249e:	f7ff fb71 	bl	8001b84 <HAL_GetTick>
 80024a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024a6:	4233      	tst	r3, r6
 80024a8:	d100      	bne.n	80024ac <HAL_RCC_OscConfig+0x2fc>
 80024aa:	e6b5      	b.n	8002218 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024ac:	f7ff fb6a 	bl	8001b84 <HAL_GetTick>
 80024b0:	1bc0      	subs	r0, r0, r7
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d9f6      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2f4>
 80024b6:	e6de      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	fffeffff 	.word	0xfffeffff
 80024c0:	fffbffff 	.word	0xfffbffff
 80024c4:	40007000 	.word	0x40007000
 80024c8:	00001388 	.word	0x00001388
 80024cc:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d0:	200c      	movs	r0, #12
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x3f8>)
 80024d4:	6851      	ldr	r1, [r2, #4]
 80024d6:	0015      	movs	r5, r2
 80024d8:	4001      	ands	r1, r0
 80024da:	2908      	cmp	r1, #8
 80024dc:	d047      	beq.n	800256e <HAL_RCC_OscConfig+0x3be>
 80024de:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d132      	bne.n	800254a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 80024e4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4013      	ands	r3, r2
 80024ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024ec:	f7ff fb4a 	bl	8001b84 <HAL_GetTick>
 80024f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	04b6      	lsls	r6, r6, #18
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	4233      	tst	r3, r6
 80024f8:	d121      	bne.n	800253e <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fa:	220f      	movs	r2, #15
 80024fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80024fe:	4393      	bics	r3, r2
 8002500:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002502:	4313      	orrs	r3, r2
 8002504:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002506:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800250a:	686a      	ldr	r2, [r5, #4]
 800250c:	430b      	orrs	r3, r1
 800250e:	4928      	ldr	r1, [pc, #160]	; (80025b0 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002512:	400a      	ands	r2, r1
 8002514:	4313      	orrs	r3, r2
 8002516:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	682a      	ldr	r2, [r5, #0]
 800251c:	045b      	lsls	r3, r3, #17
 800251e:	4313      	orrs	r3, r2
 8002520:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002522:	f7ff fb2f 	bl	8001b84 <HAL_GetTick>
 8002526:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	04a4      	lsls	r4, r4, #18
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	4223      	tst	r3, r4
 800252e:	d000      	beq.n	8002532 <HAL_RCC_OscConfig+0x382>
 8002530:	e676      	b.n	8002220 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff fb27 	bl	8001b84 <HAL_GetTick>
 8002536:	1b80      	subs	r0, r0, r6
 8002538:	2802      	cmp	r0, #2
 800253a:	d9f6      	bls.n	800252a <HAL_RCC_OscConfig+0x37a>
 800253c:	e69b      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7ff fb21 	bl	8001b84 <HAL_GetTick>
 8002542:	1bc0      	subs	r0, r0, r7
 8002544:	2802      	cmp	r0, #2
 8002546:	d9d5      	bls.n	80024f4 <HAL_RCC_OscConfig+0x344>
 8002548:	e695      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800254a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800254e:	4013      	ands	r3, r2
 8002550:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002552:	f7ff fb17 	bl	8001b84 <HAL_GetTick>
 8002556:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	04a4      	lsls	r4, r4, #18
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	4223      	tst	r3, r4
 800255e:	d100      	bne.n	8002562 <HAL_RCC_OscConfig+0x3b2>
 8002560:	e65e      	b.n	8002220 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff fb0f 	bl	8001b84 <HAL_GetTick>
 8002566:	1b80      	subs	r0, r0, r6
 8002568:	2802      	cmp	r0, #2
 800256a:	d9f6      	bls.n	800255a <HAL_RCC_OscConfig+0x3aa>
 800256c:	e683      	b.n	8002276 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 800256e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	2b01      	cmp	r3, #1
 8002572:	d100      	bne.n	8002576 <HAL_RCC_OscConfig+0x3c6>
 8002574:	e622      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002578:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800257c:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 800257e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002580:	4019      	ands	r1, r3
        return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	42a9      	cmp	r1, r5
 8002586:	d000      	beq.n	800258a <HAL_RCC_OscConfig+0x3da>
 8002588:	e618      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800258a:	210f      	movs	r1, #15
 800258c:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002590:	428a      	cmp	r2, r1
 8002592:	d000      	beq.n	8002596 <HAL_RCC_OscConfig+0x3e6>
 8002594:	e612      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002596:	20f0      	movs	r0, #240	; 0xf0
 8002598:	0380      	lsls	r0, r0, #14
 800259a:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800259c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	1e58      	subs	r0, r3, #1
 80025a2:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	e609      	b.n	80021bc <HAL_RCC_OscConfig+0xc>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	feffffff 	.word	0xfeffffff
 80025b0:	ffc2ffff 	.word	0xffc2ffff

080025b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025b6:	4c14      	ldr	r4, [pc, #80]	; (8002608 <HAL_RCC_GetSysClockFreq+0x54>)
{
 80025b8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025ba:	2210      	movs	r2, #16
 80025bc:	0021      	movs	r1, r4
 80025be:	4668      	mov	r0, sp
 80025c0:	f000 f8ee 	bl	80027a0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025c4:	0021      	movs	r1, r4
 80025c6:	ad04      	add	r5, sp, #16
 80025c8:	2210      	movs	r2, #16
 80025ca:	3110      	adds	r1, #16
 80025cc:	0028      	movs	r0, r5
 80025ce:	f000 f8e7 	bl	80027a0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d2:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80025d4:	4e0d      	ldr	r6, [pc, #52]	; (800260c <HAL_RCC_GetSysClockFreq+0x58>)
 80025d6:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	401a      	ands	r2, r3
 80025da:	2a08      	cmp	r2, #8
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025de:	200f      	movs	r0, #15
 80025e0:	466a      	mov	r2, sp
 80025e2:	0c99      	lsrs	r1, r3, #18
 80025e4:	4001      	ands	r1, r0
 80025e6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025e8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80025ea:	4002      	ands	r2, r0
 80025ec:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025ee:	03db      	lsls	r3, r3, #15
 80025f0:	d505      	bpl.n	80025fe <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <HAL_RCC_GetSysClockFreq+0x5c>)
 80025f4:	f7fd fd92 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025f8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025fa:	b008      	add	sp, #32
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <HAL_RCC_GetSysClockFreq+0x60>)
 8002600:	e7fa      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002602:	4803      	ldr	r0, [pc, #12]	; (8002610 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002604:	e7f9      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x46>
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	08002840 	.word	0x08002840
 800260c:	40021000 	.word	0x40021000
 8002610:	007a1200 	.word	0x007a1200
 8002614:	003d0900 	.word	0x003d0900

08002618 <HAL_RCC_ClockConfig>:
{
 8002618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800261a:	0005      	movs	r5, r0
 800261c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800261e:	2800      	cmp	r0, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
}
 8002624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002626:	2201      	movs	r2, #1
 8002628:	4c37      	ldr	r4, [pc, #220]	; (8002708 <HAL_RCC_ClockConfig+0xf0>)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	4013      	ands	r3, r2
 800262e:	428b      	cmp	r3, r1
 8002630:	d31c      	bcc.n	800266c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002632:	6829      	ldr	r1, [r5, #0]
 8002634:	078b      	lsls	r3, r1, #30
 8002636:	d422      	bmi.n	800267e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002638:	07cb      	lsls	r3, r1, #31
 800263a:	d42f      	bmi.n	800269c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	2301      	movs	r3, #1
 800263e:	6822      	ldr	r2, [r4, #0]
 8002640:	401a      	ands	r2, r3
 8002642:	42ba      	cmp	r2, r7
 8002644:	d851      	bhi.n	80026ea <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002646:	682b      	ldr	r3, [r5, #0]
 8002648:	4c30      	ldr	r4, [pc, #192]	; (800270c <HAL_RCC_ClockConfig+0xf4>)
 800264a:	075b      	lsls	r3, r3, #29
 800264c:	d454      	bmi.n	80026f8 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800264e:	f7ff ffb1 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_RCC_ClockConfig+0xf8>)
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	0f1b      	lsrs	r3, r3, #28
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	40d8      	lsrs	r0, r3
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0xfc>)
 8002660:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff fa4e 	bl	8001b04 <HAL_InitTick>
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	e7db      	b.n	8002624 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	4393      	bics	r3, r2
 8002670:	430b      	orrs	r3, r1
 8002672:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	4013      	ands	r3, r2
 8002678:	428b      	cmp	r3, r1
 800267a:	d1d2      	bne.n	8002622 <HAL_RCC_ClockConfig+0xa>
 800267c:	e7d9      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a>
 800267e:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	074b      	lsls	r3, r1, #29
 8002682:	d504      	bpl.n	800268e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002684:	23e0      	movs	r3, #224	; 0xe0
 8002686:	6850      	ldr	r0, [r2, #4]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4303      	orrs	r3, r0
 800268c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	20f0      	movs	r0, #240	; 0xf0
 8002690:	6853      	ldr	r3, [r2, #4]
 8002692:	4383      	bics	r3, r0
 8002694:	68a8      	ldr	r0, [r5, #8]
 8002696:	4303      	orrs	r3, r0
 8002698:	6053      	str	r3, [r2, #4]
 800269a:	e7cd      	b.n	8002638 <HAL_RCC_ClockConfig+0x20>
 800269c:	4e1b      	ldr	r6, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	2a01      	cmp	r2, #1
 80026a4:	d119      	bne.n	80026da <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	039b      	lsls	r3, r3, #14
 80026a8:	d5bb      	bpl.n	8002622 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	2103      	movs	r1, #3
 80026ac:	6873      	ldr	r3, [r6, #4]
 80026ae:	438b      	bics	r3, r1
 80026b0:	4313      	orrs	r3, r2
 80026b2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80026b4:	f7ff fa66 	bl	8001b84 <HAL_GetTick>
 80026b8:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	230c      	movs	r3, #12
 80026bc:	6872      	ldr	r2, [r6, #4]
 80026be:	401a      	ands	r2, r3
 80026c0:	686b      	ldr	r3, [r5, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0b9      	beq.n	800263c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff fa5c 	bl	8001b84 <HAL_GetTick>
 80026cc:	9b01      	ldr	r3, [sp, #4]
 80026ce:	1ac0      	subs	r0, r0, r3
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_RCC_ClockConfig+0x100>)
 80026d2:	4298      	cmp	r0, r3
 80026d4:	d9f1      	bls.n	80026ba <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80026d6:	2003      	movs	r0, #3
 80026d8:	e7a4      	b.n	8002624 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	2a02      	cmp	r2, #2
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	019b      	lsls	r3, r3, #6
 80026e0:	d4e3      	bmi.n	80026aa <HAL_RCC_ClockConfig+0x92>
 80026e2:	e79e      	b.n	8002622 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	079b      	lsls	r3, r3, #30
 80026e6:	d4e0      	bmi.n	80026aa <HAL_RCC_ClockConfig+0x92>
 80026e8:	e79b      	b.n	8002622 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	439a      	bics	r2, r3
 80026ee:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	421a      	tst	r2, r3
 80026f4:	d0a7      	beq.n	8002646 <HAL_RCC_ClockConfig+0x2e>
 80026f6:	e794      	b.n	8002622 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_ClockConfig+0x104>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	68ea      	ldr	r2, [r5, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	e7a3      	b.n	800264e <HAL_RCC_ClockConfig+0x36>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	08003e15 	.word	0x08003e15
 8002714:	2000001c 	.word	0x2000001c
 8002718:	00001388 	.word	0x00001388
 800271c:	fffff8ff 	.word	0xfffff8ff

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2600      	movs	r6, #0
 8002724:	4d0c      	ldr	r5, [pc, #48]	; (8002758 <__libc_init_array+0x38>)
 8002726:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	2600      	movs	r6, #0
 8002732:	f000 f879 	bl	8002828 <_init>
 8002736:	4d0a      	ldr	r5, [pc, #40]	; (8002760 <__libc_init_array+0x40>)
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <__libc_init_array+0x44>)
 800273a:	1b64      	subs	r4, r4, r5
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	00b3      	lsls	r3, r6, #2
 8002746:	58eb      	ldr	r3, [r5, r3]
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	00b3      	lsls	r3, r6, #2
 8002750:	58eb      	ldr	r3, [r5, r3]
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	08003e4c 	.word	0x08003e4c
 800275c:	08003e4c 	.word	0x08003e4c
 8002760:	08003e4c 	.word	0x08003e4c
 8002764:	08003e50 	.word	0x08003e50

08002768 <__itoa>:
 8002768:	1e93      	subs	r3, r2, #2
 800276a:	b510      	push	{r4, lr}
 800276c:	000c      	movs	r4, r1
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	d904      	bls.n	800277c <__itoa+0x14>
 8002772:	2300      	movs	r3, #0
 8002774:	001c      	movs	r4, r3
 8002776:	700b      	strb	r3, [r1, #0]
 8002778:	0020      	movs	r0, r4
 800277a:	bd10      	pop	{r4, pc}
 800277c:	2a0a      	cmp	r2, #10
 800277e:	d109      	bne.n	8002794 <__itoa+0x2c>
 8002780:	2800      	cmp	r0, #0
 8002782:	da07      	bge.n	8002794 <__itoa+0x2c>
 8002784:	232d      	movs	r3, #45	; 0x2d
 8002786:	700b      	strb	r3, [r1, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	4240      	negs	r0, r0
 800278c:	1861      	adds	r1, r4, r1
 800278e:	f000 f819 	bl	80027c4 <__utoa>
 8002792:	e7f1      	b.n	8002778 <__itoa+0x10>
 8002794:	2100      	movs	r1, #0
 8002796:	e7f9      	b.n	800278c <__itoa+0x24>

08002798 <itoa>:
 8002798:	b510      	push	{r4, lr}
 800279a:	f7ff ffe5 	bl	8002768 <__itoa>
 800279e:	bd10      	pop	{r4, pc}

080027a0 <memcpy>:
 80027a0:	2300      	movs	r3, #0
 80027a2:	b510      	push	{r4, lr}
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d100      	bne.n	80027aa <memcpy+0xa>
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	5ccc      	ldrb	r4, [r1, r3]
 80027ac:	54c4      	strb	r4, [r0, r3]
 80027ae:	3301      	adds	r3, #1
 80027b0:	e7f8      	b.n	80027a4 <memcpy+0x4>

080027b2 <memset>:
 80027b2:	0003      	movs	r3, r0
 80027b4:	1812      	adds	r2, r2, r0
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d100      	bne.n	80027bc <memset+0xa>
 80027ba:	4770      	bx	lr
 80027bc:	7019      	strb	r1, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	e7f9      	b.n	80027b6 <memset+0x4>
	...

080027c4 <__utoa>:
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c6:	0017      	movs	r7, r2
 80027c8:	b08d      	sub	sp, #52	; 0x34
 80027ca:	2225      	movs	r2, #37	; 0x25
 80027cc:	0006      	movs	r6, r0
 80027ce:	000d      	movs	r5, r1
 80027d0:	a802      	add	r0, sp, #8
 80027d2:	4914      	ldr	r1, [pc, #80]	; (8002824 <__utoa+0x60>)
 80027d4:	f7ff ffe4 	bl	80027a0 <memcpy>
 80027d8:	aa02      	add	r2, sp, #8
 80027da:	1ebb      	subs	r3, r7, #2
 80027dc:	2400      	movs	r4, #0
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	2b22      	cmp	r3, #34	; 0x22
 80027e2:	d905      	bls.n	80027f0 <__utoa+0x2c>
 80027e4:	702c      	strb	r4, [r5, #0]
 80027e6:	0025      	movs	r5, r4
 80027e8:	0028      	movs	r0, r5
 80027ea:	b00d      	add	sp, #52	; 0x34
 80027ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ee:	0014      	movs	r4, r2
 80027f0:	0030      	movs	r0, r6
 80027f2:	0039      	movs	r1, r7
 80027f4:	f7fd fd18 	bl	8000228 <__aeabi_uidivmod>
 80027f8:	4684      	mov	ip, r0
 80027fa:	9801      	ldr	r0, [sp, #4]
 80027fc:	1c62      	adds	r2, r4, #1
 80027fe:	18ab      	adds	r3, r5, r2
 8002800:	5c41      	ldrb	r1, [r0, r1]
 8002802:	1e5e      	subs	r6, r3, #1
 8002804:	7031      	strb	r1, [r6, #0]
 8002806:	4666      	mov	r6, ip
 8002808:	2e00      	cmp	r6, #0
 800280a:	d1f0      	bne.n	80027ee <__utoa+0x2a>
 800280c:	701e      	strb	r6, [r3, #0]
 800280e:	002b      	movs	r3, r5
 8002810:	1b5a      	subs	r2, r3, r5
 8002812:	4294      	cmp	r4, r2
 8002814:	dde8      	ble.n	80027e8 <__utoa+0x24>
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	5d29      	ldrb	r1, [r5, r4]
 800281a:	7019      	strb	r1, [r3, #0]
 800281c:	552a      	strb	r2, [r5, r4]
 800281e:	3301      	adds	r3, #1
 8002820:	3c01      	subs	r4, #1
 8002822:	e7f5      	b.n	8002810 <__utoa+0x4c>
 8002824:	08003e25 	.word	0x08003e25

08002828 <_init>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr

08002834 <_fini>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr
