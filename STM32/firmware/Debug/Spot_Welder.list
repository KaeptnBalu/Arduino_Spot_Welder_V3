
Spot_Welder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015bc  080022b4  080022b4  000122b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003870  08003870  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003870  08003870  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003870  08003870  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000030  080038a8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080038a8  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9f2  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029df  00000000  00000000  0002da4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000029ad  00000000  00000000  00030429  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000758  00000000  00000000  00032dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009d8  00000000  00000000  00033530  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d083  00000000  00000000  00033f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009ee4  00000000  00000000  00040f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00041d1e  00000000  00000000  0004ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008cb8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001210  00000000  00000000  0008cc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800229c 	.word	0x0800229c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	0800229c 	.word	0x0800229c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	a801      	add	r0, sp, #4
 800023c:	f001 fff3 	bl	8002226 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8000242:	4c16      	ldr	r4, [pc, #88]	; (800029c <MX_ADC_Init+0x68>)
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_ADC_Init+0x6c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000246:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000248:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 800024a:	2208      	movs	r2, #8
  hadc.Instance = ADC1;
 800024c:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000252:	60a2      	str	r2, [r4, #8]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	61e1      	str	r1, [r4, #28]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000256:	3a07      	subs	r2, #7
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000258:	1d61      	adds	r1, r4, #5
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800025a:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025c:	6063      	str	r3, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000262:	7623      	strb	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000264:	7663      	strb	r3, [r4, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000266:	76a2      	strb	r2, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	76e3      	strb	r3, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800026a:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026c:	77cb      	strb	r3, [r1, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000270:	f001 fab4 	bl	80017dc <HAL_ADC_Init>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8000278:	f000 f97a 	bl	8000570 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027c:	2280      	movs	r2, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 800027e:	2305      	movs	r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000280:	0152      	lsls	r2, r2, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000282:	a901      	add	r1, sp, #4
 8000284:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000286:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000288:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800028a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028c:	f001 fb4c 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC_Init+0x64>
  {
    Error_Handler();
 8000294:	f000 f96c 	bl	8000570 <Error_Handler>
  }

}
 8000298:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000478 	.word	0x20000478
 80002a0:	40012400 	.word	0x40012400

080002a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	0004      	movs	r4, r0
 80002a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	2214      	movs	r2, #20
 80002ac:	2100      	movs	r1, #0
 80002ae:	a803      	add	r0, sp, #12
 80002b0:	f001 ffb9 	bl	8002226 <memset>
  if(adcHandle->Instance==ADC1)
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <HAL_ADC_MspInit+0x54>)
 80002b6:	6822      	ldr	r2, [r4, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d11b      	bne.n	80002f4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <HAL_ADC_MspInit+0x58>)
 80002c0:	0080      	lsls	r0, r0, #2
 80002c2:	6999      	ldr	r1, [r3, #24]
 80002c4:	4301      	orrs	r1, r0
 80002c6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ca:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ce:	4002      	ands	r2, r0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	695a      	ldr	r2, [r3, #20]
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002d6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002de:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	400b      	ands	r3, r1
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002e6:	2320      	movs	r3, #32
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	3b1d      	subs	r3, #29
 80002ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f001 fbdc 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002f4:	b008      	add	sp, #32
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	40012400 	.word	0x40012400
 80002fc:	40021000 	.word	0x40021000

08000300 <Button_Attach>:
static Button_Struct_t* Button_Struct_PTR_Array[MAX_BUTTONS];

static uint8_t Attached_Buttons = 0;

uint8_t Button_Attach(Button_Struct_t*  Button_Struct_PTR)
{
 8000300:	b510      	push	{r4, lr}
 8000302:	0004      	movs	r4, r0
	//init GPIOs as input

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000304:	2080      	movs	r0, #128	; 0x80
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <Button_Attach+0x8c>)
 8000308:	0300      	lsls	r0, r0, #12
 800030a:	6959      	ldr	r1, [r3, #20]
{
 800030c:	b08a      	sub	sp, #40	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800030e:	4301      	orrs	r1, r0
 8000310:	6159      	str	r1, [r3, #20]
 8000312:	695a      	ldr	r2, [r3, #20]
 8000314:	4002      	ands	r2, r0
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000316:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000318:	9201      	str	r2, [sp, #4]
 800031a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800031c:	6959      	ldr	r1, [r3, #20]
 800031e:	0340      	lsls	r0, r0, #13
 8000320:	4301      	orrs	r1, r0
 8000322:	6159      	str	r1, [r3, #20]
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	4002      	ands	r2, r0
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000328:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800032e:	6959      	ldr	r1, [r3, #20]
 8000330:	0280      	lsls	r0, r0, #10
 8000332:	4301      	orrs	r1, r0
 8000334:	6159      	str	r1, [r3, #20]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000336:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000338:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800033a:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800033c:	4002      	ands	r2, r0
 800033e:	9203      	str	r2, [sp, #12]
 8000340:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	430a      	orrs	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	400b      	ands	r3, r1
 800034c:	9304      	str	r3, [sp, #16]
 800034e:	9b04      	ldr	r3, [sp, #16]
	;

	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 8000350:	8823      	ldrh	r3, [r4, #0]
 8000352:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000354:	2300      	movs	r3, #0
 8000356:	9306      	str	r3, [sp, #24]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 8000358:	7a23      	ldrb	r3, [r4, #8]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d113      	bne.n	8000386 <Button_Attach+0x86>
	{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035e:	3301      	adds	r3, #1
	}
	else
	{
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	}
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000360:	a905      	add	r1, sp, #20
 8000362:	6860      	ldr	r0, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000364:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000366:	f001 fba1 	bl	8001aac <HAL_GPIO_Init>

	Button_Struct_PTR->Button_Clicked_Count = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 800036e:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 8000370:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 8000372:	6123      	str	r3, [r4, #16]

	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <Button_Attach+0x90>)
 8000376:	4a07      	ldr	r2, [pc, #28]	; (8000394 <Button_Attach+0x94>)
 8000378:	7818      	ldrb	r0, [r3, #0]
 800037a:	0081      	lsls	r1, r0, #2
 800037c:	508c      	str	r4, [r1, r2]

	Attached_Buttons++;
 800037e:	1c42      	adds	r2, r0, #1
 8000380:	701a      	strb	r2, [r3, #0]
	if (Attached_Buttons > MAX_BUTTONS)
	{
		//Error
	}
	return (Attached_Buttons - 1);//return button ID
}
 8000382:	b00a      	add	sp, #40	; 0x28
 8000384:	bd10      	pop	{r4, pc}
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000386:	2302      	movs	r3, #2
 8000388:	e7ea      	b.n	8000360 <Button_Attach+0x60>
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40021000 	.word	0x40021000
 8000390:	2000004c 	.word	0x2000004c
 8000394:	20000054 	.word	0x20000054

08000398 <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
{
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static volatile uint32_t Button_Scan_Time_Stamp = 0;
	Button_Struct_t *PTR = NULL;

	if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 800039a:	f001 fa07 	bl	80017ac <HAL_GetTick>
 800039e:	4c28      	ldr	r4, [pc, #160]	; (8000440 <Button_Scan+0xa8>)
 80003a0:	6823      	ldr	r3, [r4, #0]
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	2804      	cmp	r0, #4
 80003a6:	d909      	bls.n	80003bc <Button_Scan+0x24>
	{
		Button_Scan_Time_Stamp = HAL_GetTick();
 80003a8:	f001 fa00 	bl	80017ac <HAL_GetTick>

		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003ac:	2500      	movs	r5, #0
					PTR->Button_Released_Ticks = 0;

				}
				else
				{   //long pressed detected
					PTR->Button_Event = Button_Long_Pressed;
 80003ae:	2703      	movs	r7, #3
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80003b0:	26ff      	movs	r6, #255	; 0xff
		Button_Scan_Time_Stamp = HAL_GetTick();
 80003b2:	6020      	str	r0, [r4, #0]
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <Button_Scan+0xac>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d800      	bhi.n	80003be <Button_Scan+0x26>
			}

		}

	}
}
 80003bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			PTR = Button_Struct_PTR_Array[Index];
 80003be:	4b22      	ldr	r3, [pc, #136]	; (8000448 <Button_Scan+0xb0>)
 80003c0:	00aa      	lsls	r2, r5, #2
 80003c2:	58d4      	ldr	r4, [r2, r3]
			if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port,
 80003c4:	8821      	ldrh	r1, [r4, #0]
 80003c6:	6860      	ldr	r0, [r4, #4]
 80003c8:	f001 fc20 	bl	8001c0c <HAL_GPIO_ReadPin>
 80003cc:	7a22      	ldrb	r2, [r4, #8]
 80003ce:	68e3      	ldr	r3, [r4, #12]
 80003d0:	4282      	cmp	r2, r0
 80003d2:	d11a      	bne.n	800040a <Button_Scan+0x72>
				PTR->Button_Pressed_Ticks++;	//
 80003d4:	3301      	adds	r3, #1
 80003d6:	60e3      	str	r3, [r4, #12]
				if (PTR->Button_Pressed_Ticks
 80003d8:	2bc7      	cmp	r3, #199	; 0xc7
 80003da:	d80b      	bhi.n	80003f4 <Button_Scan+0x5c>
					if (PTR->Button_Released_Ticks //repressed detected
 80003dc:	6923      	ldr	r3, [r4, #16]
 80003de:	2b1d      	cmp	r3, #29
 80003e0:	d806      	bhi.n	80003f0 <Button_Scan+0x58>
						PTR->Button_Event = Button_Repressed;
 80003e2:	2302      	movs	r3, #2
						PTR->Button_Event = Button_Pressed;
 80003e4:	7263      	strb	r3, [r4, #9]
					PTR->Button_Released_Ticks = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	6123      	str	r3, [r4, #16]
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 80003ea:	3501      	adds	r5, #1
 80003ec:	b2ed      	uxtb	r5, r5
 80003ee:	e7e1      	b.n	80003b4 <Button_Scan+0x1c>
						PTR->Button_Event = Button_Pressed;
 80003f0:	2301      	movs	r3, #1
 80003f2:	e7f7      	b.n	80003e4 <Button_Scan+0x4c>
					if (PTR->Callback != NULL)
 80003f4:	69a3      	ldr	r3, [r4, #24]
					PTR->Button_Event = Button_Long_Pressed;
 80003f6:	7267      	strb	r7, [r4, #9]
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80003f8:	7526      	strb	r6, [r4, #20]
						PTR->Callback(
 80003fa:	0030      	movs	r0, r6
					if (PTR->Callback != NULL)
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f4      	beq.n	80003ea <Button_Scan+0x52>
						PTR->Callback(
 8000400:	4798      	blx	r3
						PTR->Button_Clicked_Count = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	7523      	strb	r3, [r4, #20]
						PTR->Button_Event = Button_Idle;
 8000406:	7263      	strb	r3, [r4, #9]
 8000408:	e7ef      	b.n	80003ea <Button_Scan+0x52>
				PTR->Button_Released_Ticks++;
 800040a:	6922      	ldr	r2, [r4, #16]
 800040c:	3201      	adds	r2, #1
 800040e:	6122      	str	r2, [r4, #16]
				if (PTR->Button_Pressed_Ticks
 8000410:	2b0a      	cmp	r3, #10
 8000412:	d90a      	bls.n	800042a <Button_Scan+0x92>
					PTR->Button_Pressed_Ticks = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	60e3      	str	r3, [r4, #12]
					if (PTR->Button_Event == Button_Repressed)
 8000418:	7a63      	ldrb	r3, [r4, #9]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d103      	bne.n	8000426 <Button_Scan+0x8e>
						PTR->Button_Clicked_Count++;
 800041e:	7d23      	ldrb	r3, [r4, #20]
 8000420:	3301      	adds	r3, #1
						PTR->Button_Clicked_Count = 1;
 8000422:	7523      	strb	r3, [r4, #20]
 8000424:	e001      	b.n	800042a <Button_Scan+0x92>
					else if (PTR->Button_Event
 8000426:	2b01      	cmp	r3, #1
 8000428:	d0fb      	beq.n	8000422 <Button_Scan+0x8a>
				if (PTR->Button_Released_Ticks
 800042a:	2a32      	cmp	r2, #50	; 0x32
 800042c:	d9dd      	bls.n	80003ea <Button_Scan+0x52>
					if (PTR->Callback != NULL
 800042e:	69a3      	ldr	r3, [r4, #24]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0da      	beq.n	80003ea <Button_Scan+0x52>
							&& PTR->Button_Event != Button_Idle)
 8000434:	7a62      	ldrb	r2, [r4, #9]
 8000436:	2a00      	cmp	r2, #0
 8000438:	d0d7      	beq.n	80003ea <Button_Scan+0x52>
						PTR->Callback(
 800043a:	7d20      	ldrb	r0, [r4, #20]
 800043c:	e7e0      	b.n	8000400 <Button_Scan+0x68>
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000050 	.word	0x20000050
 8000444:	2000004c 	.word	0x2000004c
 8000448:	20000054 	.word	0x20000054

0800044c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	2214      	movs	r2, #20
 8000452:	2100      	movs	r1, #0
 8000454:	a803      	add	r0, sp, #12
 8000456:	f001 fee6 	bl	8002226 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	2080      	movs	r0, #128	; 0x80
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <MX_GPIO_Init+0xac>)
 800045e:	03c0      	lsls	r0, r0, #15
 8000460:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 8000462:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000464:	4301      	orrs	r1, r0
 8000466:	6159      	str	r1, [r3, #20]
 8000468:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000470:	9200      	str	r2, [sp, #0]
 8000472:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	6959      	ldr	r1, [r3, #20]
 8000476:	0280      	lsls	r0, r0, #10
 8000478:	4301      	orrs	r1, r0
 800047a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800047e:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4002      	ands	r2, r0
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 800048c:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	430a      	orrs	r2, r1
 8000490:	615a      	str	r2, [r3, #20]
 8000492:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	400b      	ands	r3, r1
 8000498:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 800049a:	0028      	movs	r0, r5
 800049c:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin, GPIO_PIN_RESET);
 80004a0:	f001 fbba 	bl	8001c18 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004a4:	a903      	add	r1, sp, #12
 80004a6:	4815      	ldr	r0, [pc, #84]	; (80004fc <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004ae:	f001 fafd 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Auto_Pulse_Pin_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin;
 80004b2:	23d1      	movs	r3, #209	; 0xd1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	a903      	add	r1, sp, #12
 80004b6:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = Auto_Pulse_Pin_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin;
 80004b8:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80004ba:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f001 faf4 	bl	8001aac <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80004c6:	a903      	add	r1, sp, #12
 80004c8:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 80004cc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f001 faeb 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	a903      	add	r1, sp, #12
 80004da:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 80004dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004de:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f001 fae3 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80004e6:	a903      	add	r1, sp, #12
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 80004ea:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80004f0:	f001 fadc 	bl	8001aac <HAL_GPIO_Init>

}
 80004f4:	b009      	add	sp, #36	; 0x24
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48001400 	.word	0x48001400
 8000500:	0000060c 	.word	0x0000060c
 8000504:	48000400 	.word	0x48000400

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	2510      	movs	r5, #16
{
 800050c:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	222c      	movs	r2, #44	; 0x2c
 8000510:	2100      	movs	r1, #0
 8000512:	a805      	add	r0, sp, #20
 8000514:	f001 fe87 	bl	8002226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	002a      	movs	r2, r5
 800051a:	2100      	movs	r1, #0
 800051c:	4668      	mov	r0, sp
 800051e:	f001 fe82 	bl	8002226 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000522:	2312      	movs	r3, #18
 8000524:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000526:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800052c:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800052e:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000534:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000538:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f001 fb72 	bl	8001c24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2307      	movs	r3, #7
 8000542:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000546:	0021      	movs	r1, r4
 8000548:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000550:	f001 fd9c 	bl	800208c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000554:	b011      	add	sp, #68	; 0x44
 8000556:	bd30      	pop	{r4, r5, pc}

08000558 <main>:
{
 8000558:	b510      	push	{r4, lr}
  HAL_Init();
 800055a:	f001 f90b 	bl	8001774 <HAL_Init>
  SystemClock_Config();
 800055e:	f7ff ffd3 	bl	8000508 <SystemClock_Config>
  MX_GPIO_Init();
 8000562:	f7ff ff73 	bl	800044c <MX_GPIO_Init>
  MX_ADC_Init();
 8000566:	f7ff fe65 	bl	8000234 <MX_ADC_Init>
  Spot_Welder_Main();
 800056a:	f000 feff 	bl	800136c <Spot_Welder_Main>
 800056e:	e7fe      	b.n	800056e <main+0x16>

08000570 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000570:	4770      	bx	lr
	...

08000574 <Encoder_Button_Callback>:
void (*Show_Page)(uint8_t screen);
void (*Execute_Page_Element)(uint8_t screen , uint8_t button, int16_t count);

void Encoder_Button_Callback(uint8_t Clicked_Count)
    {
    Encoder_Clicks = Clicked_Count;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <Encoder_Button_Callback+0x8>)
 8000576:	7018      	strb	r0, [r3, #0]
    }
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	20000011 	.word	0x20000011

08000580 <Change_Page>:

void Change_Page(uint8_t page_no)
    {

    switch (page_no)
 8000580:	2801      	cmp	r0, #1
 8000582:	d002      	beq.n	800058a <Change_Page+0xa>
 8000584:	2802      	cmp	r0, #2
 8000586:	d00e      	beq.n	80005a6 <Change_Page+0x26>
	Elements_In_Page = 4;
	Refresh_Screen = 1;
	break;
	}

    }
 8000588:	4770      	bx	lr
	Show_Page = Show_Page1;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <Change_Page+0x44>)
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <Change_Page+0x48>)
 800058e:	601a      	str	r2, [r3, #0]
	Execute_Page_Element = Execute_Page1_Element;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <Change_Page+0x4c>)
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <Change_Page+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
	Elements_In_Page = 4;
 8000596:	2204      	movs	r2, #4
	Page_Screen = 1;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <Change_Page+0x54>)
 800059a:	7018      	strb	r0, [r3, #0]
	Elements_In_Page = 4;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <Change_Page+0x58>)
 800059e:	701a      	strb	r2, [r3, #0]
	Refresh_Screen = 1;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <Change_Page+0x5c>)
 80005a2:	7018      	strb	r0, [r3, #0]
 80005a4:	e7f0      	b.n	8000588 <Change_Page+0x8>
	Show_Page = Show_Page2;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <Change_Page+0x44>)
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <Change_Page+0x60>)
	Elements_In_Page = 4;
 80005aa:	2104      	movs	r1, #4
	Show_Page = Show_Page2;
 80005ac:	601a      	str	r2, [r3, #0]
	Execute_Page_Element = Execute_Page2_Element;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <Change_Page+0x4c>)
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <Change_Page+0x64>)
 80005b2:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <Change_Page+0x54>)
 80005b8:	7013      	strb	r3, [r2, #0]
	Elements_In_Page = 4;
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <Change_Page+0x58>)
 80005bc:	7011      	strb	r1, [r2, #0]
	Refresh_Screen = 1;
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <Change_Page+0x5c>)
 80005c0:	7013      	strb	r3, [r2, #0]
    }
 80005c2:	e7e1      	b.n	8000588 <Change_Page+0x8>
 80005c4:	20000528 	.word	0x20000528
 80005c8:	080008c5 	.word	0x080008c5
 80005cc:	2000052c 	.word	0x2000052c
 80005d0:	08000bad 	.word	0x08000bad
 80005d4:	20000012 	.word	0x20000012
 80005d8:	20000010 	.word	0x20000010
 80005dc:	2000005c 	.word	0x2000005c
 80005e0:	08000da9 	.word	0x08000da9
 80005e4:	08000e75 	.word	0x08000e75

080005e8 <Init_Menu>:

void Init_Menu()
    {
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <Init_Menu+0x48>)
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Init_Menu+0x4c>)
    {
 80005ec:	b510      	push	{r4, lr}
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 80005ee:	6003      	str	r3, [r0, #0]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
    Encoder.Encoder_Pin_1 = ENCDR_A_Pin;
 80005f0:	2390      	movs	r3, #144	; 0x90
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	6043      	str	r3, [r0, #4]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
 80005f6:	6083      	str	r3, [r0, #8]
    Encoder.Encoder_Pin_1_Port = ENCDR_A_GPIO_Port;
    Encoder_Attach(&Encoder);
 80005f8:	f000 fc5c 	bl	8000eb4 <Encoder_Attach>

    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 80005fc:	2302      	movs	r3, #2
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
    Encoder_Button.Button_Pressed_Logic = LOW;
 80005fe:	2400      	movs	r4, #0
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <Init_Menu+0x50>)
 8000602:	8003      	strh	r3, [r0, #0]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <Init_Menu+0x54>)
    Encoder_Button.Button_Pressed_Logic = LOW;
 8000606:	7204      	strb	r4, [r0, #8]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 8000608:	6043      	str	r3, [r0, #4]
    Encoder_Button.Callback = Encoder_Button_Callback;
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <Init_Menu+0x58>)
 800060c:	6183      	str	r3, [r0, #24]
    Button_Attach(&Encoder_Button);
 800060e:	f7ff fe77 	bl	8000300 <Button_Attach>
	Show_Page = Show_Page1;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <Init_Menu+0x5c>)
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <Init_Menu+0x60>)
 8000616:	601a      	str	r2, [r3, #0]
	Execute_Page_Element = Execute_Page1_Element;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <Init_Menu+0x64>)
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <Init_Menu+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
	Page_Screen = 1;
 800061e:	2201      	movs	r2, #1
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <Init_Menu+0x6c>)
 8000622:	701a      	strb	r2, [r3, #0]
	Elements_In_Page = 4;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <Init_Menu+0x70>)
 8000626:	3203      	adds	r2, #3
 8000628:	701a      	strb	r2, [r3, #0]

    Change_Page(1);
    Refresh_Screen = 0;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <Init_Menu+0x74>)
 800062c:	701c      	strb	r4, [r3, #0]
    }
 800062e:	bd10      	pop	{r4, pc}
 8000630:	2000050c 	.word	0x2000050c
 8000634:	00800040 	.word	0x00800040
 8000638:	200004d4 	.word	0x200004d4
 800063c:	48000400 	.word	0x48000400
 8000640:	08000575 	.word	0x08000575
 8000644:	20000528 	.word	0x20000528
 8000648:	080008c5 	.word	0x080008c5
 800064c:	2000052c 	.word	0x2000052c
 8000650:	08000bad 	.word	0x08000bad
 8000654:	20000012 	.word	0x20000012
 8000658:	20000010 	.word	0x20000010
 800065c:	2000005c 	.word	0x2000005c

08000660 <Handle_Menu>:

void Handle_Menu()
    {
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    int16_t count = 0;
    count = Encoder_Get_Count(&Encoder);
 8000662:	4c33      	ldr	r4, [pc, #204]	; (8000730 <Handle_Menu+0xd0>)
 8000664:	0020      	movs	r0, r4
 8000666:	f000 fcd7 	bl	8001018 <Encoder_Get_Count>

    if (!In_Loop)
 800066a:	4e32      	ldr	r6, [pc, #200]	; (8000734 <Handle_Menu+0xd4>)
    count = Encoder_Get_Count(&Encoder);
 800066c:	0003      	movs	r3, r0
    if (!In_Loop)
 800066e:	7831      	ldrb	r1, [r6, #0]
 8000670:	4d31      	ldr	r5, [pc, #196]	; (8000738 <Handle_Menu+0xd8>)
 8000672:	2900      	cmp	r1, #0
 8000674:	d140      	bne.n	80006f8 <Handle_Menu+0x98>
	{

	Foot_Switchn_Flag = 0;
 8000676:	4a31      	ldr	r2, [pc, #196]	; (800073c <Handle_Menu+0xdc>)
 8000678:	7011      	strb	r1, [r2, #0]

	if (count < 0)
 800067a:	2800      	cmp	r0, #0
 800067c:	da2d      	bge.n	80006da <Handle_Menu+0x7a>
	    {
	    Encoder_Set_Count(&Encoder, 0);
 800067e:	0020      	movs	r0, r4
 8000680:	f000 fccd 	bl	800101e <Encoder_Set_Count>
	    Page_Screen++;
 8000684:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <Handle_Menu+0xe0>)
	    if(Page_Screen > Elements_In_Page)
 8000686:	492f      	ldr	r1, [pc, #188]	; (8000744 <Handle_Menu+0xe4>)
	    Page_Screen++;
 8000688:	7813      	ldrb	r3, [r2, #0]
	    if(Page_Screen > Elements_In_Page)
 800068a:	7809      	ldrb	r1, [r1, #0]
	    Page_Screen++;
 800068c:	3301      	adds	r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	7013      	strb	r3, [r2, #0]
	    if(Page_Screen > Elements_In_Page)
 8000692:	428b      	cmp	r3, r1
 8000694:	d900      	bls.n	8000698 <Handle_Menu+0x38>
		{
		Page_Screen = Elements_In_Page;
 8000696:	7011      	strb	r1, [r2, #0]
	    Page_Screen--;
	    if(Page_Screen == 0)
		{
		Page_Screen = 1;
		}
	    Show_Page(Page_Screen);
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <Handle_Menu+0xe8>)
 800069a:	7810      	ldrb	r0, [r2, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4798      	blx	r3
	    }

	if (Encoder_Clicks == 1)
 80006a0:	782b      	ldrb	r3, [r5, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10d      	bne.n	80006c2 <Handle_Menu+0x62>
	    {
	    Encoder_Clicks = 0;
 80006a6:	2700      	movs	r7, #0
	    In_Loop = 1; // reset to exit loop
 80006a8:	7033      	strb	r3, [r6, #0]
	    Execute_Page_Element(Page_Screen, 0, 0);
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <Handle_Menu+0xe0>)
 80006ac:	0039      	movs	r1, r7
 80006ae:	7818      	ldrb	r0, [r3, #0]
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <Handle_Menu+0xec>)
 80006b2:	003a      	movs	r2, r7
 80006b4:	681b      	ldr	r3, [r3, #0]
	    Encoder_Clicks = 0;
 80006b6:	702f      	strb	r7, [r5, #0]
	    Execute_Page_Element(Page_Screen, 0, 0);
 80006b8:	4798      	blx	r3
	    Encoder_Set_Count(&Encoder, 0);
 80006ba:	0039      	movs	r1, r7
 80006bc:	0020      	movs	r0, r4
 80006be:	f000 fcae 	bl	800101e <Encoder_Set_Count>
	    }

	if(Refresh_Screen)
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <Handle_Menu+0xf0>)
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d006      	beq.n	80006d8 <Handle_Menu+0x78>
	    {
	    Refresh_Screen = 0;
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	    Show_Page(Page_Screen);
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <Handle_Menu+0xe0>)
 80006d0:	7818      	ldrb	r0, [r3, #0]
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <Handle_Menu+0xe8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4798      	blx	r3
	    Execute_Page_Element(Page_Screen, Encoder_Clicks, count);
	    }

	}

    }
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (count > 0)
 80006da:	2800      	cmp	r0, #0
 80006dc:	d0e0      	beq.n	80006a0 <Handle_Menu+0x40>
	    Encoder_Set_Count(&Encoder, 0);
 80006de:	0020      	movs	r0, r4
 80006e0:	f000 fc9d 	bl	800101e <Encoder_Set_Count>
	    Page_Screen--;
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <Handle_Menu+0xe0>)
 80006e6:	7813      	ldrb	r3, [r2, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2db      	uxtb	r3, r3
	    if(Page_Screen == 0)
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <Handle_Menu+0x94>
		Page_Screen = 1;
 80006f0:	7013      	strb	r3, [r2, #0]
 80006f2:	e7d1      	b.n	8000698 <Handle_Menu+0x38>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e7fb      	b.n	80006f0 <Handle_Menu+0x90>
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <Handle_Menu+0xec>)
	if (Encoder_Clicks || count)
 80006fa:	7829      	ldrb	r1, [r5, #0]
 80006fc:	6817      	ldr	r7, [r2, #0]
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <Handle_Menu+0xe0>)
 8000700:	7810      	ldrb	r0, [r2, #0]
 8000702:	2900      	cmp	r1, #0
 8000704:	d101      	bne.n	800070a <Handle_Menu+0xaa>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00d      	beq.n	8000726 <Handle_Menu+0xc6>
	    Foot_Switchn_Flag = 0;
 800070a:	2600      	movs	r6, #0
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <Handle_Menu+0xdc>)
 800070e:	7016      	strb	r6, [r2, #0]
	    Execute_Page_Element(Page_Screen, Encoder_Clicks, count);
 8000710:	001a      	movs	r2, r3
 8000712:	47b8      	blx	r7
	    Encoder_Set_Count(&Encoder, 0);
 8000714:	0031      	movs	r1, r6
 8000716:	0020      	movs	r0, r4
 8000718:	f000 fc81 	bl	800101e <Encoder_Set_Count>
	    Refresh_Screen = 1;
 800071c:	2201      	movs	r2, #1
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <Handle_Menu+0xf0>)
	    Encoder_Clicks = 0;
 8000720:	702e      	strb	r6, [r5, #0]
	    Refresh_Screen = 1;
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e7d8      	b.n	80006d8 <Handle_Menu+0x78>
	    Execute_Page_Element(Page_Screen, Encoder_Clicks, count);
 8000726:	001a      	movs	r2, r3
 8000728:	0019      	movs	r1, r3
 800072a:	47b8      	blx	r7
    }
 800072c:	e7d4      	b.n	80006d8 <Handle_Menu+0x78>
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	2000050c 	.word	0x2000050c
 8000734:	20000524 	.word	0x20000524
 8000738:	20000011 	.word	0x20000011
 800073c:	20000068 	.word	0x20000068
 8000740:	20000012 	.word	0x20000012
 8000744:	20000010 	.word	0x20000010
 8000748:	20000528 	.word	0x20000528
 800074c:	2000052c 	.word	0x2000052c
 8000750:	2000005c 	.word	0x2000005c

08000754 <Show_Page1_Screen1>:
#include "menu_main.h"

extern uint8_t Foot_Switchn_Flag;

void Show_Page1_Screen1()
    {
 8000754:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fe78 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	0008      	movs	r0, r1
 8000760:	f000 ff90 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, Black);
 8000764:	4c0e      	ldr	r4, [pc, #56]	; (80007a0 <Show_Page1_Screen1+0x4c>)
 8000766:	2300      	movs	r3, #0
 8000768:	6862      	ldr	r2, [r4, #4]
 800076a:	6821      	ldr	r1, [r4, #0]
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <Show_Page1_Screen1+0x50>)
 800076e:	f000 ff75 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8000772:	2114      	movs	r1, #20
 8000774:	2000      	movs	r0, #0
 8000776:	f000 ff85 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 800077a:	2301      	movs	r3, #1
 800077c:	6821      	ldr	r1, [r4, #0]
 800077e:	6862      	ldr	r2, [r4, #4]
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <Show_Page1_Screen1+0x54>)
 8000782:	f000 ff6b 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8000786:	2128      	movs	r1, #40	; 0x28
 8000788:	2000      	movs	r0, #0
 800078a:	f000 ff7b 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 800078e:	cc06      	ldmia	r4!, {r1, r2}
 8000790:	2301      	movs	r3, #1
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <Show_Page1_Screen1+0x58>)
 8000794:	f000 ff62 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000798:	f000 fe66 	bl	8001468 <ssd1306_UpdateScreen>
    }
 800079c:	bd10      	pop	{r4, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000000 	.word	0x20000000
 80007a4:	080037b9 	.word	0x080037b9
 80007a8:	080037a2 	.word	0x080037a2
 80007ac:	080037be 	.word	0x080037be

080007b0 <Show_Page1_Screen2>:


void Show_Page1_Screen2()
    {
 80007b0:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fe4a 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	0008      	movs	r0, r1
 80007bc:	f000 ff62 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 80007c0:	4c0e      	ldr	r4, [pc, #56]	; (80007fc <Show_Page1_Screen2+0x4c>)
 80007c2:	2301      	movs	r3, #1
 80007c4:	6862      	ldr	r2, [r4, #4]
 80007c6:	6821      	ldr	r1, [r4, #0]
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <Show_Page1_Screen2+0x50>)
 80007ca:	f000 ff47 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80007ce:	2114      	movs	r1, #20
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 ff57 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, Black);
 80007d6:	2300      	movs	r3, #0
 80007d8:	6821      	ldr	r1, [r4, #0]
 80007da:	6862      	ldr	r2, [r4, #4]
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <Show_Page1_Screen2+0x54>)
 80007de:	f000 ff3d 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80007e2:	2128      	movs	r1, #40	; 0x28
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 ff4d 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80007ea:	cc06      	ldmia	r4!, {r1, r2}
 80007ec:	2301      	movs	r3, #1
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <Show_Page1_Screen2+0x58>)
 80007f0:	f000 ff34 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80007f4:	f000 fe38 	bl	8001468 <ssd1306_UpdateScreen>
    }
 80007f8:	bd10      	pop	{r4, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	20000000 	.word	0x20000000
 8000800:	080037b9 	.word	0x080037b9
 8000804:	080037a2 	.word	0x080037a2
 8000808:	080037be 	.word	0x080037be

0800080c <Show_Page1_Screen3>:

void Show_Page1_Screen3()
    {
 800080c:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fe1c 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	0008      	movs	r0, r1
 8000818:	f000 ff34 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 800081c:	4c0e      	ldr	r4, [pc, #56]	; (8000858 <Show_Page1_Screen3+0x4c>)
 800081e:	2301      	movs	r3, #1
 8000820:	6862      	ldr	r2, [r4, #4]
 8000822:	6821      	ldr	r1, [r4, #0]
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <Show_Page1_Screen3+0x50>)
 8000826:	f000 ff19 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800082a:	2114      	movs	r1, #20
 800082c:	2000      	movs	r0, #0
 800082e:	f000 ff29 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 8000832:	2301      	movs	r3, #1
 8000834:	6821      	ldr	r1, [r4, #0]
 8000836:	6862      	ldr	r2, [r4, #4]
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <Show_Page1_Screen3+0x54>)
 800083a:	f000 ff0f 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800083e:	2128      	movs	r1, #40	; 0x28
 8000840:	2000      	movs	r0, #0
 8000842:	f000 ff1f 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, Black);
 8000846:	cc06      	ldmia	r4!, {r1, r2}
 8000848:	2300      	movs	r3, #0
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <Show_Page1_Screen3+0x58>)
 800084c:	f000 ff06 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000850:	f000 fe0a 	bl	8001468 <ssd1306_UpdateScreen>

    }
 8000854:	bd10      	pop	{r4, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000000 	.word	0x20000000
 800085c:	080037b9 	.word	0x080037b9
 8000860:	080037a2 	.word	0x080037a2
 8000864:	080037be 	.word	0x080037be

08000868 <Show_Page1_Screen4>:

void Show_Page1_Screen4()
    {
 8000868:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fdee 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	0008      	movs	r0, r1
 8000874:	f000 ff06 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 8000878:	4c0e      	ldr	r4, [pc, #56]	; (80008b4 <Show_Page1_Screen4+0x4c>)
 800087a:	2301      	movs	r3, #1
 800087c:	6862      	ldr	r2, [r4, #4]
 800087e:	6821      	ldr	r1, [r4, #0]
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <Show_Page1_Screen4+0x50>)
 8000882:	f000 feeb 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8000886:	2114      	movs	r1, #20
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fefb 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 800088e:	2301      	movs	r3, #1
 8000890:	6821      	ldr	r1, [r4, #0]
 8000892:	6862      	ldr	r2, [r4, #4]
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <Show_Page1_Screen4+0x54>)
 8000896:	f000 fee1 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800089a:	2128      	movs	r1, #40	; 0x28
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fef1 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, Black);
 80008a2:	cc06      	ldmia	r4!, {r1, r2}
 80008a4:	2300      	movs	r3, #0
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <Show_Page1_Screen4+0x58>)
 80008a8:	f000 fed8 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80008ac:	f000 fddc 	bl	8001468 <ssd1306_UpdateScreen>

    }
 80008b0:	bd10      	pop	{r4, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000000 	.word	0x20000000
 80008b8:	080037a2 	.word	0x080037a2
 80008bc:	080037be 	.word	0x080037be
 80008c0:	080037e1 	.word	0x080037e1

080008c4 <Show_Page1>:

void Show_Page1(uint8_t screen)
    {

    switch (screen)
 80008c4:	3801      	subs	r0, #1
    {
 80008c6:	b510      	push	{r4, lr}
    switch (screen)
 80008c8:	2803      	cmp	r0, #3
 80008ca:	d805      	bhi.n	80008d8 <Show_Page1+0x14>
 80008cc:	f7ff fc1c 	bl	8000108 <__gnu_thumb1_case_uqi>
 80008d0:	0b080502 	.word	0x0b080502
	{
    case 1:
	Show_Page1_Screen1();
 80008d4:	f7ff ff3e 	bl	8000754 <Show_Page1_Screen1>
	break;
    case 4:
	Show_Page1_Screen4();
	break;
	}
    }
 80008d8:	bd10      	pop	{r4, pc}
	Show_Page1_Screen2();
 80008da:	f7ff ff69 	bl	80007b0 <Show_Page1_Screen2>
	break;
 80008de:	e7fb      	b.n	80008d8 <Show_Page1+0x14>
	Show_Page1_Screen3();
 80008e0:	f7ff ff94 	bl	800080c <Show_Page1_Screen3>
	break;
 80008e4:	e7f8      	b.n	80008d8 <Show_Page1+0x14>
	Show_Page1_Screen4();
 80008e6:	f7ff ffbf 	bl	8000868 <Show_Page1_Screen4>
    }
 80008ea:	e7f5      	b.n	80008d8 <Show_Page1+0x14>

080008ec <Execute_Page1_Element1>:

void Execute_Page1_Element1(uint8_t button, int16_t count)
    {
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}

    char temp[10];

    if (In_Loop)
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <Execute_Page1_Element1+0x188>)
    {
 80008f0:	b085      	sub	sp, #20
    if (In_Loop)
 80008f2:	781a      	ldrb	r2, [r3, #0]
    {
 80008f4:	000c      	movs	r4, r1
    if (In_Loop)
 80008f6:	2a00      	cmp	r2, #0
 80008f8:	d100      	bne.n	80008fc <Execute_Page1_Element1+0x10>
 80008fa:	e0b9      	b.n	8000a70 <Execute_Page1_Element1+0x184>
	{

        if(button == 1)
 80008fc:	2801      	cmp	r0, #1
 80008fe:	d101      	bne.n	8000904 <Execute_Page1_Element1+0x18>
            {
            In_Loop = 0; // exit loop
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
            }

	Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 8000904:	f000 fcec 	bl	80012e0 <Get_Main_Pulse_Duration>
 8000908:	1900      	adds	r0, r0, r4
 800090a:	b200      	sxth	r0, r0
 800090c:	f000 fcda 	bl	80012c4 <Set_Main_Pulse_Duration>

	if (Foot_Switchn_Flag && Get_Welder_Status())
 8000910:	4f59      	ldr	r7, [pc, #356]	; (8000a78 <Execute_Page1_Element1+0x18c>)
 8000912:	4c5a      	ldr	r4, [pc, #360]	; (8000a7c <Execute_Page1_Element1+0x190>)
 8000914:	783b      	ldrb	r3, [r7, #0]
 8000916:	4e5a      	ldr	r6, [pc, #360]	; (8000a80 <Execute_Page1_Element1+0x194>)
 8000918:	2b00      	cmp	r3, #0
 800091a:	d03a      	beq.n	8000992 <Execute_Page1_Element1+0xa6>
 800091c:	f000 fd14 	bl	8001348 <Get_Welder_Status>
 8000920:	2800      	cmp	r0, #0
 8000922:	d036      	beq.n	8000992 <Execute_Page1_Element1+0xa6>
	    {
	    Foot_Switchn_Flag = 0;
 8000924:	2500      	movs	r5, #0
	    ssd1306_Fill(Black);
 8000926:	0028      	movs	r0, r5
	    Foot_Switchn_Flag = 0;
 8000928:	703d      	strb	r5, [r7, #0]
	    ssd1306_Fill(Black);
 800092a:	f000 fd8f 	bl	800144c <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 800092e:	0029      	movs	r1, r5
 8000930:	0028      	movs	r0, r5
 8000932:	f000 fea7 	bl	8001684 <ssd1306_SetCursor>
	    ssd1306_WriteString("Pulse:", Font_11x18, White);
 8000936:	2301      	movs	r3, #1
 8000938:	6821      	ldr	r1, [r4, #0]
 800093a:	6862      	ldr	r2, [r4, #4]
 800093c:	4851      	ldr	r0, [pc, #324]	; (8000a84 <Execute_Page1_Element1+0x198>)
 800093e:	f000 fe8d 	bl	800165c <ssd1306_WriteString>
	    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000942:	f000 fccd 	bl	80012e0 <Get_Main_Pulse_Duration>
 8000946:	220a      	movs	r2, #10
 8000948:	a901      	add	r1, sp, #4
 800094a:	f001 fc5f 	bl	800220c <itoa>
	    ssd1306_WriteString(temp, Font_11x18, White);
 800094e:	2301      	movs	r3, #1
 8000950:	6821      	ldr	r1, [r4, #0]
 8000952:	6862      	ldr	r2, [r4, #4]
 8000954:	a801      	add	r0, sp, #4
 8000956:	f000 fe81 	bl	800165c <ssd1306_WriteString>
	    ssd1306_WriteString("ms", Font_11x18, White);
 800095a:	2301      	movs	r3, #1
 800095c:	6821      	ldr	r1, [r4, #0]
 800095e:	6862      	ldr	r2, [r4, #4]
 8000960:	0030      	movs	r0, r6
 8000962:	f000 fe7b 	bl	800165c <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000966:	f000 fd7f 	bl	8001468 <ssd1306_UpdateScreen>

	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 800096a:	2090      	movs	r0, #144	; 0x90
 800096c:	2201      	movs	r2, #1
 800096e:	2102      	movs	r1, #2
 8000970:	05c0      	lsls	r0, r0, #23
 8000972:	f001 f951 	bl	8001c18 <HAL_GPIO_WritePin>
		    GPIO_PIN_SET);
	    HAL_Delay(Get_Main_Pulse_Duration());
 8000976:	f000 fcb3 	bl	80012e0 <Get_Main_Pulse_Duration>
 800097a:	f000 ff1d 	bl	80017b8 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 800097e:	2090      	movs	r0, #144	; 0x90
 8000980:	002a      	movs	r2, r5
 8000982:	05c0      	lsls	r0, r0, #23
 8000984:	2102      	movs	r1, #2
 8000986:	f001 f947 	bl	8001c18 <HAL_GPIO_WritePin>
		    GPIO_PIN_RESET);
	    HAL_Delay(1000);
 800098a:	20fa      	movs	r0, #250	; 0xfa
 800098c:	0080      	lsls	r0, r0, #2
 800098e:	f000 ff13 	bl	80017b8 <HAL_Delay>
	    }

	ssd1306_Fill(Black);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fd5a 	bl	800144c <ssd1306_Fill>

	ssd1306_SetCursor(45, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	202d      	movs	r0, #45	; 0x2d
 800099c:	f000 fe72 	bl	8001684 <ssd1306_SetCursor>
	itoa(Get_Main_Pulse_Duration(), temp, 10);
 80009a0:	f000 fc9e 	bl	80012e0 <Get_Main_Pulse_Duration>
 80009a4:	220a      	movs	r2, #10
 80009a6:	a901      	add	r1, sp, #4
 80009a8:	f001 fc30 	bl	800220c <itoa>
	ssd1306_WriteString(temp, Font_11x18, White);
 80009ac:	2301      	movs	r3, #1
 80009ae:	6821      	ldr	r1, [r4, #0]
 80009b0:	6862      	ldr	r2, [r4, #4]
 80009b2:	a801      	add	r0, sp, #4
 80009b4:	f000 fe52 	bl	800165c <ssd1306_WriteString>
	ssd1306_WriteString("ms", Font_11x18, White);
 80009b8:	cc06      	ldmia	r4!, {r1, r2}
 80009ba:	2301      	movs	r3, #1
 80009bc:	0030      	movs	r0, r6
 80009be:	f000 fe4d 	bl	800165c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 80009c2:	2114      	movs	r1, #20
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fe5d 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString("Battery:", Font_7x10, White);
 80009ca:	4c2f      	ldr	r4, [pc, #188]	; (8000a88 <Execute_Page1_Element1+0x19c>)
 80009cc:	2301      	movs	r3, #1
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	6821      	ldr	r1, [r4, #0]
 80009d2:	482e      	ldr	r0, [pc, #184]	; (8000a8c <Execute_Page1_Element1+0x1a0>)
 80009d4:	f000 fe42 	bl	800165c <ssd1306_WriteString>
	ssd1306_SetCursor(75, 20);
 80009d8:	2114      	movs	r1, #20
 80009da:	204b      	movs	r0, #75	; 0x4b
 80009dc:	f000 fe52 	bl	8001684 <ssd1306_SetCursor>
	//itoa(Batt_Voltage*4, temp, 10);
	itoa(100 * 4, temp, 10);
 80009e0:	20c8      	movs	r0, #200	; 0xc8
 80009e2:	220a      	movs	r2, #10
 80009e4:	a901      	add	r1, sp, #4
 80009e6:	0040      	lsls	r0, r0, #1
 80009e8:	f001 fc10 	bl	800220c <itoa>
	ssd1306_WriteString(temp, Font_7x10, White);
 80009ec:	6821      	ldr	r1, [r4, #0]
 80009ee:	6862      	ldr	r2, [r4, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	a801      	add	r0, sp, #4
 80009f4:	f000 fe32 	bl	800165c <ssd1306_WriteString>
	ssd1306_WriteString("mV", Font_7x10, White);
 80009f8:	6862      	ldr	r2, [r4, #4]
 80009fa:	2301      	movs	r3, #1
 80009fc:	6821      	ldr	r1, [r4, #0]
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <Execute_Page1_Element1+0x1a4>)
 8000a00:	f000 fe2c 	bl	800165c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 35);
 8000a04:	2123      	movs	r1, #35	; 0x23
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fe3c 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString("Tot Welds:", Font_7x10, White);
 8000a0c:	6862      	ldr	r2, [r4, #4]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	6821      	ldr	r1, [r4, #0]
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <Execute_Page1_Element1+0x1a8>)
 8000a14:	f000 fe22 	bl	800165c <ssd1306_WriteString>
	ssd1306_SetCursor(75, 35);
 8000a18:	2123      	movs	r1, #35	; 0x23
 8000a1a:	204b      	movs	r0, #75	; 0x4b
 8000a1c:	f000 fe32 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString("125", Font_7x10, White);
 8000a20:	6862      	ldr	r2, [r4, #4]
 8000a22:	2301      	movs	r3, #1
 8000a24:	6821      	ldr	r1, [r4, #0]
 8000a26:	481c      	ldr	r0, [pc, #112]	; (8000a98 <Execute_Page1_Element1+0x1ac>)
 8000a28:	f000 fe18 	bl	800165c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8000a2c:	2132      	movs	r1, #50	; 0x32
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fe28 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString(STR_Auto, Font_7x10, White);
 8000a34:	6821      	ldr	r1, [r4, #0]
 8000a36:	6862      	ldr	r2, [r4, #4]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	4818      	ldr	r0, [pc, #96]	; (8000a9c <Execute_Page1_Element1+0x1b0>)
 8000a3c:	f000 fe0e 	bl	800165c <ssd1306_WriteString>
	ssd1306_WriteString(STR_Space, Font_7x10, White);
 8000a40:	6821      	ldr	r1, [r4, #0]
 8000a42:	6862      	ldr	r2, [r4, #4]
 8000a44:	2301      	movs	r3, #1
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <Execute_Page1_Element1+0x1b4>)
 8000a48:	f000 fe08 	bl	800165c <ssd1306_WriteString>
	ssd1306_WriteString(STR_Auto_Value, Font_7x10, White);
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <Execute_Page1_Element1+0x1b8>)
 8000a4e:	2301      	movs	r3, #1
 8000a50:	6821      	ldr	r1, [r4, #0]
 8000a52:	6862      	ldr	r2, [r4, #4]
 8000a54:	6800      	ldr	r0, [r0, #0]
 8000a56:	f000 fe01 	bl	800165c <ssd1306_WriteString>

	ssd1306_SetCursor(100, 50);
 8000a5a:	2132      	movs	r1, #50	; 0x32
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fe11 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString(">>", Font_7x10, White);
 8000a62:	cc06      	ldmia	r4!, {r1, r2}
 8000a64:	2301      	movs	r3, #1
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <Execute_Page1_Element1+0x1bc>)
 8000a68:	f000 fdf8 	bl	800165c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000a6c:	f000 fcfc 	bl	8001468 <ssd1306_UpdateScreen>

	}
    }
 8000a70:	b005      	add	sp, #20
 8000a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a74:	20000524 	.word	0x20000524
 8000a78:	20000068 	.word	0x20000068
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	080037f5 	.word	0x080037f5
 8000a84:	080037ee 	.word	0x080037ee
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	080037f8 	.word	0x080037f8
 8000a90:	08003814 	.word	0x08003814
 8000a94:	08003801 	.word	0x08003801
 8000a98:	0800380c 	.word	0x0800380c
 8000a9c:	0800379c 	.word	0x0800379c
 8000aa0:	080037ec 	.word	0x080037ec
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	08003810 	.word	0x08003810

08000aac <Execute_Page1_Element3>:
    In_Loop = 0;
    Change_Page(2);
    }

void Execute_Page1_Element3(uint8_t button, int16_t count)
    {
 8000aac:	b530      	push	{r4, r5, lr}

    char temp[10];

    if (In_Loop)
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <Execute_Page1_Element3+0x74>)
    {
 8000ab0:	b085      	sub	sp, #20
    if (In_Loop)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
    {
 8000ab4:	000c      	movs	r4, r1
    if (In_Loop)
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d030      	beq.n	8000b1c <Execute_Page1_Element3+0x70>
	{

	if (button == 1)
 8000aba:	2801      	cmp	r0, #1
 8000abc:	d101      	bne.n	8000ac2 <Execute_Page1_Element3+0x16>
	    {
	    In_Loop = 0;
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	    }

	Set_Batt_Alarm(Get_Batt_Alarm() + (count * 10));
 8000ac2:	250a      	movs	r5, #10
 8000ac4:	f000 fc3a 	bl	800133c <Get_Batt_Alarm>
 8000ac8:	436c      	muls	r4, r5
 8000aca:	1900      	adds	r0, r0, r4
 8000acc:	b200      	sxth	r0, r0
 8000ace:	f000 fc21 	bl	8001314 <Set_Batt_Alarm>

	ssd1306_Fill(Black);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 fcba 	bl	800144c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0008      	movs	r0, r1
 8000adc:	f000 fdd2 	bl	8001684 <ssd1306_SetCursor>
	ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 8000ae0:	4c10      	ldr	r4, [pc, #64]	; (8000b24 <Execute_Page1_Element3+0x78>)
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	6862      	ldr	r2, [r4, #4]
 8000ae6:	6821      	ldr	r1, [r4, #0]
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <Execute_Page1_Element3+0x7c>)
 8000aea:	f000 fdb7 	bl	800165c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 8000aee:	2114      	movs	r1, #20
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fdc7 	bl	8001684 <ssd1306_SetCursor>
	itoa(Get_Batt_Alarm(), temp, 10);
 8000af6:	f000 fc21 	bl	800133c <Get_Batt_Alarm>
 8000afa:	002a      	movs	r2, r5
 8000afc:	a901      	add	r1, sp, #4
 8000afe:	f001 fb85 	bl	800220c <itoa>
	ssd1306_WriteString(temp, Font_11x18, White);
 8000b02:	2301      	movs	r3, #1
 8000b04:	6821      	ldr	r1, [r4, #0]
 8000b06:	6862      	ldr	r2, [r4, #4]
 8000b08:	a801      	add	r0, sp, #4
 8000b0a:	f000 fda7 	bl	800165c <ssd1306_WriteString>
	ssd1306_WriteString(" mV", Font_11x18, White);
 8000b0e:	cc06      	ldmia	r4!, {r1, r2}
 8000b10:	2301      	movs	r3, #1
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <Execute_Page1_Element3+0x80>)
 8000b14:	f000 fda2 	bl	800165c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000b18:	f000 fca6 	bl	8001468 <ssd1306_UpdateScreen>

	}

    }
 8000b1c:	b005      	add	sp, #20
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	20000524 	.word	0x20000524
 8000b24:	20000000 	.word	0x20000000
 8000b28:	080037be 	.word	0x080037be
 8000b2c:	08003813 	.word	0x08003813

08000b30 <Execute_Page1_Element4>:


void Execute_Page1_Element4(uint8_t button, int16_t count)
    {
 8000b30:	b530      	push	{r4, r5, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	0004      	movs	r4, r0
 8000b36:	000d      	movs	r5, r1

    char temp[10];



    Set_Short_Pulse_Duration(Get_Short_Pulse_Duration() + (count));
 8000b38:	f000 fbe6 	bl	8001308 <Get_Short_Pulse_Duration>
 8000b3c:	1940      	adds	r0, r0, r5
 8000b3e:	b200      	sxth	r0, r0
 8000b40:	f000 fbd4 	bl	80012ec <Set_Short_Pulse_Duration>

    if (button == 1)
 8000b44:	2c01      	cmp	r4, #1
 8000b46:	d102      	bne.n	8000b4e <Execute_Page1_Element4+0x1e>
	{
	In_Loop = 0; //exit loop
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <Execute_Page1_Element4+0x6c>)
 8000b4c:	701a      	strb	r2, [r3, #0]
	}

    ssd1306_Fill(Black);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 fc7c 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000b54:	2100      	movs	r1, #0
 8000b56:	0008      	movs	r0, r1
 8000b58:	f000 fd94 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, White);
 8000b5c:	4c10      	ldr	r4, [pc, #64]	; (8000ba0 <Execute_Page1_Element4+0x70>)
 8000b5e:	2301      	movs	r3, #1
 8000b60:	6862      	ldr	r2, [r4, #4]
 8000b62:	6821      	ldr	r1, [r4, #0]
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <Execute_Page1_Element4+0x74>)
 8000b66:	f000 fd79 	bl	800165c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000b6a:	2114      	movs	r1, #20
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fd89 	bl	8001684 <ssd1306_SetCursor>
    itoa(Get_Short_Pulse_Duration(), temp, 10);
 8000b72:	f000 fbc9 	bl	8001308 <Get_Short_Pulse_Duration>
 8000b76:	a901      	add	r1, sp, #4
 8000b78:	220a      	movs	r2, #10
 8000b7a:	f001 fb47 	bl	800220c <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000b7e:	2301      	movs	r3, #1
 8000b80:	6821      	ldr	r1, [r4, #0]
 8000b82:	6862      	ldr	r2, [r4, #4]
 8000b84:	a801      	add	r0, sp, #4
 8000b86:	f000 fd69 	bl	800165c <ssd1306_WriteString>
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000b8a:	cc06      	ldmia	r4!, {r1, r2}
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <Execute_Page1_Element4+0x78>)
 8000b90:	f000 fd64 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000b94:	f000 fc68 	bl	8001468 <ssd1306_UpdateScreen>

    }
 8000b98:	b005      	add	sp, #20
 8000b9a:	bd30      	pop	{r4, r5, pc}
 8000b9c:	20000524 	.word	0x20000524
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	080037e1 	.word	0x080037e1
 8000ba8:	08003817 	.word	0x08003817

08000bac <Execute_Page1_Element>:

void Execute_Page1_Element(uint8_t screen, uint8_t button, int16_t count)
    {
    switch (screen)
 8000bac:	3801      	subs	r0, #1
    {
 8000bae:	000b      	movs	r3, r1
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	0011      	movs	r1, r2
    switch (screen)
 8000bb4:	2803      	cmp	r0, #3
 8000bb6:	d806      	bhi.n	8000bc6 <Execute_Page1_Element+0x1a>
 8000bb8:	f7ff faa6 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000bbc:	110d0602 	.word	0x110d0602
	{
    case 1:
	Execute_Page1_Element1(button, count);
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fe93 	bl	80008ec <Execute_Page1_Element1>
	break;
    case 4:
	Execute_Page1_Element4(button, count);
	break;
	}
    }
 8000bc6:	bd10      	pop	{r4, pc}
    In_Loop = 0;
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <Execute_Page1_Element+0x3c>)
    Change_Page(2);
 8000bcc:	2002      	movs	r0, #2
    In_Loop = 0;
 8000bce:	701a      	strb	r2, [r3, #0]
    Change_Page(2);
 8000bd0:	f7ff fcd6 	bl	8000580 <Change_Page>
 8000bd4:	e7f7      	b.n	8000bc6 <Execute_Page1_Element+0x1a>
	Execute_Page1_Element3(button, count);
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ff68 	bl	8000aac <Execute_Page1_Element3>
	break;
 8000bdc:	e7f3      	b.n	8000bc6 <Execute_Page1_Element+0x1a>
	Execute_Page1_Element4(button, count);
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ffa6 	bl	8000b30 <Execute_Page1_Element4>
    }
 8000be4:	e7ef      	b.n	8000bc6 <Execute_Page1_Element+0x1a>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000524 	.word	0x20000524

08000bec <Show_Page2_Comman>:
 */

#include "menu_main.h"

void Show_Page2_Comman()
    {
 8000bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];

    ssd1306_Fill(Black);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fc2c 	bl	800144c <ssd1306_Fill>

    ssd1306_SetCursor(0, 5);
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fd44 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, White);
 8000bfc:	4c28      	ldr	r4, [pc, #160]	; (8000ca0 <Show_Page2_Comman+0xb4>)
 8000bfe:	2301      	movs	r3, #1
 8000c00:	6862      	ldr	r2, [r4, #4]
 8000c02:	6821      	ldr	r1, [r4, #0]
 8000c04:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <Show_Page2_Comman+0xb8>)
 8000c06:	f000 fd29 	bl	800165c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000c0a:	2114      	movs	r1, #20
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fd39 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, White);
 8000c12:	6862      	ldr	r2, [r4, #4]
 8000c14:	2301      	movs	r3, #1
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <Show_Page2_Comman+0xbc>)
 8000c1a:	f000 fd1f 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000c1e:	2114      	movs	r1, #20
 8000c20:	2050      	movs	r0, #80	; 0x50
 8000c22:	f000 fd2f 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Value, Font_7x10, White);
 8000c26:	4821      	ldr	r0, [pc, #132]	; (8000cac <Show_Page2_Comman+0xc0>)
 8000c28:	6862      	ldr	r2, [r4, #4]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	6821      	ldr	r1, [r4, #0]
 8000c2e:	6800      	ldr	r0, [r0, #0]
 8000c30:	f000 fd14 	bl	800165c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 35);
 8000c34:	2123      	movs	r1, #35	; 0x23
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fd24 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, White);
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	6862      	ldr	r2, [r4, #4]
 8000c40:	6821      	ldr	r1, [r4, #0]
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <Show_Page2_Comman+0xc4>)
 8000c44:	f000 fd0a 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000c48:	2123      	movs	r1, #35	; 0x23
 8000c4a:	2050      	movs	r0, #80	; 0x50
 8000c4c:	f000 fd1a 	bl	8001684 <ssd1306_SetCursor>
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000c50:	f000 fb32 	bl	80012b8 <Get_Auto_Pulse_Delay>
 8000c54:	a901      	add	r1, sp, #4
 8000c56:	220a      	movs	r2, #10
 8000c58:	f001 fad8 	bl	800220c <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000c5c:	6862      	ldr	r2, [r4, #4]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	a801      	add	r0, sp, #4
 8000c64:	f000 fcfa 	bl	800165c <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000c68:	2132      	movs	r1, #50	; 0x32
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 fd0a 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, White);
 8000c70:	2301      	movs	r3, #1
 8000c72:	6862      	ldr	r2, [r4, #4]
 8000c74:	6821      	ldr	r1, [r4, #0]
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <Show_Page2_Comman+0xc8>)
 8000c78:	f000 fcf0 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8000c7c:	2132      	movs	r1, #50	; 0x32
 8000c7e:	2050      	movs	r0, #80	; 0x50
 8000c80:	f000 fd00 	bl	8001684 <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000c84:	f000 fb2c 	bl	80012e0 <Get_Main_Pulse_Duration>
 8000c88:	a901      	add	r1, sp, #4
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	f001 fabe 	bl	800220c <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000c90:	cc06      	ldmia	r4!, {r1, r2}
 8000c92:	2301      	movs	r3, #1
 8000c94:	a801      	add	r0, sp, #4
 8000c96:	f000 fce1 	bl	800165c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000c9a:	f000 fbe5 	bl	8001468 <ssd1306_UpdateScreen>
    }
 8000c9e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	080037b9 	.word	0x080037b9
 8000ca8:	080037ad 	.word	0x080037ad
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	080037c9 	.word	0x080037c9
 8000cb4:	080037d0 	.word	0x080037d0

08000cb8 <Show_Page2_Screen1>:

void Show_Page2_Screen1()
    {
 8000cb8:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 5);
 8000cba:	2105      	movs	r1, #5
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 fce1 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, Black);
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <Show_Page2_Screen1+0x20>)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <Show_Page2_Screen1+0x24>)
 8000cca:	6852      	ldr	r2, [r2, #4]
 8000ccc:	f000 fcc6 	bl	800165c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000cd0:	f000 fbca 	bl	8001468 <ssd1306_UpdateScreen>
    }
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	080037b9 	.word	0x080037b9

08000ce0 <Show_Page2_Screen2>:

void Show_Page2_Screen2()
    {
 8000ce0:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 20);
 8000ce2:	2114      	movs	r1, #20
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fccd 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse_C, Font_7x10, Black);
 8000cea:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <Show_Page2_Screen2+0x34>)
 8000cec:	2300      	movs	r3, #0
 8000cee:	6821      	ldr	r1, [r4, #0]
 8000cf0:	6862      	ldr	r2, [r4, #4]
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <Show_Page2_Screen2+0x38>)
 8000cf4:	f000 fcb2 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000cf8:	2114      	movs	r1, #20
 8000cfa:	2050      	movs	r0, #80	; 0x50
 8000cfc:	f000 fcc2 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Value, Font_7x10, Black);
 8000d00:	cc06      	ldmia	r4!, {r1, r2}
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <Show_Page2_Screen2+0x3c>)
 8000d04:	2300      	movs	r3, #0
 8000d06:	6800      	ldr	r0, [r0, #0]
 8000d08:	f000 fca8 	bl	800165c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000d0c:	f000 fbac 	bl	8001468 <ssd1306_UpdateScreen>
    }
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000008 	.word	0x20000008
 8000d18:	080037ad 	.word	0x080037ad
 8000d1c:	20000014 	.word	0x20000014

08000d20 <Show_Page2_Screen3>:

void Show_Page2_Screen3()
    {
 8000d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000d22:	f000 fac9 	bl	80012b8 <Get_Auto_Pulse_Delay>
 8000d26:	220a      	movs	r2, #10
 8000d28:	a901      	add	r1, sp, #4
 8000d2a:	f001 fa6f 	bl	800220c <itoa>

    ssd1306_SetCursor(0, 35);
 8000d2e:	2123      	movs	r1, #35	; 0x23
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fca7 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, Black);
 8000d36:	4c09      	ldr	r4, [pc, #36]	; (8000d5c <Show_Page2_Screen3+0x3c>)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	6821      	ldr	r1, [r4, #0]
 8000d3c:	6862      	ldr	r2, [r4, #4]
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <Show_Page2_Screen3+0x40>)
 8000d40:	f000 fc8c 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000d44:	2123      	movs	r1, #35	; 0x23
 8000d46:	2050      	movs	r0, #80	; 0x50
 8000d48:	f000 fc9c 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8000d4c:	cc06      	ldmia	r4!, {r1, r2}
 8000d4e:	2300      	movs	r3, #0
 8000d50:	a801      	add	r0, sp, #4
 8000d52:	f000 fc83 	bl	800165c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000d56:	f000 fb87 	bl	8001468 <ssd1306_UpdateScreen>

    }
 8000d5a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	080037c9 	.word	0x080037c9

08000d64 <Show_Page2_Screen4>:

void Show_Page2_Screen4()
    {
 8000d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000d66:	f000 fabb 	bl	80012e0 <Get_Main_Pulse_Duration>
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	a901      	add	r1, sp, #4
 8000d6e:	f001 fa4d 	bl	800220c <itoa>

    ssd1306_SetCursor(0, 50);
 8000d72:	2132      	movs	r1, #50	; 0x32
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fc85 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, Black);
 8000d7a:	4c09      	ldr	r4, [pc, #36]	; (8000da0 <Show_Page2_Screen4+0x3c>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6821      	ldr	r1, [r4, #0]
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <Show_Page2_Screen4+0x40>)
 8000d84:	f000 fc6a 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8000d88:	2132      	movs	r1, #50	; 0x32
 8000d8a:	2050      	movs	r0, #80	; 0x50
 8000d8c:	f000 fc7a 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8000d90:	cc06      	ldmia	r4!, {r1, r2}
 8000d92:	2300      	movs	r3, #0
 8000d94:	a801      	add	r0, sp, #4
 8000d96:	f000 fc61 	bl	800165c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000d9a:	f000 fb65 	bl	8001468 <ssd1306_UpdateScreen>
    }
 8000d9e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000da0:	20000008 	.word	0x20000008
 8000da4:	080037d0 	.word	0x080037d0

08000da8 <Show_Page2>:

void Show_Page2(uint8_t screen)
    {

    switch (screen)
 8000da8:	3801      	subs	r0, #1
    {
 8000daa:	b510      	push	{r4, lr}
    switch (screen)
 8000dac:	2803      	cmp	r0, #3
 8000dae:	d807      	bhi.n	8000dc0 <Show_Page2+0x18>
 8000db0:	f7ff f9aa 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000db4:	110c0702 	.word	0x110c0702
	{
    break;
case 1:
    Show_Page2_Comman();
 8000db8:	f7ff ff18 	bl	8000bec <Show_Page2_Comman>
    Show_Page2_Screen1();
 8000dbc:	f7ff ff7c 	bl	8000cb8 <Show_Page2_Screen1>
case 4:
    Show_Page2_Comman();
    Show_Page2_Screen4();
    break;
    }
}
 8000dc0:	bd10      	pop	{r4, pc}
    Show_Page2_Comman();
 8000dc2:	f7ff ff13 	bl	8000bec <Show_Page2_Comman>
    Show_Page2_Screen2();
 8000dc6:	f7ff ff8b 	bl	8000ce0 <Show_Page2_Screen2>
    break;
 8000dca:	e7f9      	b.n	8000dc0 <Show_Page2+0x18>
    Show_Page2_Comman();
 8000dcc:	f7ff ff0e 	bl	8000bec <Show_Page2_Comman>
    Show_Page2_Screen3();
 8000dd0:	f7ff ffa6 	bl	8000d20 <Show_Page2_Screen3>
    break;
 8000dd4:	e7f4      	b.n	8000dc0 <Show_Page2+0x18>
    Show_Page2_Comman();
 8000dd6:	f7ff ff09 	bl	8000bec <Show_Page2_Comman>
    Show_Page2_Screen4();
 8000dda:	f7ff ffc3 	bl	8000d64 <Show_Page2_Screen4>
}
 8000dde:	e7ef      	b.n	8000dc0 <Show_Page2+0x18>

08000de0 <Execute_Page2_Element2>:
void Execute_Page2_Element2(uint8_t button, int16_t count)
{

static uint8_t toggle = 0;

In_Loop = 0;
 8000de0:	2200      	movs	r2, #0
{
 8000de2:	b510      	push	{r4, lr}
In_Loop = 0;
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <Execute_Page2_Element2+0x34>)
 8000de6:	4c0c      	ldr	r4, [pc, #48]	; (8000e18 <Execute_Page2_Element2+0x38>)
 8000de8:	701a      	strb	r2, [r3, #0]

if (toggle)
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <Execute_Page2_Element2+0x3c>)
 8000dec:	7819      	ldrb	r1, [r3, #0]
 8000dee:	4291      	cmp	r1, r2
 8000df0:	d009      	beq.n	8000e06 <Execute_Page2_Element2+0x26>
    {
    toggle = 0;
 8000df2:	701a      	strb	r2, [r3, #0]
    Disble_Auto_Welder();
 8000df4:	f000 faae 	bl	8001354 <Disble_Auto_Welder>
    STR_Auto_Value = STR_OFF;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <Execute_Page2_Element2+0x40>)
    }
else
    {
    toggle = 1;
    Enable_Auto_Welder();
    STR_Auto_Value = STR_ON;
 8000dfa:	6023      	str	r3, [r4, #0]
    }
Show_Page2_Comman();
 8000dfc:	f7ff fef6 	bl	8000bec <Show_Page2_Comman>
Show_Page2_Screen2();
 8000e00:	f7ff ff6e 	bl	8000ce0 <Show_Page2_Screen2>

}
 8000e04:	bd10      	pop	{r4, pc}
    toggle = 1;
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
    Enable_Auto_Welder();
 8000e0a:	f000 faa9 	bl	8001360 <Enable_Auto_Welder>
    STR_Auto_Value = STR_ON;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <Execute_Page2_Element2+0x44>)
 8000e10:	e7f3      	b.n	8000dfa <Execute_Page2_Element2+0x1a>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	20000524 	.word	0x20000524
 8000e18:	20000014 	.word	0x20000014
 8000e1c:	2000005d 	.word	0x2000005d
 8000e20:	080037da 	.word	0x080037da
 8000e24:	080037de 	.word	0x080037de

08000e28 <Execute_Page2_Element3>:

void Execute_Page2_Element3(uint8_t button, int16_t count)
{
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	0004      	movs	r4, r0
 8000e2c:	000d      	movs	r5, r1

Set_Auto_Pulse_Delay(count + Get_Auto_Pulse_Delay());
 8000e2e:	f000 fa43 	bl	80012b8 <Get_Auto_Pulse_Delay>
 8000e32:	1940      	adds	r0, r0, r5
 8000e34:	b200      	sxth	r0, r0
 8000e36:	f000 fa2d 	bl	8001294 <Set_Auto_Pulse_Delay>

if (button == 1)
 8000e3a:	2c01      	cmp	r4, #1
 8000e3c:	d102      	bne.n	8000e44 <Execute_Page2_Element3+0x1c>
    {
    In_Loop = 0;
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <Execute_Page2_Element3+0x24>)
 8000e42:	701a      	strb	r2, [r3, #0]
    }

Show_Page2_Screen3();
 8000e44:	f7ff ff6c 	bl	8000d20 <Show_Page2_Screen3>

}
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000524 	.word	0x20000524

08000e50 <Execute_Page2_Element4>:

void Execute_Page2_Element4(uint8_t button, int16_t count)
{
 8000e50:	b510      	push	{r4, lr}
 8000e52:	000c      	movs	r4, r1

if (button == 1)
 8000e54:	2801      	cmp	r0, #1
 8000e56:	d102      	bne.n	8000e5e <Execute_Page2_Element4+0xe>
    {
    In_Loop = 0;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <Execute_Page2_Element4+0x20>)
 8000e5c:	701a      	strb	r2, [r3, #0]
    }

Set_Main_Pulse_Duration(count + Get_Main_Pulse_Duration());
 8000e5e:	f000 fa3f 	bl	80012e0 <Get_Main_Pulse_Duration>
 8000e62:	1900      	adds	r0, r0, r4
 8000e64:	b200      	sxth	r0, r0
 8000e66:	f000 fa2d 	bl	80012c4 <Set_Main_Pulse_Duration>

Show_Page2_Screen4();
 8000e6a:	f7ff ff7b 	bl	8000d64 <Show_Page2_Screen4>

}
 8000e6e:	bd10      	pop	{r4, pc}
 8000e70:	20000524 	.word	0x20000524

08000e74 <Execute_Page2_Element>:

void Execute_Page2_Element(uint8_t screen, uint8_t button, int16_t count)
{

switch (screen)
 8000e74:	3801      	subs	r0, #1
{
 8000e76:	000b      	movs	r3, r1
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	0011      	movs	r1, r2
switch (screen)
 8000e7c:	2803      	cmp	r0, #3
 8000e7e:	d809      	bhi.n	8000e94 <Execute_Page2_Element+0x20>
 8000e80:	f7ff f942 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000e84:	110d0902 	.word	0x110d0902
In_Loop = 0;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <Execute_Page2_Element+0x3c>)
Change_Page(1);
 8000e8c:	2001      	movs	r0, #1
In_Loop = 0;
 8000e8e:	701a      	strb	r2, [r3, #0]
Change_Page(1);
 8000e90:	f7ff fb76 	bl	8000580 <Change_Page>
    break;
case 4:
    Execute_Page2_Element4(button, count);
    break;
    }
}
 8000e94:	bd10      	pop	{r4, pc}
    Execute_Page2_Element2(button, count);
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff ffa2 	bl	8000de0 <Execute_Page2_Element2>
    break;
 8000e9c:	e7fa      	b.n	8000e94 <Execute_Page2_Element+0x20>
    Execute_Page2_Element3(button, count);
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ffc2 	bl	8000e28 <Execute_Page2_Element3>
    break;
 8000ea4:	e7f6      	b.n	8000e94 <Execute_Page2_Element+0x20>
    Execute_Page2_Element4(button, count);
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ffd2 	bl	8000e50 <Execute_Page2_Element4>
}
 8000eac:	e7f2      	b.n	8000e94 <Execute_Page2_Element+0x20>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000524 	.word	0x20000524

08000eb4 <Encoder_Attach>:
static Encoder_Struct_t* Encoder_Struct_PTR_Array[MAX_ENCODERS];

static uint8_t Attached_Encoders = 0;

uint8_t Encoder_Attach(Encoder_Struct_t* Encoder_Struct_PTR)
    {
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	0004      	movs	r4, r0
    //init GPIOs as input

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000eb8:	2080      	movs	r0, #128	; 0x80
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <Encoder_Attach+0x9c>)
 8000ebc:	0300      	lsls	r0, r0, #12
 8000ebe:	6959      	ldr	r1, [r3, #20]
    {
 8000ec0:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	6159      	str	r1, [r3, #20]
 8000ec6:	695a      	ldr	r2, [r3, #20]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
    ;

    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000eca:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000ecc:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000ece:	9201      	str	r2, [sp, #4]
 8000ed0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000ed2:	6959      	ldr	r1, [r3, #20]
 8000ed4:	0340      	lsls	r0, r0, #13
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	6159      	str	r1, [r3, #20]
 8000eda:	695a      	ldr	r2, [r3, #20]
 8000edc:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000ede:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000ee0:	9202      	str	r2, [sp, #8]
 8000ee2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000ee4:	6959      	ldr	r1, [r3, #20]
 8000ee6:	0280      	lsls	r0, r0, #10
 8000ee8:	4301      	orrs	r1, r0
 8000eea:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000eec:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000eee:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000ef0:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000ef2:	4002      	ands	r2, r0
 8000ef4:	9203      	str	r2, [sp, #12]
 8000ef6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000ef8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8000efa:	6860      	ldr	r0, [r4, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000efc:	430a      	orrs	r2, r1
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000f04:	400b      	ands	r3, r1
 8000f06:	9304      	str	r3, [sp, #16]
 8000f08:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8000f0a:	8823      	ldrh	r3, [r4, #0]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8000f0c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8000f0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8000f14:	f000 fdca 	bl	8001aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8000f18:	8863      	ldrh	r3, [r4, #2]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8000f1a:	a905      	add	r1, sp, #20
 8000f1c:	68a0      	ldr	r0, [r4, #8]
    GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8000f1e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8000f20:	f000 fdc4 	bl	8001aac <HAL_GPIO_Init>

    Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
    Encoder_Struct_PTR->Encoder_Count = 0;

    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 8000f24:	8821      	ldrh	r1, [r4, #0]
    Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
 8000f26:	6125      	str	r5, [r4, #16]
    Encoder_Struct_PTR->Encoder_Count = 0;
 8000f28:	82a5      	strh	r5, [r4, #20]
    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 8000f2a:	6860      	ldr	r0, [r4, #4]
 8000f2c:	f000 fe6e 	bl	8001c0c <HAL_GPIO_ReadPin>
	    Encoder_Struct_PTR->Encoder_Pin_0_Port,
	    Encoder_Struct_PTR->Encoder_Pin_0);

    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 8000f30:	8861      	ldrh	r1, [r4, #2]
    Encoder_Struct_PTR->Encoder_Pin_0__State = HAL_GPIO_ReadPin(
 8000f32:	7320      	strb	r0, [r4, #12]
    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 8000f34:	68a0      	ldr	r0, [r4, #8]
 8000f36:	f000 fe69 	bl	8001c0c <HAL_GPIO_ReadPin>
	    Encoder_Struct_PTR->Encoder_Pin_1_Port,
	    Encoder_Struct_PTR->Encoder_Pin_1);

    Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <Encoder_Attach+0xa0>)
    Encoder_Struct_PTR->Encoder_Pin_1__State = HAL_GPIO_ReadPin(
 8000f3c:	7360      	strb	r0, [r4, #13]
    Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 8000f3e:	7818      	ldrb	r0, [r3, #0]
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <Encoder_Attach+0xa4>)
 8000f42:	0081      	lsls	r1, r0, #2
 8000f44:	508c      	str	r4, [r1, r2]
    Attached_Encoders++;
 8000f46:	1c42      	adds	r2, r0, #1
 8000f48:	701a      	strb	r2, [r3, #0]
    if (Attached_Encoders > MAX_ENCODERS)
	{
	//Error
	}
    return (Attached_Encoders - 1); //return encoder ID
    }
 8000f4a:	b00b      	add	sp, #44	; 0x2c
 8000f4c:	bd30      	pop	{r4, r5, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40021000 	.word	0x40021000
 8000f54:	2000005e 	.word	0x2000005e
 8000f58:	20000060 	.word	0x20000060

08000f5c <Encoder_Scan>:

/* call in millis callback or systick callback */
void Encoder_Scan()
    {
 8000f5c:	b570      	push	{r4, r5, r6, lr}

    Encoder_Struct_t *PTR = NULL;

    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8000f5e:	2500      	movs	r5, #0
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <Encoder_Scan+0xb4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	42ab      	cmp	r3, r5
 8000f66:	d800      	bhi.n	8000f6a <Encoder_Scan+0xe>
		PTR->Encoder_Time_Stamp = HAL_GetTick();
		}
	    }
	}

    }
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
	PTR = Encoder_Struct_PTR_Array[Index];
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <Encoder_Scan+0xb8>)
 8000f6c:	00aa      	lsls	r2, r5, #2
 8000f6e:	58d4      	ldr	r4, [r2, r3]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 8000f70:	8821      	ldrh	r1, [r4, #0]
 8000f72:	6860      	ldr	r0, [r4, #4]
 8000f74:	f000 fe4a 	bl	8001c0c <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_0__State)
 8000f78:	7b23      	ldrb	r3, [r4, #12]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 8000f7a:	4298      	cmp	r0, r3
 8000f7c:	d013      	beq.n	8000fa6 <Encoder_Scan+0x4a>
	    PTR->Encoder_Pin_0__State = !PTR->Encoder_Pin_0__State;
 8000f7e:	425a      	negs	r2, r3
 8000f80:	415a      	adcs	r2, r3
 8000f82:	7322      	strb	r2, [r4, #12]
	    if (PTR->Encoder_Pin_0__State && !PTR->Encoder_Pin_1__State)
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10e      	bne.n	8000fa6 <Encoder_Scan+0x4a>
 8000f88:	7b63      	ldrb	r3, [r4, #13]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10b      	bne.n	8000fa6 <Encoder_Scan+0x4a>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 8000f8e:	f000 fc0d 	bl	80017ac <HAL_GetTick>
 8000f92:	6923      	ldr	r3, [r4, #16]
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	280a      	cmp	r0, #10
 8000f98:	d923      	bls.n	8000fe2 <Encoder_Scan+0x86>
		    PTR->Encoder_Count += 1;
 8000f9a:	8aa3      	ldrh	r3, [r4, #20]
 8000f9c:	3301      	adds	r3, #1
		    PTR->Encoder_Count += 50;
 8000f9e:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 8000fa0:	f000 fc04 	bl	80017ac <HAL_GetTick>
 8000fa4:	6120      	str	r0, [r4, #16]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 8000fa6:	8861      	ldrh	r1, [r4, #2]
 8000fa8:	68a0      	ldr	r0, [r4, #8]
 8000faa:	f000 fe2f 	bl	8001c0c <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_1__State)
 8000fae:	7b63      	ldrb	r3, [r4, #13]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d013      	beq.n	8000fdc <Encoder_Scan+0x80>
	    PTR->Encoder_Pin_1__State = !PTR->Encoder_Pin_1__State;
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	415a      	adcs	r2, r3
 8000fb8:	7362      	strb	r2, [r4, #13]
	    if (PTR->Encoder_Pin_1__State && !PTR->Encoder_Pin_0__State)
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10e      	bne.n	8000fdc <Encoder_Scan+0x80>
 8000fbe:	7b23      	ldrb	r3, [r4, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <Encoder_Scan+0x80>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 8000fc4:	f000 fbf2 	bl	80017ac <HAL_GetTick>
 8000fc8:	6923      	ldr	r3, [r4, #16]
 8000fca:	1ac0      	subs	r0, r0, r3
 8000fcc:	280a      	cmp	r0, #10
 8000fce:	d913      	bls.n	8000ff8 <Encoder_Scan+0x9c>
		    PTR->Encoder_Count -= 1;
 8000fd0:	8aa3      	ldrh	r3, [r4, #20]
 8000fd2:	3b01      	subs	r3, #1
		    PTR->Encoder_Count -= 50;
 8000fd4:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 8000fd6:	f000 fbe9 	bl	80017ac <HAL_GetTick>
 8000fda:	6120      	str	r0, [r4, #16]
    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8000fdc:	3501      	adds	r5, #1
 8000fde:	b2ed      	uxtb	r5, r5
 8000fe0:	e7be      	b.n	8000f60 <Encoder_Scan+0x4>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 8000fe2:	f000 fbe3 	bl	80017ac <HAL_GetTick>
 8000fe6:	6923      	ldr	r3, [r4, #16]
 8000fe8:	1ac0      	subs	r0, r0, r3
 8000fea:	8aa3      	ldrh	r3, [r4, #20]
 8000fec:	2805      	cmp	r0, #5
 8000fee:	d901      	bls.n	8000ff4 <Encoder_Scan+0x98>
		    PTR->Encoder_Count += 10;
 8000ff0:	330a      	adds	r3, #10
 8000ff2:	e7d4      	b.n	8000f9e <Encoder_Scan+0x42>
		    PTR->Encoder_Count += 50;
 8000ff4:	3332      	adds	r3, #50	; 0x32
 8000ff6:	e7d2      	b.n	8000f9e <Encoder_Scan+0x42>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 8000ff8:	f000 fbd8 	bl	80017ac <HAL_GetTick>
 8000ffc:	6923      	ldr	r3, [r4, #16]
 8000ffe:	1ac0      	subs	r0, r0, r3
 8001000:	8aa3      	ldrh	r3, [r4, #20]
 8001002:	2805      	cmp	r0, #5
 8001004:	d901      	bls.n	800100a <Encoder_Scan+0xae>
		    PTR->Encoder_Count -= 10;
 8001006:	3b0a      	subs	r3, #10
 8001008:	e7e4      	b.n	8000fd4 <Encoder_Scan+0x78>
		    PTR->Encoder_Count -= 50;
 800100a:	3b32      	subs	r3, #50	; 0x32
 800100c:	e7e2      	b.n	8000fd4 <Encoder_Scan+0x78>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	2000005e 	.word	0x2000005e
 8001014:	20000060 	.word	0x20000060

08001018 <Encoder_Get_Count>:
    {
    if (PTR == NULL)
	{
	//Error
	}
    return PTR->Encoder_Count;
 8001018:	2314      	movs	r3, #20
 800101a:	5ec0      	ldrsh	r0, [r0, r3]
    }
 800101c:	4770      	bx	lr

0800101e <Encoder_Set_Count>:

/* to reset*/
void Encoder_Set_Count(Encoder_Struct_t* PTR, int16_t count)
    {
    if (PTR == NULL)
 800101e:	2800      	cmp	r0, #0
 8001020:	d000      	beq.n	8001024 <Encoder_Set_Count+0x6>
	{
	//Error
	}
    else
	{
	PTR->Encoder_Count = count;
 8001022:	8281      	strh	r1, [r0, #20]
	}
    }
 8001024:	4770      	bx	lr

08001026 <Soft_I2C_SDA_High>:
#include "soft_i2c.h"
#include "delay_us.h"


void Soft_I2C_SDA_High(Soft_I2C_t* i2c_handle)
    {
 8001026:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001028:	2201      	movs	r2, #1
 800102a:	8981      	ldrh	r1, [r0, #12]
 800102c:	6880      	ldr	r0, [r0, #8]
 800102e:	f000 fdf3 	bl	8001c18 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 8001032:	bd10      	pop	{r4, pc}

08001034 <Soft_I2C_SDA_Low>:

void Soft_I2C_SDA_Low(Soft_I2C_t* i2c_handle)
    {
 8001034:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001036:	2200      	movs	r2, #0
 8001038:	8981      	ldrh	r1, [r0, #12]
 800103a:	6880      	ldr	r0, [r0, #8]
 800103c:	f000 fdec 	bl	8001c18 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 8001040:	bd10      	pop	{r4, pc}

08001042 <Soft_I2C_SDA_Read>:

uint8_t Soft_I2C_SDA_Read(Soft_I2C_t* i2c_handle)
    {
 8001042:	b510      	push	{r4, lr}
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 8001044:	8981      	ldrh	r1, [r0, #12]
 8001046:	6880      	ldr	r0, [r0, #8]
 8001048:	f000 fde0 	bl	8001c0c <HAL_GPIO_ReadPin>
    }
 800104c:	bd10      	pop	{r4, pc}

0800104e <Soft_I2C_SCL_High>:

void Soft_I2C_SCL_High(Soft_I2C_t* i2c_handle)
    {
 800104e:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001050:	2201      	movs	r2, #1
 8001052:	8881      	ldrh	r1, [r0, #4]
 8001054:	6800      	ldr	r0, [r0, #0]
 8001056:	f000 fddf 	bl	8001c18 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 800105a:	bd10      	pop	{r4, pc}

0800105c <Soft_I2C_SCL_Low>:

void Soft_I2C_SCL_Low(Soft_I2C_t* i2c_handle)
    {
 800105c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800105e:	2200      	movs	r2, #0
 8001060:	8881      	ldrh	r1, [r0, #4]
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	f000 fdd8 	bl	8001c18 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 8001068:	bd10      	pop	{r4, pc}
	...

0800106c <Soft_I2C_Init>:
    {
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin);
    }

void Soft_I2C_Init(Soft_I2C_t* i2c_handle)
    {
 800106c:	b510      	push	{r4, lr}
 800106e:	0004      	movs	r4, r0

    GPIO_InitTypeDef GPIO_Init;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <Soft_I2C_Init+0x84>)
 8001074:	0300      	lsls	r0, r0, #12
 8001076:	6959      	ldr	r1, [r3, #20]
    {
 8001078:	b08a      	sub	sp, #40	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE()
 800107a:	4301      	orrs	r1, r0
 800107c:	6159      	str	r1, [r3, #20]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8001082:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8001084:	9201      	str	r2, [sp, #4]
 8001086:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8001088:	6959      	ldr	r1, [r3, #20]
 800108a:	0340      	lsls	r0, r0, #13
 800108c:	4301      	orrs	r1, r0
 800108e:	6159      	str	r1, [r3, #20]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4002      	ands	r2, r0
    ;
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8001094:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE()
 800109a:	6959      	ldr	r1, [r3, #20]
 800109c:	0280      	lsls	r0, r0, #10
 800109e:	4301      	orrs	r1, r0
 80010a0:	6159      	str	r1, [r3, #20]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80010a2:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80010a4:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80010a6:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80010a8:	4002      	ands	r2, r0
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80010ae:	695a      	ldr	r2, [r3, #20]
    ;
    Soft_I2C_SDA_High(i2c_handle);
 80010b0:	0020      	movs	r0, r4
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80010b2:	430a      	orrs	r2, r1
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	400b      	ands	r3, r1
 80010ba:	9304      	str	r3, [sp, #16]
 80010bc:	9b04      	ldr	r3, [sp, #16]
    Soft_I2C_SDA_High(i2c_handle);
 80010be:	f7ff ffb2 	bl	8001026 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 80010c2:	0020      	movs	r0, r4
 80010c4:	f7ff ffc3 	bl	800104e <Soft_I2C_SCL_High>

    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
 80010c8:	2311      	movs	r3, #17
 80010ca:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull  = GPIO_PULLUP;
 80010cc:	3b10      	subs	r3, #16
 80010ce:	9307      	str	r3, [sp, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010d0:	9308      	str	r3, [sp, #32]

    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80010d2:	89a3      	ldrh	r3, [r4, #12]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80010d4:	a905      	add	r1, sp, #20
 80010d6:	68a0      	ldr	r0, [r4, #8]
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80010d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80010da:	f000 fce7 	bl	8001aac <HAL_GPIO_Init>

    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 80010de:	88a3      	ldrh	r3, [r4, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 80010e0:	a905      	add	r1, sp, #20
 80010e2:	6820      	ldr	r0, [r4, #0]
    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 80010e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 80010e6:	f000 fce1 	bl	8001aac <HAL_GPIO_Init>
    }
 80010ea:	b00a      	add	sp, #40	; 0x28
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40021000 	.word	0x40021000

080010f4 <Soft_I2C_Start>:


/*generate start condition */

uint8_t Soft_I2C_Start(Soft_I2C_t* i2c_handle)
    {
 80010f4:	b510      	push	{r4, lr}
 80010f6:	0004      	movs	r4, r0

    Soft_I2C_SCL_High(i2c_handle);
 80010f8:	f7ff ffa9 	bl	800104e <Soft_I2C_SCL_High>
    Soft_I2C_SDA_Low(i2c_handle);
 80010fc:	0020      	movs	r0, r4
 80010fe:	f7ff ff99 	bl	8001034 <Soft_I2C_SDA_Low>
    asm("nop");
 8001102:	46c0      	nop			; (mov r8, r8)

    Soft_I2C_Delay();

    if (Soft_I2C_SDA_Read(i2c_handle))
 8001104:	0020      	movs	r0, r4
 8001106:	f7ff ff9c 	bl	8001042 <Soft_I2C_SDA_Read>
 800110a:	1e43      	subs	r3, r0, #1
 800110c:	4198      	sbcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}

    return SOFT_I2C_OK;
    }
 800110e:	b2c0      	uxtb	r0, r0
 8001110:	bd10      	pop	{r4, pc}

08001112 <Soft_I2C_Stop>:

/*generate stop condition */

void Soft_I2C_Stop(Soft_I2C_t* i2c_handle)
    {
 8001112:	b510      	push	{r4, lr}
 8001114:	0004      	movs	r4, r0
    Soft_I2C_SCL_Low(i2c_handle);
 8001116:	f7ff ffa1 	bl	800105c <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 800111a:	0020      	movs	r0, r4
 800111c:	f7ff ff8a 	bl	8001034 <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 8001120:	0020      	movs	r0, r4
 8001122:	f7ff ff94 	bl	800104e <Soft_I2C_SCL_High>
    asm("nop");
 8001126:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SDA_High(i2c_handle);
 8001128:	0020      	movs	r0, r4
 800112a:	f7ff ff7c 	bl	8001026 <Soft_I2C_SDA_High>
    }
 800112e:	bd10      	pop	{r4, pc}

08001130 <Soft_I2C_Wait_ACK>:

uint8_t Soft_I2C_Wait_ACK(Soft_I2C_t* i2c_handle)
    {
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	0004      	movs	r4, r0

    uint16_t timeOut = 5000;

    Soft_I2C_SCL_Low(i2c_handle);
 8001134:	f7ff ff92 	bl	800105c <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 8001138:	0020      	movs	r0, r4
 800113a:	f7ff ff74 	bl	8001026 <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 800113e:	0020      	movs	r0, r4
 8001140:	f7ff ff85 	bl	800104e <Soft_I2C_SCL_High>
    asm("nop");
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	4d0a      	ldr	r5, [pc, #40]	; (8001170 <Soft_I2C_Wait_ACK+0x40>)
    Soft_I2C_Delay();

    while (Soft_I2C_SDA_Read(i2c_handle))
 8001148:	0020      	movs	r0, r4
 800114a:	f7ff ff7a 	bl	8001042 <Soft_I2C_SDA_Read>
 800114e:	1e06      	subs	r6, r0, #0
 8001150:	d103      	bne.n	800115a <Soft_I2C_Wait_ACK+0x2a>
	    Soft_I2C_Stop(i2c_handle);
	    return SOFT_I2C_ERR;
	    }
	}

    Soft_I2C_SCL_Low(i2c_handle);
 8001152:	0020      	movs	r0, r4
 8001154:	f7ff ff82 	bl	800105c <Soft_I2C_SCL_Low>

    return SOFT_I2C_OK;
 8001158:	e007      	b.n	800116a <Soft_I2C_Wait_ACK+0x3a>
 800115a:	3d01      	subs	r5, #1
 800115c:	b2ad      	uxth	r5, r5
	if (timeOut == 0)
 800115e:	2d00      	cmp	r5, #0
 8001160:	d1f2      	bne.n	8001148 <Soft_I2C_Wait_ACK+0x18>
	    Soft_I2C_Stop(i2c_handle);
 8001162:	0020      	movs	r0, r4
 8001164:	f7ff ffd5 	bl	8001112 <Soft_I2C_Stop>
	    return SOFT_I2C_ERR;
 8001168:	2601      	movs	r6, #1

    }
 800116a:	0030      	movs	r0, r6
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	00001388 	.word	0x00001388

08001174 <Soft_I2C_Send_Byte>:
    Soft_I2C_Delay();

    }

uint8_t Soft_I2C_Send_Byte(Soft_I2C_t* i2c_handle, uint8_t byte)
    {
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	0004      	movs	r4, r0
 8001178:	000e      	movs	r6, r1

    uint8_t count = 8;

    Soft_I2C_SCL_Low(i2c_handle);

    while (count--)
 800117a:	2509      	movs	r5, #9
    Soft_I2C_SCL_Low(i2c_handle);
 800117c:	f7ff ff6e 	bl	800105c <Soft_I2C_SCL_Low>
 8001180:	3d01      	subs	r5, #1
 8001182:	b2ed      	uxtb	r5, r5
    while (count--)
 8001184:	2d00      	cmp	r5, #0
 8001186:	d107      	bne.n	8001198 <Soft_I2C_Send_Byte+0x24>
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	Soft_I2C_SCL_Low(i2c_handle);
	Soft_I2C_Delay();
	}
    if (Soft_I2C_Wait_ACK(i2c_handle) == SOFT_I2C_ERR)
 8001188:	0020      	movs	r0, r4
 800118a:	f7ff ffd1 	bl	8001130 <Soft_I2C_Wait_ACK>
 800118e:	3801      	subs	r0, #1
 8001190:	4243      	negs	r3, r0
 8001192:	4158      	adcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}
    return SOFT_I2C_OK;
    }
 8001194:	b2c0      	uxtb	r0, r0
 8001196:	bd70      	pop	{r4, r5, r6, pc}
	if (byte & 0x80)
 8001198:	b273      	sxtb	r3, r6
	    Soft_I2C_SDA_High(i2c_handle);
 800119a:	0020      	movs	r0, r4
	if (byte & 0x80)
 800119c:	2b00      	cmp	r3, #0
 800119e:	da0c      	bge.n	80011ba <Soft_I2C_Send_Byte+0x46>
	    Soft_I2C_SDA_High(i2c_handle);
 80011a0:	f7ff ff41 	bl	8001026 <Soft_I2C_SDA_High>
	Soft_I2C_SCL_High(i2c_handle);
 80011a4:	0020      	movs	r0, r4
	byte <<= 1;
 80011a6:	0076      	lsls	r6, r6, #1
	Soft_I2C_SCL_High(i2c_handle);
 80011a8:	f7ff ff51 	bl	800104e <Soft_I2C_SCL_High>
	byte <<= 1;
 80011ac:	b2f6      	uxtb	r6, r6
    asm("nop");
 80011ae:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_Low(i2c_handle);
 80011b0:	0020      	movs	r0, r4
 80011b2:	f7ff ff53 	bl	800105c <Soft_I2C_SCL_Low>
    asm("nop");
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	e7e2      	b.n	8001180 <Soft_I2C_Send_Byte+0xc>
	    Soft_I2C_SDA_Low(i2c_handle);
 80011ba:	f7ff ff3b 	bl	8001034 <Soft_I2C_SDA_Low>
 80011be:	e7f1      	b.n	80011a4 <Soft_I2C_Send_Byte+0x30>

080011c0 <Soft_I2C_Write_Byte>:

uint8_t Soft_I2C_Write_Byte(Soft_I2C_t* i2c_handle,
	                    uint8_t     slave_address,
	                    uint8_t     register_address,
			    uint8_t     *byte)
    {
 80011c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c2:	0004      	movs	r4, r0
 80011c4:	9101      	str	r1, [sp, #4]
 80011c6:	0017      	movs	r7, r2
 80011c8:	001e      	movs	r6, r3

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 80011ca:	f7ff ff93 	bl	80010f4 <Soft_I2C_Start>
 80011ce:	0005      	movs	r5, r0
 80011d0:	2801      	cmp	r0, #1
 80011d2:	d104      	bne.n	80011de <Soft_I2C_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(i2c_handle);
 80011d4:	0020      	movs	r0, r4
 80011d6:	f7ff ff9c 	bl	8001112 <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 80011da:	0028      	movs	r0, r5
 80011dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80011de:	9901      	ldr	r1, [sp, #4]
 80011e0:	0020      	movs	r0, r4
 80011e2:	f7ff ffc7 	bl	8001174 <Soft_I2C_Send_Byte>
 80011e6:	2801      	cmp	r0, #1
 80011e8:	d101      	bne.n	80011ee <Soft_I2C_Write_Byte+0x2e>
	return SOFT_I2C_ERR;
 80011ea:	2501      	movs	r5, #1
 80011ec:	e7f5      	b.n	80011da <Soft_I2C_Write_Byte+0x1a>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 80011ee:	0039      	movs	r1, r7
 80011f0:	0020      	movs	r0, r4
 80011f2:	f7ff ffbf 	bl	8001174 <Soft_I2C_Send_Byte>
 80011f6:	2801      	cmp	r0, #1
 80011f8:	d0f7      	beq.n	80011ea <Soft_I2C_Write_Byte+0x2a>
    if (byte)
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d104      	bne.n	8001208 <Soft_I2C_Write_Byte+0x48>
    Soft_I2C_Stop(i2c_handle);
 80011fe:	0020      	movs	r0, r4
 8001200:	f7ff ff87 	bl	8001112 <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 8001204:	2500      	movs	r5, #0
 8001206:	e7e8      	b.n	80011da <Soft_I2C_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(i2c_handle, *byte) == SOFT_I2C_ERR)
 8001208:	7831      	ldrb	r1, [r6, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff ffb2 	bl	8001174 <Soft_I2C_Send_Byte>
 8001210:	2801      	cmp	r0, #1
 8001212:	d1f4      	bne.n	80011fe <Soft_I2C_Write_Byte+0x3e>
 8001214:	e7e9      	b.n	80011ea <Soft_I2C_Write_Byte+0x2a>

08001216 <Soft_I2C_Write_Bytes>:
uint8_t Soft_I2C_Write_Bytes(Soft_I2C_t* i2c_handle,
	                     uint8_t     slave_address,
	                     uint8_t     register_address,
			     uint8_t     *buf,
			     uint8_t     num)
    {
 8001216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	ab08      	add	r3, sp, #32
 800121c:	0004      	movs	r4, r0
 800121e:	000f      	movs	r7, r1
 8001220:	9200      	str	r2, [sp, #0]
 8001222:	781e      	ldrb	r6, [r3, #0]

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 8001224:	f7ff ff66 	bl	80010f4 <Soft_I2C_Start>
 8001228:	0005      	movs	r5, r0
 800122a:	2801      	cmp	r0, #1
 800122c:	d104      	bne.n	8001238 <Soft_I2C_Write_Bytes+0x22>
	{
	Soft_I2C_Stop(i2c_handle);
 800122e:	0020      	movs	r0, r4
 8001230:	f7ff ff6f 	bl	8001112 <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 8001234:	0028      	movs	r0, r5
 8001236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 8001238:	0039      	movs	r1, r7
 800123a:	0020      	movs	r0, r4
 800123c:	f7ff ff9a 	bl	8001174 <Soft_I2C_Send_Byte>
 8001240:	2801      	cmp	r0, #1
 8001242:	d101      	bne.n	8001248 <Soft_I2C_Write_Bytes+0x32>
	return SOFT_I2C_ERR;
 8001244:	2501      	movs	r5, #1
 8001246:	e7f5      	b.n	8001234 <Soft_I2C_Write_Bytes+0x1e>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 8001248:	9900      	ldr	r1, [sp, #0]
 800124a:	0020      	movs	r0, r4
 800124c:	f7ff ff92 	bl	8001174 <Soft_I2C_Send_Byte>
 8001250:	2801      	cmp	r0, #1
 8001252:	d0f7      	beq.n	8001244 <Soft_I2C_Write_Bytes+0x2e>
 8001254:	9d01      	ldr	r5, [sp, #4]
 8001256:	19ae      	adds	r6, r5, r6
    while (num--)
 8001258:	42b5      	cmp	r5, r6
 800125a:	d104      	bne.n	8001266 <Soft_I2C_Write_Bytes+0x50>
    Soft_I2C_Stop(i2c_handle);
 800125c:	0020      	movs	r0, r4
 800125e:	f7ff ff58 	bl	8001112 <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 8001262:	2500      	movs	r5, #0
 8001264:	e7e6      	b.n	8001234 <Soft_I2C_Write_Bytes+0x1e>
	if (Soft_I2C_Send_Byte(i2c_handle, *buf++) == SOFT_I2C_ERR)
 8001266:	7829      	ldrb	r1, [r5, #0]
 8001268:	0020      	movs	r0, r4
 800126a:	f7ff ff83 	bl	8001174 <Soft_I2C_Send_Byte>
 800126e:	3501      	adds	r5, #1
 8001270:	2801      	cmp	r0, #1
 8001272:	d1f1      	bne.n	8001258 <Soft_I2C_Write_Bytes+0x42>
 8001274:	e7e6      	b.n	8001244 <Soft_I2C_Write_Bytes+0x2e>
	...

08001278 <Foot_Switch_Callback>:
    }

void Foot_Switch_Callback(uint8_t Clicked_Count)
    {

    if(Clicked_Count == 1)
 8001278:	2801      	cmp	r0, #1
 800127a:	d101      	bne.n	8001280 <Foot_Switch_Callback+0x8>
	{
	Foot_Switchn_Flag = 1;
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <Foot_Switch_Callback+0xc>)
 800127e:	7018      	strb	r0, [r3, #0]
	}
    }
 8001280:	4770      	bx	lr
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000068 	.word	0x20000068

08001288 <Systic_Callback>:
    {
 8001288:	b510      	push	{r4, lr}
    Encoder_Scan();
 800128a:	f7ff fe67 	bl	8000f5c <Encoder_Scan>
    Button_Scan();
 800128e:	f7ff f883 	bl	8000398 <Button_Scan>
    }
 8001292:	bd10      	pop	{r4, pc}

08001294 <Set_Auto_Pulse_Delay>:
    {
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <Set_Auto_Pulse_Delay+0x1c>)
 8001296:	1c03      	adds	r3, r0, #0
 8001298:	4290      	cmp	r0, r2
 800129a:	dd00      	ble.n	800129e <Set_Auto_Pulse_Delay+0xa>
 800129c:	1c13      	adds	r3, r2, #0
    Auto_Pulse_Delay = delay;
 800129e:	22fa      	movs	r2, #250	; 0xfa
 80012a0:	b219      	sxth	r1, r3
 80012a2:	0052      	lsls	r2, r2, #1
 80012a4:	4291      	cmp	r1, r2
 80012a6:	da00      	bge.n	80012aa <Set_Auto_Pulse_Delay+0x16>
 80012a8:	1c13      	adds	r3, r2, #0
 80012aa:	4a02      	ldr	r2, [pc, #8]	; (80012b4 <Set_Auto_Pulse_Delay+0x20>)
 80012ac:	8013      	strh	r3, [r2, #0]
    }
 80012ae:	4770      	bx	lr
 80012b0:	00002710 	.word	0x00002710
 80012b4:	20000018 	.word	0x20000018

080012b8 <Get_Auto_Pulse_Delay>:
    return Auto_Pulse_Delay;
 80012b8:	4b01      	ldr	r3, [pc, #4]	; (80012c0 <Get_Auto_Pulse_Delay+0x8>)
 80012ba:	8818      	ldrh	r0, [r3, #0]
    }
 80012bc:	4770      	bx	lr
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000018 	.word	0x20000018

080012c4 <Set_Main_Pulse_Duration>:
    {
 80012c4:	1c03      	adds	r3, r0, #0
 80012c6:	2864      	cmp	r0, #100	; 0x64
 80012c8:	dd00      	ble.n	80012cc <Set_Main_Pulse_Duration+0x8>
 80012ca:	2364      	movs	r3, #100	; 0x64
    Main_Pulse_Duration = duration;
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	dc00      	bgt.n	80012d4 <Set_Main_Pulse_Duration+0x10>
 80012d2:	2301      	movs	r3, #1
 80012d4:	4a01      	ldr	r2, [pc, #4]	; (80012dc <Set_Main_Pulse_Duration+0x18>)
 80012d6:	8013      	strh	r3, [r2, #0]
    }
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	2000001c 	.word	0x2000001c

080012e0 <Get_Main_Pulse_Duration>:
    return Main_Pulse_Duration;
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <Get_Main_Pulse_Duration+0x8>)
 80012e2:	8818      	ldrh	r0, [r3, #0]
    }
 80012e4:	4770      	bx	lr
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	2000001c 	.word	0x2000001c

080012ec <Set_Short_Pulse_Duration>:
    {
 80012ec:	1c03      	adds	r3, r0, #0
 80012ee:	2864      	cmp	r0, #100	; 0x64
 80012f0:	dd00      	ble.n	80012f4 <Set_Short_Pulse_Duration+0x8>
 80012f2:	2364      	movs	r3, #100	; 0x64
    Short_Pulse_Duration = duration;
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	dc00      	bgt.n	80012fc <Set_Short_Pulse_Duration+0x10>
 80012fa:	2301      	movs	r3, #1
 80012fc:	4a01      	ldr	r2, [pc, #4]	; (8001304 <Set_Short_Pulse_Duration+0x18>)
 80012fe:	8013      	strh	r3, [r2, #0]
    }
 8001300:	4770      	bx	lr
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	2000001e 	.word	0x2000001e

08001308 <Get_Short_Pulse_Duration>:
    return Short_Pulse_Duration;
 8001308:	4b01      	ldr	r3, [pc, #4]	; (8001310 <Get_Short_Pulse_Duration+0x8>)
 800130a:	8818      	ldrh	r0, [r3, #0]
    }
 800130c:	4770      	bx	lr
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	2000001e 	.word	0x2000001e

08001314 <Set_Batt_Alarm>:
    {
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <Set_Batt_Alarm+0x1c>)
 8001316:	1c03      	adds	r3, r0, #0
 8001318:	4290      	cmp	r0, r2
 800131a:	dd00      	ble.n	800131e <Set_Batt_Alarm+0xa>
 800131c:	1c13      	adds	r3, r2, #0
    Batt_Alarm = voltage;
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <Set_Batt_Alarm+0x20>)
 8001320:	b219      	sxth	r1, r3
 8001322:	4291      	cmp	r1, r2
 8001324:	da00      	bge.n	8001328 <Set_Batt_Alarm+0x14>
 8001326:	1c13      	adds	r3, r2, #0
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <Set_Batt_Alarm+0x24>)
 800132a:	8013      	strh	r3, [r2, #0]
    }
 800132c:	4770      	bx	lr
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000032c8 	.word	0x000032c8
 8001334:	00002710 	.word	0x00002710
 8001338:	2000001a 	.word	0x2000001a

0800133c <Get_Batt_Alarm>:
    return Batt_Alarm;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <Get_Batt_Alarm+0x8>)
 800133e:	8818      	ldrh	r0, [r3, #0]
    }
 8001340:	4770      	bx	lr
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	2000001a 	.word	0x2000001a

08001348 <Get_Welder_Status>:
    return Welder_Enable_Flag;
 8001348:	4b01      	ldr	r3, [pc, #4]	; (8001350 <Get_Welder_Status+0x8>)
 800134a:	7818      	ldrb	r0, [r3, #0]
    }
 800134c:	4770      	bx	lr
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000020 	.word	0x20000020

08001354 <Disble_Auto_Welder>:
    Welder_Auto_Flag = 0;
 8001354:	2200      	movs	r2, #0
 8001356:	4b01      	ldr	r3, [pc, #4]	; (800135c <Disble_Auto_Welder+0x8>)
 8001358:	701a      	strb	r2, [r3, #0]
    }
 800135a:	4770      	bx	lr
 800135c:	20000070 	.word	0x20000070

08001360 <Enable_Auto_Welder>:
    Welder_Auto_Flag = 1;
 8001360:	2201      	movs	r2, #1
 8001362:	4b01      	ldr	r3, [pc, #4]	; (8001368 <Enable_Auto_Welder+0x8>)
 8001364:	701a      	strb	r2, [r3, #0]
    }
 8001366:	4770      	bx	lr
 8001368:	20000070 	.word	0x20000070

0800136c <Spot_Welder_Main>:

void Spot_Welder_Main()
    {

    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	4827      	ldr	r0, [pc, #156]	; (800140c <Spot_Welder_Main+0xa0>)
 8001370:	009b      	lsls	r3, r3, #2
    {
 8001372:	b570      	push	{r4, r5, r6, lr}
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8001374:	8083      	strh	r3, [r0, #4]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8001376:	2590      	movs	r5, #144	; 0x90

    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8001378:	2380      	movs	r3, #128	; 0x80
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 800137a:	05ed      	lsls	r5, r5, #23
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	8183      	strh	r3, [r0, #12]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8001380:	6005      	str	r5, [r0, #0]
    Soft_I2C1.GPIO_SDA_Port = SOFT_I2C_SDA_PORT;
 8001382:	6085      	str	r5, [r0, #8]

    Soft_I2C_Init(&Soft_I2C1);
 8001384:	f7ff fe72 	bl	800106c <Soft_I2C_Init>

    ssd1306_Init();
 8001388:	f000 f892 	bl	80014b0 <ssd1306_Init>

    ssd1306_Fill(Black);
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f85d 	bl	800144c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8001392:	2100      	movs	r1, #0
 8001394:	0008      	movs	r0, r1
 8001396:	f000 f975 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString("  Arduino", Font_11x18, White);
 800139a:	4c1d      	ldr	r4, [pc, #116]	; (8001410 <Spot_Welder_Main+0xa4>)
 800139c:	2301      	movs	r3, #1
 800139e:	6862      	ldr	r2, [r4, #4]
 80013a0:	6821      	ldr	r1, [r4, #0]
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <Spot_Welder_Main+0xa8>)
 80013a4:	f000 f95a 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80013a8:	2114      	movs	r1, #20
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f96a 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString("Spot Welder", Font_11x18, White);
 80013b0:	2301      	movs	r3, #1
 80013b2:	6821      	ldr	r1, [r4, #0]
 80013b4:	6862      	ldr	r2, [r4, #4]
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <Spot_Welder_Main+0xac>)
 80013b8:	f000 f950 	bl	800165c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80013bc:	2128      	movs	r1, #40	; 0x28
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f960 	bl	8001684 <ssd1306_SetCursor>
    ssd1306_WriteString("    V3", Font_11x18, White);
 80013c4:	cc06      	ldmia	r4!, {r1, r2}
 80013c6:	2301      	movs	r3, #1
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <Spot_Welder_Main+0xb0>)
 80013ca:	f000 f947 	bl	800165c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80013ce:	f000 f84b 	bl	8001468 <ssd1306_UpdateScreen>

    Foot_Switch.Button_Pin = Foot_Switch_Pin;
 80013d2:	2310      	movs	r3, #16
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <Spot_Welder_Main+0xb4>)
 80013d6:	8003      	strh	r3, [r0, #0]
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
    Foot_Switch.Button_Pressed_Logic = LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	7203      	strb	r3, [r0, #8]
    Foot_Switch.Callback = Foot_Switch_Callback;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <Spot_Welder_Main+0xb8>)
    Foot_Switch.Button_Pin_Port = Foot_Switch_GPIO_Port;
 80013de:	6045      	str	r5, [r0, #4]
    Foot_Switch.Callback = Foot_Switch_Callback;
 80013e0:	6183      	str	r3, [r0, #24]
    Button_Attach(&Foot_Switch);
 80013e2:	f7fe ff8d 	bl	8000300 <Button_Attach>



    Init_Menu();
 80013e6:	f7ff f8ff 	bl	80005e8 <Init_Menu>

    HAL_Delay(2000);
 80013ea:	20fa      	movs	r0, #250	; 0xfa
 80013ec:	00c0      	lsls	r0, r0, #3
 80013ee:	f000 f9e3 	bl	80017b8 <HAL_Delay>
    while (1)
	{

	static uint32_t Scan_Time_Stamp = 0;

	if (HAL_GetTick() - Scan_Time_Stamp > (100 - 1))
 80013f2:	f000 f9db 	bl	80017ac <HAL_GetTick>
 80013f6:	4c0c      	ldr	r4, [pc, #48]	; (8001428 <Spot_Welder_Main+0xbc>)
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	2863      	cmp	r0, #99	; 0x63
 80013fe:	d9f8      	bls.n	80013f2 <Spot_Welder_Main+0x86>
	    {

	    Scan_Time_Stamp = HAL_GetTick();
 8001400:	f000 f9d4 	bl	80017ac <HAL_GetTick>
 8001404:	6020      	str	r0, [r4, #0]

	    Handle_Menu();
 8001406:	f7ff f92b 	bl	8000660 <Handle_Menu>
 800140a:	e7f2      	b.n	80013f2 <Spot_Welder_Main+0x86>
 800140c:	20000530 	.word	0x20000530
 8001410:	20000000 	.word	0x20000000
 8001414:	0800381c 	.word	0x0800381c
 8001418:	08003826 	.word	0x08003826
 800141c:	08003832 	.word	0x08003832
 8001420:	200004f0 	.word	0x200004f0
 8001424:	08001279 	.word	0x08001279
 8001428:	2000006c 	.word	0x2000006c

0800142c <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 800142c:	b507      	push	{r0, r1, r2, lr}
 800142e:	466b      	mov	r3, sp
 8001430:	3307      	adds	r3, #7
 8001432:	7018      	strb	r0, [r3, #0]
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 8001434:	2200      	movs	r2, #0
 8001436:	2178      	movs	r1, #120	; 0x78
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <ssd1306_WriteCommand+0x1c>)
 800143a:	f7ff fec1 	bl	80011c0 <Soft_I2C_Write_Byte>
 800143e:	2801      	cmp	r0, #1
 8001440:	d101      	bne.n	8001446 <ssd1306_WriteCommand+0x1a>
    {
    	Error_Handler();
 8001442:	f7ff f895 	bl	8000570 <Error_Handler>
    }
}
 8001446:	bd07      	pop	{r0, r1, r2, pc}
 8001448:	20000530 	.word	0x20000530

0800144c <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800144c:	1e42      	subs	r2, r0, #1
 800144e:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <ssd1306_Fill+0x18>)
 8001456:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001458:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800145a:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800145c:	3301      	adds	r3, #1
 800145e:	4293      	cmp	r3, r2
 8001460:	d1fb      	bne.n	800145a <ssd1306_Fill+0xe>
	}
}
 8001462:	4770      	bx	lr
 8001464:	20000078 	.word	0x20000078

08001468 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800146a:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 800146c:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 800146e:	0020      	movs	r0, r4
 8001470:	3850      	subs	r0, #80	; 0x50
 8001472:	b2c0      	uxtb	r0, r0
 8001474:	f7ff ffda 	bl	800142c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffd7 	bl	800142c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800147e:	2010      	movs	r0, #16
 8001480:	f7ff ffd4 	bl	800142c <ssd1306_WriteCommand>
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <ssd1306_UpdateScreen+0x40>)
 8001486:	01e3      	lsls	r3, r4, #7
 8001488:	189b      	adds	r3, r3, r2
 800148a:	9500      	str	r5, [sp, #0]
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	2178      	movs	r1, #120	; 0x78
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <ssd1306_UpdateScreen+0x44>)
 8001492:	f7ff fec0 	bl	8001216 <Soft_I2C_Write_Bytes>
 8001496:	2801      	cmp	r0, #1
 8001498:	d101      	bne.n	800149e <ssd1306_UpdateScreen+0x36>
	    {
	    	Error_Handler();
 800149a:	f7ff f869 	bl	8000570 <Error_Handler>
 800149e:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 80014a0:	2c08      	cmp	r4, #8
 80014a2:	d1e4      	bne.n	800146e <ssd1306_UpdateScreen+0x6>
	    }
	}
}
 80014a4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000078 	.word	0x20000078
 80014ac:	20000530 	.word	0x20000530

080014b0 <ssd1306_Init>:
{	
 80014b0:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(0xAE); //display off
 80014b2:	20ae      	movs	r0, #174	; 0xae
 80014b4:	f7ff ffba 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80014b8:	2020      	movs	r0, #32
 80014ba:	f7ff ffb7 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014be:	2010      	movs	r0, #16
 80014c0:	f7ff ffb4 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014c4:	20b0      	movs	r0, #176	; 0xb0
 80014c6:	f7ff ffb1 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014ca:	20c8      	movs	r0, #200	; 0xc8
 80014cc:	f7ff ffae 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ffab 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80014d6:	2010      	movs	r0, #16
 80014d8:	f7ff ffa8 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	f7ff ffa5 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80014e2:	2081      	movs	r0, #129	; 0x81
 80014e4:	f7ff ffa2 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80014e8:	20ff      	movs	r0, #255	; 0xff
 80014ea:	f7ff ff9f 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80014ee:	20a1      	movs	r0, #161	; 0xa1
 80014f0:	f7ff ff9c 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80014f4:	20a6      	movs	r0, #166	; 0xa6
 80014f6:	f7ff ff99 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80014fa:	20a8      	movs	r0, #168	; 0xa8
 80014fc:	f7ff ff96 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001500:	203f      	movs	r0, #63	; 0x3f
 8001502:	f7ff ff93 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001506:	20a4      	movs	r0, #164	; 0xa4
 8001508:	f7ff ff90 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800150c:	20d3      	movs	r0, #211	; 0xd3
 800150e:	f7ff ff8d 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff ff8a 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001518:	20d5      	movs	r0, #213	; 0xd5
 800151a:	f7ff ff87 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800151e:	20f0      	movs	r0, #240	; 0xf0
 8001520:	f7ff ff84 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001524:	20d9      	movs	r0, #217	; 0xd9
 8001526:	f7ff ff81 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800152a:	2022      	movs	r0, #34	; 0x22
 800152c:	f7ff ff7e 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001530:	20da      	movs	r0, #218	; 0xda
 8001532:	f7ff ff7b 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001536:	2012      	movs	r0, #18
 8001538:	f7ff ff78 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800153c:	20db      	movs	r0, #219	; 0xdb
 800153e:	f7ff ff75 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001542:	2020      	movs	r0, #32
 8001544:	f7ff ff72 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001548:	208d      	movs	r0, #141	; 0x8d
 800154a:	f7ff ff6f 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800154e:	2014      	movs	r0, #20
 8001550:	f7ff ff6c 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001554:	20af      	movs	r0, #175	; 0xaf
 8001556:	f7ff ff69 	bl	800142c <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ff76 	bl	800144c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001560:	f7ff ff82 	bl	8001468 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001564:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8001566:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <ssd1306_Init+0xc4>)
 800156a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800156c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800156e:	7158      	strb	r0, [r3, #5]
}
 8001570:	bd10      	pop	{r4, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000072 	.word	0x20000072

08001578 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001578:	b243      	sxtb	r3, r0
{
 800157a:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800157c:	2b00      	cmp	r3, #0
 800157e:	db16      	blt.n	80015ae <ssd1306_DrawPixel+0x36>
 8001580:	293f      	cmp	r1, #63	; 0x3f
 8001582:	d814      	bhi.n	80015ae <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <ssd1306_DrawPixel+0x40>)
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 800158c:	4253      	negs	r3, r2
 800158e:	415a      	adcs	r2, r3
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	2407      	movs	r4, #7
 8001594:	08cb      	lsrs	r3, r1, #3
 8001596:	400c      	ands	r4, r1
 8001598:	2101      	movs	r1, #1
 800159a:	40a1      	lsls	r1, r4
 800159c:	01db      	lsls	r3, r3, #7
 800159e:	4d07      	ldr	r5, [pc, #28]	; (80015bc <ssd1306_DrawPixel+0x44>)
 80015a0:	1818      	adds	r0, r3, r0
 80015a2:	562e      	ldrsb	r6, [r5, r0]
 80015a4:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 80015a6:	2a01      	cmp	r2, #1
 80015a8:	d102      	bne.n	80015b0 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015aa:	4333      	orrs	r3, r6
 80015ac:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015b0:	439e      	bics	r6, r3
 80015b2:	542e      	strb	r6, [r5, r0]
 80015b4:	e7fb      	b.n	80015ae <ssd1306_DrawPixel+0x36>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000072 	.word	0x20000072
 80015bc:	20000078 	.word	0x20000078

080015c0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	9303      	str	r3, [sp, #12]
 80015c6:	b2cb      	uxtb	r3, r1
 80015c8:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <ssd1306_WriteChar+0x98>)
{
 80015cc:	9106      	str	r1, [sp, #24]
 80015ce:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80015d0:	9901      	ldr	r1, [sp, #4]
 80015d2:	881a      	ldrh	r2, [r3, #0]
{
 80015d4:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	1852      	adds	r2, r2, r1
 80015da:	2a7f      	cmp	r2, #127	; 0x7f
 80015dc:	dc3a      	bgt.n	8001654 <ssd1306_WriteChar+0x94>
 80015de:	aa06      	add	r2, sp, #24
 80015e0:	7852      	ldrb	r2, [r2, #1]
 80015e2:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80015e4:	885c      	ldrh	r4, [r3, #2]
 80015e6:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80015e8:	2b3f      	cmp	r3, #63	; 0x3f
 80015ea:	dc33      	bgt.n	8001654 <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015ec:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 80015ee:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015f0:	3b20      	subs	r3, #32
 80015f2:	435a      	muls	r2, r3
 80015f4:	b2e4      	uxtb	r4, r4
 80015f6:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 80015f8:	9b02      	ldr	r3, [sp, #8]
 80015fa:	42bb      	cmp	r3, r7
 80015fc:	d808      	bhi.n	8001610 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 80015fe:	9a01      	ldr	r2, [sp, #4]
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	4694      	mov	ip, r2
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <ssd1306_WriteChar+0x98>)
 8001606:	4463      	add	r3, ip
 8001608:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 800160a:	0030      	movs	r0, r6
 800160c:	b009      	add	sp, #36	; 0x24
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8001610:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001612:	9b04      	ldr	r3, [sp, #16]
 8001614:	9a07      	ldr	r2, [sp, #28]
 8001616:	19db      	adds	r3, r3, r7
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	5a9b      	ldrh	r3, [r3, r2]
 800161c:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 800161e:	9b01      	ldr	r3, [sp, #4]
 8001620:	42ab      	cmp	r3, r5
 8001622:	d803      	bhi.n	800162c <ssd1306_WriteChar+0x6c>
 8001624:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 8001626:	3701      	adds	r7, #1
 8001628:	b2e4      	uxtb	r4, r4
 800162a:	e7e5      	b.n	80015f8 <ssd1306_WriteChar+0x38>
 800162c:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	18e8      	adds	r0, r5, r3
 8001632:	9b05      	ldr	r3, [sp, #20]
 8001634:	0212      	lsls	r2, r2, #8
 8001636:	40ab      	lsls	r3, r5
 8001638:	b2c0      	uxtb	r0, r0
 800163a:	4213      	tst	r3, r2
 800163c:	d005      	beq.n	800164a <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800163e:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001640:	0021      	movs	r1, r4
 8001642:	f7ff ff99 	bl	8001578 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001646:	3501      	adds	r5, #1
 8001648:	e7e9      	b.n	800161e <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800164a:	9a03      	ldr	r2, [sp, #12]
 800164c:	4253      	negs	r3, r2
 800164e:	415a      	adcs	r2, r3
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	e7f5      	b.n	8001640 <ssd1306_WriteChar+0x80>
		return 0;
 8001654:	2600      	movs	r6, #0
 8001656:	e7d8      	b.n	800160a <ssd1306_WriteChar+0x4a>
 8001658:	20000072 	.word	0x20000072

0800165c <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800165c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800165e:	0004      	movs	r4, r0
 8001660:	001d      	movs	r5, r3
 8001662:	9100      	str	r1, [sp, #0]
 8001664:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8001666:	7820      	ldrb	r0, [r4, #0]
 8001668:	2800      	cmp	r0, #0
 800166a:	d100      	bne.n	800166e <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 800166c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800166e:	002b      	movs	r3, r5
 8001670:	9900      	ldr	r1, [sp, #0]
 8001672:	9a01      	ldr	r2, [sp, #4]
 8001674:	f7ff ffa4 	bl	80015c0 <ssd1306_WriteChar>
 8001678:	0003      	movs	r3, r0
 800167a:	7820      	ldrb	r0, [r4, #0]
 800167c:	4283      	cmp	r3, r0
 800167e:	d1f5      	bne.n	800166c <ssd1306_WriteString+0x10>
		str++;
 8001680:	3401      	adds	r4, #1
 8001682:	e7f0      	b.n	8001666 <ssd1306_WriteString+0xa>

08001684 <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <ssd1306_SetCursor+0x8>)
 8001686:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001688:	8059      	strh	r1, [r3, #2]
}
 800168a:	4770      	bx	lr
 800168c:	20000072 	.word	0x20000072

08001690 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	2001      	movs	r0, #1
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_MspInit+0x2c>)
{
 8001694:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	6999      	ldr	r1, [r3, #24]
 8001698:	4301      	orrs	r1, r0
 800169a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4002      	ands	r2, r0
 80016a4:	9200      	str	r2, [sp, #0]
 80016a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	61da      	str	r2, [r3, #28]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	400b      	ands	r3, r1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	b002      	add	sp, #8
 80016b8:	4770      	bx	lr
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000

080016c0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c0:	4770      	bx	lr

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler>

080016c4 <SVC_Handler>:
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f863 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systic_Callback();
 80016ce:	f7ff fddb 	bl	8001288 <Systic_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016d4:	4770      	bx	lr
	...

080016d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001702:	f7ff ffe7 	bl	80016d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001706:	f000 fd45 	bl	8002194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170a:	f7fe ff25 	bl	8000558 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   r0, =_estack
 8001710:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800171c:	08003878 	.word	0x08003878
  ldr r2, =_sbss
 8001720:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001724:	20000544 	.word	0x20000544

08001728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_IRQHandler>
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	20fa      	movs	r0, #250	; 0xfa
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_InitTick+0x3c>)
 8001734:	0080      	lsls	r0, r0, #2
 8001736:	7819      	ldrb	r1, [r3, #0]
 8001738:	f7fe fcf0 	bl	800011c <__udivsi3>
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_InitTick+0x40>)
 800173e:	0001      	movs	r1, r0
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	f7fe fceb 	bl	800011c <__udivsi3>
 8001746:	f000 f997 	bl	8001a78 <HAL_SYSTICK_Config>
 800174a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174e:	2c00      	cmp	r4, #0
 8001750:	d109      	bne.n	8001766 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	2d03      	cmp	r5, #3
 8001754:	d807      	bhi.n	8001766 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001756:	3802      	subs	r0, #2
 8001758:	0022      	movs	r2, r4
 800175a:	0029      	movs	r1, r5
 800175c:	f000 f962 	bl	8001a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	0020      	movs	r0, r4
 8001762:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_InitTick+0x44>)
 8001764:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	20000028 	.word	0x20000028
 800176c:	20000024 	.word	0x20000024
 8001770:	2000002c 	.word	0x2000002c

08001774 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	2310      	movs	r3, #16
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_Init+0x1c>)
{
 8001778:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800177c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177e:	430b      	orrs	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	f7ff ffd3 	bl	800172c <HAL_InitTick>
  HAL_MspInit();
 8001786:	f7ff ff83 	bl	8001690 <HAL_MspInit>
}
 800178a:	2000      	movs	r0, #0
 800178c:	bd10      	pop	{r4, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x10>)
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_IncTick+0x14>)
 8001798:	6811      	ldr	r1, [r2, #0]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	185b      	adds	r3, r3, r1
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	4770      	bx	lr
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000540 	.word	0x20000540
 80017a8:	20000028 	.word	0x20000028

080017ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017ac:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <HAL_GetTick+0x8>)
 80017ae:	6818      	ldr	r0, [r3, #0]
}
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000540 	.word	0x20000540

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fff6 	bl	80017ac <HAL_GetTick>
 80017c0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	1c63      	adds	r3, r4, #1
 80017c4:	d002      	beq.n	80017cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_Delay+0x20>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	1b40      	subs	r0, r0, r5
 80017d2:	42a0      	cmp	r0, r4
 80017d4:	d3fa      	bcc.n	80017cc <HAL_Delay+0x14>
  {
  }
}
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
 80017d8:	20000028 	.word	0x20000028

080017dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d07e      	beq.n	80018e4 <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d106      	bne.n	80017fa <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ec:	0022      	movs	r2, r4
 80017ee:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80017f4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80017f6:	f7fe fd55 	bl	80002a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017fc:	06db      	lsls	r3, r3, #27
 80017fe:	d500      	bpl.n	8001802 <HAL_ADC_Init+0x26>
 8001800:	e085      	b.n	800190e <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001802:	2204      	movs	r2, #4
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	6898      	ldr	r0, [r3, #8]
 8001808:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800180a:	d000      	beq.n	800180e <HAL_ADC_Init+0x32>
 800180c:	e07f      	b.n	800190e <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001810:	4942      	ldr	r1, [pc, #264]	; (800191c <HAL_ADC_Init+0x140>)
 8001812:	4011      	ands	r1, r2
 8001814:	2202      	movs	r2, #2
 8001816:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001818:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	400a      	ands	r2, r1
 8001820:	2a01      	cmp	r2, #1
 8001822:	d105      	bne.n	8001830 <HAL_ADC_Init+0x54>
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	4211      	tst	r1, r2
 8001828:	d10e      	bne.n	8001848 <HAL_ADC_Init+0x6c>
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	0412      	lsls	r2, r2, #16
 800182e:	d40b      	bmi.n	8001848 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001830:	2118      	movs	r1, #24
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	438a      	bics	r2, r1
 8001836:	68a1      	ldr	r1, [r4, #8]
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	6862      	ldr	r2, [r4, #4]
 8001840:	0089      	lsls	r1, r1, #2
 8001842:	0889      	lsrs	r1, r1, #2
 8001844:	4311      	orrs	r1, r2
 8001846:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_ADC_Init+0x144>)
 800184c:	400a      	ands	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001850:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001852:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001854:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001856:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001858:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800185a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800185c:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800185e:	3a01      	subs	r2, #1
 8001860:	1e56      	subs	r6, r2, #1
 8001862:	41b2      	sbcs	r2, r6
 8001864:	0316      	lsls	r6, r2, #12
 8001866:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001868:	034f      	lsls	r7, r1, #13
 800186a:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800186c:	6922      	ldr	r2, [r4, #16]
 800186e:	432f      	orrs	r7, r5
 8001870:	2a02      	cmp	r2, #2
 8001872:	d100      	bne.n	8001876 <HAL_ADC_Init+0x9a>
 8001874:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001876:	1d62      	adds	r2, r4, #5
 8001878:	7fd2      	ldrb	r2, [r2, #31]
 800187a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800187c:	433a      	orrs	r2, r7
 800187e:	4332      	orrs	r2, r6
 8001880:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001882:	7ee0      	ldrb	r0, [r4, #27]
 8001884:	2801      	cmp	r0, #1
 8001886:	d104      	bne.n	8001892 <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001888:	2900      	cmp	r1, #0
 800188a:	d12c      	bne.n	80018e6 <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001892:	20c2      	movs	r0, #194	; 0xc2
 8001894:	69e1      	ldr	r1, [r4, #28]
 8001896:	30ff      	adds	r0, #255	; 0xff
 8001898:	4281      	cmp	r1, r0
 800189a:	d002      	beq.n	80018a2 <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800189c:	6a20      	ldr	r0, [r4, #32]
 800189e:	4301      	orrs	r1, r0
 80018a0:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018a2:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018a4:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018a6:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018a8:	4311      	orrs	r1, r2
 80018aa:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018ae:	4281      	cmp	r1, r0
 80018b0:	d002      	beq.n	80018b8 <HAL_ADC_Init+0xdc>
 80018b2:	1e48      	subs	r0, r1, #1
 80018b4:	2806      	cmp	r0, #6
 80018b6:	d807      	bhi.n	80018c8 <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018b8:	2507      	movs	r5, #7
 80018ba:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80018bc:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018be:	43a8      	bics	r0, r5
 80018c0:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80018c2:	6958      	ldr	r0, [r3, #20]
 80018c4:	4301      	orrs	r1, r0
 80018c6:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_ADC_Init+0x148>)
 80018cc:	400b      	ands	r3, r1
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d111      	bne.n	80018f6 <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018d4:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80018d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018da:	4393      	bics	r3, r2
 80018dc:	001a      	movs	r2, r3
 80018de:	2301      	movs	r3, #1
 80018e0:	4313      	orrs	r3, r2
 80018e2:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80018e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e6:	2120      	movs	r1, #32
 80018e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80018ea:	4329      	orrs	r1, r5
 80018ec:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018f0:	4308      	orrs	r0, r1
 80018f2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80018f4:	e7cd      	b.n	8001892 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 80018f6:	2212      	movs	r2, #18
 80018f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80018fc:	4393      	bics	r3, r2
 80018fe:	001a      	movs	r2, r3
 8001900:	2310      	movs	r3, #16
 8001902:	4313      	orrs	r3, r2
 8001904:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001908:	4303      	orrs	r3, r0
 800190a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800190c:	e7ea      	b.n	80018e4 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	2310      	movs	r3, #16
 8001910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001912:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001914:	4313      	orrs	r3, r2
 8001916:	63a3      	str	r3, [r4, #56]	; 0x38
 8001918:	e7e4      	b.n	80018e4 <HAL_ADC_Init+0x108>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	fffffefd 	.word	0xfffffefd
 8001920:	fffe0219 	.word	0xfffe0219
 8001924:	833fffe7 	.word	0x833fffe7

08001928 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800192a:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	0004      	movs	r4, r0
{
 800192e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001930:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001932:	3434      	adds	r4, #52	; 0x34
 8001934:	7823      	ldrb	r3, [r4, #0]
{
 8001936:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001938:	2002      	movs	r0, #2
 800193a:	2b01      	cmp	r3, #1
 800193c:	d02f      	beq.n	800199e <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800193e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001940:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001942:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8001944:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001946:	68bd      	ldr	r5, [r7, #8]
 8001948:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 800194a:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800194c:	4005      	ands	r5, r0
 800194e:	d159      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0xdc>
 8001950:	680e      	ldr	r6, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001952:	482f      	ldr	r0, [pc, #188]	; (8001a10 <HAL_ADC_ConfigChannel+0xe8>)
 8001954:	40b3      	lsls	r3, r6
 8001956:	0032      	movs	r2, r6
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	684b      	ldr	r3, [r1, #4]
 800195c:	3a10      	subs	r2, #16
 800195e:	4283      	cmp	r3, r0
 8001960:	d03d      	beq.n	80019de <HAL_ADC_ConfigChannel+0xb6>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	9801      	ldr	r0, [sp, #4]
 8001966:	4318      	orrs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001968:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800196a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	459c      	cmp	ip, r3
 8001970:	d010      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x6c>
 8001972:	4663      	mov	r3, ip
 8001974:	3b01      	subs	r3, #1
 8001976:	2b06      	cmp	r3, #6
 8001978:	d90c      	bls.n	8001994 <HAL_ADC_ConfigChannel+0x6c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800197a:	688b      	ldr	r3, [r1, #8]
 800197c:	2107      	movs	r1, #7
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	4008      	ands	r0, r1
 8001982:	4283      	cmp	r3, r0
 8001984:	d006      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x6c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001986:	6978      	ldr	r0, [r7, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001988:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800198a:	4388      	bics	r0, r1
 800198c:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	4303      	orrs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001994:	2a01      	cmp	r2, #1
 8001996:	d904      	bls.n	80019a2 <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199a:	2300      	movs	r3, #0
 800199c:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800199e:	b005      	add	sp, #20
 80019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019a2:	0033      	movs	r3, r6
 80019a4:	3b10      	subs	r3, #16
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	4183      	sbcs	r3, r0
 80019aa:	2080      	movs	r0, #128	; 0x80
 80019ac:	4919      	ldr	r1, [pc, #100]	; (8001a14 <HAL_ADC_ConfigChannel+0xec>)
 80019ae:	425b      	negs	r3, r3
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	059b      	lsls	r3, r3, #22
 80019b4:	0400      	lsls	r0, r0, #16
 80019b6:	181b      	adds	r3, r3, r0
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019bc:	2e10      	cmp	r6, #16
 80019be:	d1eb      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_ADC_ConfigChannel+0xf0>)
 80019c2:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_ADC_ConfigChannel+0xf4>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f7fe fba9 	bl	800011c <__udivsi3>
 80019ca:	230a      	movs	r3, #10
 80019cc:	4358      	muls	r0, r3
 80019ce:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0e0      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 80019d6:	9b03      	ldr	r3, [sp, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	9303      	str	r3, [sp, #12]
 80019dc:	e7f8      	b.n	80019d0 <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	4399      	bics	r1, r3
 80019e4:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d8d6      	bhi.n	8001998 <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019ea:	1e53      	subs	r3, r2, #1
 80019ec:	419a      	sbcs	r2, r3
 80019ee:	4253      	negs	r3, r2
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <HAL_ADC_ConfigChannel+0xec>)
 80019f4:	03d2      	lsls	r2, r2, #15
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_ADC_ConfigChannel+0xf8>)
 80019fa:	6808      	ldr	r0, [r1, #0]
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	4003      	ands	r3, r0
 8001a00:	600b      	str	r3, [r1, #0]
 8001a02:	e7c9      	b.n	8001998 <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	2120      	movs	r1, #32
 8001a06:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001a08:	4301      	orrs	r1, r0
 8001a0a:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	e7c4      	b.n	800199a <HAL_ADC_ConfigChannel+0x72>
 8001a10:	00001001 	.word	0x00001001
 8001a14:	40012708 	.word	0x40012708
 8001a18:	20000024 	.word	0x20000024
 8001a1c:	000f4240 	.word	0x000f4240
 8001a20:	ff7fffff 	.word	0xff7fffff

08001a24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a24:	b530      	push	{r4, r5, lr}
 8001a26:	25ff      	movs	r5, #255	; 0xff
 8001a28:	2403      	movs	r4, #3
 8001a2a:	002a      	movs	r2, r5
 8001a2c:	b2c3      	uxtb	r3, r0
 8001a2e:	401c      	ands	r4, r3
 8001a30:	00e4      	lsls	r4, r4, #3
 8001a32:	40a2      	lsls	r2, r4
 8001a34:	0189      	lsls	r1, r1, #6
 8001a36:	4029      	ands	r1, r5
 8001a38:	43d2      	mvns	r2, r2
 8001a3a:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	db0a      	blt.n	8001a56 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a40:	24c0      	movs	r4, #192	; 0xc0
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_NVIC_SetPriority+0x4c>)
 8001a44:	0880      	lsrs	r0, r0, #2
 8001a46:	0080      	lsls	r0, r0, #2
 8001a48:	18c0      	adds	r0, r0, r3
 8001a4a:	00a4      	lsls	r4, r4, #2
 8001a4c:	5903      	ldr	r3, [r0, r4]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	4311      	orrs	r1, r2
 8001a52:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001a54:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a56:	200f      	movs	r0, #15
 8001a58:	4003      	ands	r3, r0
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_NVIC_SetPriority+0x50>)
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	181b      	adds	r3, r3, r0
 8001a64:	69d8      	ldr	r0, [r3, #28]
 8001a66:	4002      	ands	r2, r0
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	61d9      	str	r1, [r3, #28]
 8001a6c:	e7f2      	b.n	8001a54 <HAL_NVIC_SetPriority+0x30>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_SYSTICK_Config+0x28>)
 8001a7a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d80d      	bhi.n	8001a9e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a82:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a88:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8a:	6a03      	ldr	r3, [r0, #32]
 8001a8c:	0609      	lsls	r1, r1, #24
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	430b      	orrs	r3, r1
 8001a94:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a96:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a98:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a9e:	4770      	bx	lr
 8001aa0:	00ffffff 	.word	0x00ffffff
 8001aa4:	e000e010 	.word	0xe000e010
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	680b      	ldr	r3, [r1, #0]
{ 
 8001ab0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8001ab4:	2300      	movs	r3, #0
{ 
 8001ab6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	9a03      	ldr	r2, [sp, #12]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8001abe:	b007      	add	sp, #28
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	9902      	ldr	r1, [sp, #8]
 8001aca:	9a03      	ldr	r2, [sp, #12]
 8001acc:	400a      	ands	r2, r1
 8001ace:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001ad0:	d100      	bne.n	8001ad4 <HAL_GPIO_Init+0x28>
 8001ad2:	e08c      	b.n	8001bee <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	9a01      	ldr	r2, [sp, #4]
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	6852      	ldr	r2, [r2, #4]
 8001ada:	0016      	movs	r6, r2
 8001adc:	438e      	bics	r6, r1
 8001ade:	2e02      	cmp	r6, #2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae2:	2507      	movs	r5, #7
 8001ae4:	401d      	ands	r5, r3
 8001ae6:	00ad      	lsls	r5, r5, #2
 8001ae8:	3901      	subs	r1, #1
 8001aea:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001aec:	08dc      	lsrs	r4, r3, #3
 8001aee:	00a4      	lsls	r4, r4, #2
 8001af0:	1904      	adds	r4, r0, r4
 8001af2:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af4:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af6:	9901      	ldr	r1, [sp, #4]
 8001af8:	6909      	ldr	r1, [r1, #16]
 8001afa:	40a9      	lsls	r1, r5
 8001afc:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001afe:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b00:	2403      	movs	r4, #3
 8001b02:	005f      	lsls	r7, r3, #1
 8001b04:	40bc      	lsls	r4, r7
 8001b06:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001b08:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0a:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b0c:	4025      	ands	r5, r4
 8001b0e:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b10:	2503      	movs	r5, #3
 8001b12:	4015      	ands	r5, r2
 8001b14:	40bd      	lsls	r5, r7
 8001b16:	4661      	mov	r1, ip
 8001b18:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001b1a:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1c:	2e01      	cmp	r6, #1
 8001b1e:	d80f      	bhi.n	8001b40 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b20:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001b22:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b26:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b28:	40bd      	lsls	r5, r7
 8001b2a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001b2c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b2e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b32:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b36:	2101      	movs	r1, #1
 8001b38:	400d      	ands	r5, r1
 8001b3a:	409d      	lsls	r5, r3
 8001b3c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001b3e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001b40:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b42:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b44:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b46:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4c:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001b50:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b52:	420a      	tst	r2, r1
 8001b54:	d04b      	beq.n	8001bee <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2101      	movs	r1, #1
 8001b58:	4c26      	ldr	r4, [pc, #152]	; (8001bf4 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b60:	430d      	orrs	r5, r1
 8001b62:	61a5      	str	r5, [r4, #24]
 8001b64:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b66:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b68:	400c      	ands	r4, r1
 8001b6a:	9405      	str	r4, [sp, #20]
 8001b6c:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6e:	240f      	movs	r4, #15
 8001b70:	4921      	ldr	r1, [pc, #132]	; (8001bf8 <HAL_GPIO_Init+0x14c>)
 8001b72:	00ad      	lsls	r5, r5, #2
 8001b74:	00b6      	lsls	r6, r6, #2
 8001b76:	186d      	adds	r5, r5, r1
 8001b78:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7c:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7e:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b80:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b82:	2400      	movs	r4, #0
 8001b84:	4288      	cmp	r0, r1
 8001b86:	d00c      	beq.n	8001ba2 <HAL_GPIO_Init+0xf6>
 8001b88:	491c      	ldr	r1, [pc, #112]	; (8001bfc <HAL_GPIO_Init+0x150>)
 8001b8a:	3401      	adds	r4, #1
 8001b8c:	4288      	cmp	r0, r1
 8001b8e:	d008      	beq.n	8001ba2 <HAL_GPIO_Init+0xf6>
 8001b90:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_GPIO_Init+0x154>)
 8001b92:	3401      	adds	r4, #1
 8001b94:	4288      	cmp	r0, r1
 8001b96:	d004      	beq.n	8001ba2 <HAL_GPIO_Init+0xf6>
 8001b98:	491a      	ldr	r1, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x158>)
 8001b9a:	3403      	adds	r4, #3
 8001b9c:	4288      	cmp	r0, r1
 8001b9e:	d100      	bne.n	8001ba2 <HAL_GPIO_Init+0xf6>
 8001ba0:	3c02      	subs	r4, #2
 8001ba2:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001ba4:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba6:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001ba8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001baa:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001bac:	4c16      	ldr	r4, [pc, #88]	; (8001c08 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8001bae:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001bb0:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001bb2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	03d1      	lsls	r1, r2, #15
 8001bb6:	d401      	bmi.n	8001bbc <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001bb8:	003e      	movs	r6, r7
 8001bba:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001bbc:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001bbe:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8001bc0:	9e00      	ldr	r6, [sp, #0]
 8001bc2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc4:	0391      	lsls	r1, r2, #14
 8001bc6:	d401      	bmi.n	8001bcc <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8001bc8:	003e      	movs	r6, r7
 8001bca:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001bcc:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001bce:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8001bd0:	9e00      	ldr	r6, [sp, #0]
 8001bd2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	02d1      	lsls	r1, r2, #11
 8001bd6:	d401      	bmi.n	8001bdc <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001bd8:	003e      	movs	r6, r7
 8001bda:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001bdc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001bde:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001be0:	9f00      	ldr	r7, [sp, #0]
 8001be2:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	0292      	lsls	r2, r2, #10
 8001be6:	d401      	bmi.n	8001bec <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001be8:	402e      	ands	r6, r5
 8001bea:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001bec:	60e7      	str	r7, [r4, #12]
    position++;
 8001bee:	3301      	adds	r3, #1
 8001bf0:	e762      	b.n	8001ab8 <HAL_GPIO_Init+0xc>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	6900      	ldr	r0, [r0, #16]
 8001c0e:	4008      	ands	r0, r1
 8001c10:	1e41      	subs	r1, r0, #1
 8001c12:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001c14:	b2c0      	uxtb	r0, r0
  }
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c1e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c20:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001c22:	e7fc      	b.n	8001c1e <HAL_GPIO_WritePin+0x6>

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	0004      	movs	r4, r0
 8001c28:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001c30:	b005      	add	sp, #20
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c34:	6803      	ldr	r3, [r0, #0]
 8001c36:	07db      	lsls	r3, r3, #31
 8001c38:	d42e      	bmi.n	8001c98 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	079b      	lsls	r3, r3, #30
 8001c3e:	d47e      	bmi.n	8001d3e <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	071b      	lsls	r3, r3, #28
 8001c44:	d500      	bpl.n	8001c48 <HAL_RCC_OscConfig+0x24>
 8001c46:	e0ba      	b.n	8001dbe <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	075b      	lsls	r3, r3, #29
 8001c4c:	d500      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x2c>
 8001c4e:	e0dd      	b.n	8001e0c <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	06db      	lsls	r3, r3, #27
 8001c54:	d51a      	bpl.n	8001c8c <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c56:	6962      	ldr	r2, [r4, #20]
 8001c58:	4db4      	ldr	r5, [pc, #720]	; (8001f2c <HAL_RCC_OscConfig+0x308>)
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	2a01      	cmp	r2, #1
 8001c5e:	d000      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3e>
 8001c60:	e149      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c62:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c64:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c66:	430b      	orrs	r3, r1
 8001c68:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001c6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c70:	f7ff fd9c 	bl	80017ac <HAL_GetTick>
 8001c74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001c78:	4233      	tst	r3, r6
 8001c7a:	d100      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5a>
 8001c7c:	e134      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c7e:	21f8      	movs	r1, #248	; 0xf8
 8001c80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001c82:	69a3      	ldr	r3, [r4, #24]
 8001c84:	438a      	bics	r2, r1
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	6a23      	ldr	r3, [r4, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d000      	beq.n	8001c94 <HAL_RCC_OscConfig+0x70>
 8001c92:	e157      	b.n	8001f44 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	e7cb      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c98:	210c      	movs	r1, #12
 8001c9a:	4da4      	ldr	r5, [pc, #656]	; (8001f2c <HAL_RCC_OscConfig+0x308>)
 8001c9c:	686a      	ldr	r2, [r5, #4]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	2a04      	cmp	r2, #4
 8001ca2:	d006      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca4:	686b      	ldr	r3, [r5, #4]
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x9c>
 8001cac:	686b      	ldr	r3, [r5, #4]
 8001cae:	03db      	lsls	r3, r3, #15
 8001cb0:	d506      	bpl.n	8001cc0 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	039b      	lsls	r3, r3, #14
 8001cb6:	d5c0      	bpl.n	8001c3a <HAL_RCC_OscConfig+0x16>
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1bd      	bne.n	8001c3a <HAL_RCC_OscConfig+0x16>
 8001cbe:	e7b6      	b.n	8001c2e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d113      	bne.n	8001cee <HAL_RCC_OscConfig+0xca>
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	682a      	ldr	r2, [r5, #0]
 8001cca:	025b      	lsls	r3, r3, #9
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fd6c 	bl	80017ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001cd6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd8:	02b6      	lsls	r6, r6, #10
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	4233      	tst	r3, r6
 8001cde:	d1ac      	bne.n	8001c3a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fd64 	bl	80017ac <HAL_GetTick>
 8001ce4:	1bc0      	subs	r0, r0, r7
 8001ce6:	2864      	cmp	r0, #100	; 0x64
 8001ce8:	d9f7      	bls.n	8001cda <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
 8001cec:	e7a0      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_OscConfig+0xfa>
 8001cf2:	682b      	ldr	r3, [r5, #0]
 8001cf4:	4a8e      	ldr	r2, [pc, #568]	; (8001f30 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	4a8d      	ldr	r2, [pc, #564]	; (8001f34 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d00:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	4013      	ands	r3, r2
 8001d04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d06:	f7ff fd51 	bl	80017ac <HAL_GetTick>
 8001d0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	4233      	tst	r3, r6
 8001d10:	d093      	beq.n	8001c3a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7ff fd4b 	bl	80017ac <HAL_GetTick>
 8001d16:	1bc0      	subs	r0, r0, r7
 8001d18:	2864      	cmp	r0, #100	; 0x64
 8001d1a:	d9f7      	bls.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d1c:	e7e5      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x10a>
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	682a      	ldr	r2, [r5, #0]
 8001d26:	02db      	lsls	r3, r3, #11
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	e7cb      	b.n	8001cc6 <HAL_RCC_OscConfig+0xa2>
 8001d2e:	682b      	ldr	r3, [r5, #0]
 8001d30:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x30c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x310>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	e7c7      	b.n	8001cce <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d3e:	220c      	movs	r2, #12
 8001d40:	4d7a      	ldr	r5, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x308>)
 8001d42:	686b      	ldr	r3, [r5, #4]
 8001d44:	4213      	tst	r3, r2
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d48:	686b      	ldr	r3, [r5, #4]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x150>
 8001d50:	686b      	ldr	r3, [r5, #4]
 8001d52:	03db      	lsls	r3, r3, #15
 8001d54:	d40e      	bmi.n	8001d74 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	682b      	ldr	r3, [r5, #0]
 8001d58:	079b      	lsls	r3, r3, #30
 8001d5a:	d503      	bpl.n	8001d64 <HAL_RCC_OscConfig+0x140>
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d000      	beq.n	8001d64 <HAL_RCC_OscConfig+0x140>
 8001d62:	e764      	b.n	8001c2e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	21f8      	movs	r1, #248	; 0xf8
 8001d66:	682a      	ldr	r2, [r5, #0]
 8001d68:	6923      	ldr	r3, [r4, #16]
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	602b      	str	r3, [r5, #0]
 8001d72:	e765      	b.n	8001c40 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	68e2      	ldr	r2, [r4, #12]
 8001d76:	2301      	movs	r3, #1
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d00f      	beq.n	8001d9c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4313      	orrs	r3, r2
 8001d82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d84:	f7ff fd12 	bl	80017ac <HAL_GetTick>
 8001d88:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	4233      	tst	r3, r6
 8001d8e:	d1e9      	bne.n	8001d64 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fd0c 	bl	80017ac <HAL_GetTick>
 8001d94:	1bc0      	subs	r0, r0, r7
 8001d96:	2802      	cmp	r0, #2
 8001d98:	d9f7      	bls.n	8001d8a <HAL_RCC_OscConfig+0x166>
 8001d9a:	e7a6      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8001d9c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001da0:	439a      	bics	r2, r3
 8001da2:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001da4:	f7ff fd02 	bl	80017ac <HAL_GetTick>
 8001da8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	4233      	tst	r3, r6
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_OscConfig+0x18e>
 8001db0:	e746      	b.n	8001c40 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff fcfb 	bl	80017ac <HAL_GetTick>
 8001db6:	1bc0      	subs	r0, r0, r7
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d9f6      	bls.n	8001daa <HAL_RCC_OscConfig+0x186>
 8001dbc:	e795      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dbe:	69e2      	ldr	r2, [r4, #28]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4d5a      	ldr	r5, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x308>)
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fcec 	bl	80017ac <HAL_GetTick>
 8001dd4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dd8:	4233      	tst	r3, r6
 8001dda:	d000      	beq.n	8001dde <HAL_RCC_OscConfig+0x1ba>
 8001ddc:	e734      	b.n	8001c48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fce5 	bl	80017ac <HAL_GetTick>
 8001de2:	1bc0      	subs	r0, r0, r7
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f6      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
 8001de8:	e77f      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8001dea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001dee:	439a      	bics	r2, r3
 8001df0:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001df2:	f7ff fcdb 	bl	80017ac <HAL_GetTick>
 8001df6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dfa:	4233      	tst	r3, r6
 8001dfc:	d100      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1dc>
 8001dfe:	e723      	b.n	8001c48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fcd4 	bl	80017ac <HAL_GetTick>
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	2802      	cmp	r0, #2
 8001e08:	d9f6      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1d4>
 8001e0a:	e76e      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e10:	4d46      	ldr	r5, [pc, #280]	; (8001f2c <HAL_RCC_OscConfig+0x308>)
 8001e12:	0552      	lsls	r2, r2, #21
 8001e14:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e18:	4213      	tst	r3, r2
 8001e1a:	d108      	bne.n	8001e2e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	69eb      	ldr	r3, [r5, #28]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61eb      	str	r3, [r5, #28]
 8001e22:	69eb      	ldr	r3, [r5, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	9303      	str	r3, [sp, #12]
 8001e28:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	2780      	movs	r7, #128	; 0x80
 8001e30:	4e41      	ldr	r6, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x314>)
 8001e32:	007f      	lsls	r7, r7, #1
 8001e34:	6833      	ldr	r3, [r6, #0]
 8001e36:	423b      	tst	r3, r7
 8001e38:	d006      	beq.n	8001e48 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d113      	bne.n	8001e68 <HAL_RCC_OscConfig+0x244>
 8001e40:	6a2a      	ldr	r2, [r5, #32]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	622b      	str	r3, [r5, #32]
 8001e46:	e030      	b.n	8001eaa <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e48:	6833      	ldr	r3, [r6, #0]
 8001e4a:	433b      	orrs	r3, r7
 8001e4c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fcad 	bl	80017ac <HAL_GetTick>
 8001e52:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	6833      	ldr	r3, [r6, #0]
 8001e56:	423b      	tst	r3, r7
 8001e58:	d1ef      	bne.n	8001e3a <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7ff fca7 	bl	80017ac <HAL_GetTick>
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	1ac0      	subs	r0, r0, r3
 8001e62:	2864      	cmp	r0, #100	; 0x64
 8001e64:	d9f6      	bls.n	8001e54 <HAL_RCC_OscConfig+0x230>
 8001e66:	e740      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
 8001e68:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d114      	bne.n	8001e98 <HAL_RCC_OscConfig+0x274>
 8001e6e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e72:	4393      	bics	r3, r2
 8001e74:	622b      	str	r3, [r5, #32]
 8001e76:	6a2b      	ldr	r3, [r5, #32]
 8001e78:	3203      	adds	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fc95 	bl	80017ac <HAL_GetTick>
 8001e82:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	6a2b      	ldr	r3, [r5, #32]
 8001e86:	423b      	tst	r3, r7
 8001e88:	d025      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fc8f 	bl	80017ac <HAL_GetTick>
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x318>)
 8001e90:	1b80      	subs	r0, r0, r6
 8001e92:	4298      	cmp	r0, r3
 8001e94:	d9f6      	bls.n	8001e84 <HAL_RCC_OscConfig+0x260>
 8001e96:	e728      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x290>
 8001e9c:	6a29      	ldr	r1, [r5, #32]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	622b      	str	r3, [r5, #32]
 8001ea4:	6a2b      	ldr	r3, [r5, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fc7f 	bl	80017ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001eb0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	e00d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	6a2b      	ldr	r3, [r5, #32]
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	2204      	movs	r2, #4
 8001eba:	622b      	str	r3, [r5, #32]
 8001ebc:	6a2b      	ldr	r3, [r5, #32]
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	e7c0      	b.n	8001e44 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fc73 	bl	80017ac <HAL_GetTick>
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x318>)
 8001ec8:	1b80      	subs	r0, r0, r6
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	d900      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2ac>
 8001ece:	e70c      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	6a2b      	ldr	r3, [r5, #32]
 8001ed2:	423b      	tst	r3, r7
 8001ed4:	d0f5      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8001ed6:	9b00      	ldr	r3, [sp, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d000      	beq.n	8001ede <HAL_RCC_OscConfig+0x2ba>
 8001edc:	e6b8      	b.n	8001c50 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	69eb      	ldr	r3, [r5, #28]
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61eb      	str	r3, [r5, #28]
 8001ee6:	e6b3      	b.n	8001c50 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ee8:	f7ff fc60 	bl	80017ac <HAL_GetTick>
 8001eec:	1bc0      	subs	r0, r0, r7
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	d800      	bhi.n	8001ef4 <HAL_RCC_OscConfig+0x2d0>
 8001ef2:	e6c0      	b.n	8001c76 <HAL_RCC_OscConfig+0x52>
 8001ef4:	e6f9      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ef6:	3205      	adds	r2, #5
 8001ef8:	d103      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001efa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001efc:	439a      	bics	r2, r3
 8001efe:	636a      	str	r2, [r5, #52]	; 0x34
 8001f00:	e6bd      	b.n	8001c7e <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f02:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f04:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f06:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001f08:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f0a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001f0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f0e:	4393      	bics	r3, r2
 8001f10:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001f12:	f7ff fc4b 	bl	80017ac <HAL_GetTick>
 8001f16:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f1a:	4233      	tst	r3, r6
 8001f1c:	d100      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2fc>
 8001f1e:	e6b5      	b.n	8001c8c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f20:	f7ff fc44 	bl	80017ac <HAL_GetTick>
 8001f24:	1bc0      	subs	r0, r0, r7
 8001f26:	2802      	cmp	r0, #2
 8001f28:	d9f6      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f4>
 8001f2a:	e6de      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	fffeffff 	.word	0xfffeffff
 8001f34:	fffbffff 	.word	0xfffbffff
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	200c      	movs	r0, #12
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <HAL_RCC_OscConfig+0x3f8>)
 8001f48:	6851      	ldr	r1, [r2, #4]
 8001f4a:	0015      	movs	r5, r2
 8001f4c:	4001      	ands	r1, r0
 8001f4e:	2908      	cmp	r1, #8
 8001f50:	d047      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3be>
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d132      	bne.n	8001fbe <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8001f58:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc24 	bl	80017ac <HAL_GetTick>
 8001f64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	04b6      	lsls	r6, r6, #18
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	4233      	tst	r3, r6
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6e:	220f      	movs	r2, #15
 8001f70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f72:	4393      	bics	r3, r2
 8001f74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f76:	4313      	orrs	r3, r2
 8001f78:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001f7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f7e:	686a      	ldr	r2, [r5, #4]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	4928      	ldr	r1, [pc, #160]	; (8002024 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f86:	400a      	ands	r2, r1
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	682a      	ldr	r2, [r5, #0]
 8001f90:	045b      	lsls	r3, r3, #17
 8001f92:	4313      	orrs	r3, r2
 8001f94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc09 	bl	80017ac <HAL_GetTick>
 8001f9a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	04a4      	lsls	r4, r4, #18
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	4223      	tst	r3, r4
 8001fa2:	d000      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x382>
 8001fa4:	e676      	b.n	8001c94 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fc01 	bl	80017ac <HAL_GetTick>
 8001faa:	1b80      	subs	r0, r0, r6
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCC_OscConfig+0x37a>
 8001fb0:	e69b      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fbfb 	bl	80017ac <HAL_GetTick>
 8001fb6:	1bc0      	subs	r0, r0, r7
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d9d5      	bls.n	8001f68 <HAL_RCC_OscConfig+0x344>
 8001fbc:	e695      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fbf1 	bl	80017ac <HAL_GetTick>
 8001fca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	04a4      	lsls	r4, r4, #18
 8001fce:	682b      	ldr	r3, [r5, #0]
 8001fd0:	4223      	tst	r3, r4
 8001fd2:	d100      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3b2>
 8001fd4:	e65e      	b.n	8001c94 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fbe9 	bl	80017ac <HAL_GetTick>
 8001fda:	1b80      	subs	r0, r0, r6
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	d9f6      	bls.n	8001fce <HAL_RCC_OscConfig+0x3aa>
 8001fe0:	e683      	b.n	8001cea <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8001fe2:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x3c6>
 8001fe8:	e622      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001fec:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001ff0:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001ff2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff4:	4019      	ands	r1, r3
        return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff8:	42a9      	cmp	r1, r5
 8001ffa:	d000      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3da>
 8001ffc:	e618      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ffe:	210f      	movs	r1, #15
 8002000:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002004:	428a      	cmp	r2, r1
 8002006:	d000      	beq.n	800200a <HAL_RCC_OscConfig+0x3e6>
 8002008:	e612      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800200a:	20f0      	movs	r0, #240	; 0xf0
 800200c:	0380      	lsls	r0, r0, #14
 800200e:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002010:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002012:	1a1b      	subs	r3, r3, r0
 8002014:	1e58      	subs	r0, r3, #1
 8002016:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8002018:	b2d8      	uxtb	r0, r3
 800201a:	e609      	b.n	8001c30 <HAL_RCC_OscConfig+0xc>
 800201c:	40021000 	.word	0x40021000
 8002020:	feffffff 	.word	0xfeffffff
 8002024:	ffc2ffff 	.word	0xffc2ffff

08002028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800202a:	4c14      	ldr	r4, [pc, #80]	; (800207c <HAL_RCC_GetSysClockFreq+0x54>)
{
 800202c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800202e:	2210      	movs	r2, #16
 8002030:	0021      	movs	r1, r4
 8002032:	4668      	mov	r0, sp
 8002034:	f000 f8ee 	bl	8002214 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002038:	0021      	movs	r1, r4
 800203a:	ad04      	add	r5, sp, #16
 800203c:	2210      	movs	r2, #16
 800203e:	3110      	adds	r1, #16
 8002040:	0028      	movs	r0, r5
 8002042:	f000 f8e7 	bl	8002214 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002046:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002048:	4e0d      	ldr	r6, [pc, #52]	; (8002080 <HAL_RCC_GetSysClockFreq+0x58>)
 800204a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800204c:	401a      	ands	r2, r3
 800204e:	2a08      	cmp	r2, #8
 8002050:	d111      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002052:	200f      	movs	r0, #15
 8002054:	466a      	mov	r2, sp
 8002056:	0c99      	lsrs	r1, r3, #18
 8002058:	4001      	ands	r1, r0
 800205a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800205c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800205e:	4002      	ands	r2, r0
 8002060:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002062:	03db      	lsls	r3, r3, #15
 8002064:	d505      	bpl.n	8002072 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002068:	f7fe f858 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800206c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800206e:	b008      	add	sp, #32
 8002070:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_RCC_GetSysClockFreq+0x60>)
 8002074:	e7fa      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002078:	e7f9      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x46>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	080022b4 	.word	0x080022b4
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	003d0900 	.word	0x003d0900

0800208c <HAL_RCC_ClockConfig>:
{
 800208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208e:	0005      	movs	r5, r0
 8002090:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8002092:	2800      	cmp	r0, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002096:	2001      	movs	r0, #1
}
 8002098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209a:	2201      	movs	r2, #1
 800209c:	4c37      	ldr	r4, [pc, #220]	; (800217c <HAL_RCC_ClockConfig+0xf0>)
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	4013      	ands	r3, r2
 80020a2:	428b      	cmp	r3, r1
 80020a4:	d31c      	bcc.n	80020e0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a6:	6829      	ldr	r1, [r5, #0]
 80020a8:	078b      	lsls	r3, r1, #30
 80020aa:	d422      	bmi.n	80020f2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ac:	07cb      	lsls	r3, r1, #31
 80020ae:	d42f      	bmi.n	8002110 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	2301      	movs	r3, #1
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	401a      	ands	r2, r3
 80020b6:	42ba      	cmp	r2, r7
 80020b8:	d851      	bhi.n	800215e <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ba:	682b      	ldr	r3, [r5, #0]
 80020bc:	4c30      	ldr	r4, [pc, #192]	; (8002180 <HAL_RCC_ClockConfig+0xf4>)
 80020be:	075b      	lsls	r3, r3, #29
 80020c0:	d454      	bmi.n	800216c <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020c2:	f7ff ffb1 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <HAL_RCC_ClockConfig+0xf8>)
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	0f1b      	lsrs	r3, r3, #28
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_ClockConfig+0xfc>)
 80020d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fb28 	bl	800172c <HAL_InitTick>
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
 80020de:	e7db      	b.n	8002098 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	4393      	bics	r3, r2
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	4013      	ands	r3, r2
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d1d2      	bne.n	8002096 <HAL_RCC_ClockConfig+0xa>
 80020f0:	e7d9      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1a>
 80020f2:	4a23      	ldr	r2, [pc, #140]	; (8002180 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	074b      	lsls	r3, r1, #29
 80020f6:	d504      	bpl.n	8002102 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020f8:	23e0      	movs	r3, #224	; 0xe0
 80020fa:	6850      	ldr	r0, [r2, #4]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4303      	orrs	r3, r0
 8002100:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002102:	20f0      	movs	r0, #240	; 0xf0
 8002104:	6853      	ldr	r3, [r2, #4]
 8002106:	4383      	bics	r3, r0
 8002108:	68a8      	ldr	r0, [r5, #8]
 800210a:	4303      	orrs	r3, r0
 800210c:	6053      	str	r3, [r2, #4]
 800210e:	e7cd      	b.n	80020ac <HAL_RCC_ClockConfig+0x20>
 8002110:	4e1b      	ldr	r6, [pc, #108]	; (8002180 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002114:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	2a01      	cmp	r2, #1
 8002118:	d119      	bne.n	800214e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	039b      	lsls	r3, r3, #14
 800211c:	d5bb      	bpl.n	8002096 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	2103      	movs	r1, #3
 8002120:	6873      	ldr	r3, [r6, #4]
 8002122:	438b      	bics	r3, r1
 8002124:	4313      	orrs	r3, r2
 8002126:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002128:	f7ff fb40 	bl	80017ac <HAL_GetTick>
 800212c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	230c      	movs	r3, #12
 8002130:	6872      	ldr	r2, [r6, #4]
 8002132:	401a      	ands	r2, r3
 8002134:	686b      	ldr	r3, [r5, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d0b9      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7ff fb36 	bl	80017ac <HAL_GetTick>
 8002140:	9b01      	ldr	r3, [sp, #4]
 8002142:	1ac0      	subs	r0, r0, r3
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_ClockConfig+0x100>)
 8002146:	4298      	cmp	r0, r3
 8002148:	d9f1      	bls.n	800212e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800214a:	2003      	movs	r0, #3
 800214c:	e7a4      	b.n	8002098 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	2a02      	cmp	r2, #2
 8002150:	d102      	bne.n	8002158 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	d4e3      	bmi.n	800211e <HAL_RCC_ClockConfig+0x92>
 8002156:	e79e      	b.n	8002096 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	079b      	lsls	r3, r3, #30
 800215a:	d4e0      	bmi.n	800211e <HAL_RCC_ClockConfig+0x92>
 800215c:	e79b      	b.n	8002096 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	439a      	bics	r2, r3
 8002162:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	6822      	ldr	r2, [r4, #0]
 8002166:	421a      	tst	r2, r3
 8002168:	d0a7      	beq.n	80020ba <HAL_RCC_ClockConfig+0x2e>
 800216a:	e794      	b.n	8002096 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCC_ClockConfig+0x104>)
 8002170:	4013      	ands	r3, r2
 8002172:	68ea      	ldr	r2, [r5, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	6063      	str	r3, [r4, #4]
 8002178:	e7a3      	b.n	80020c2 <HAL_RCC_ClockConfig+0x36>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40022000 	.word	0x40022000
 8002180:	40021000 	.word	0x40021000
 8002184:	08003839 	.word	0x08003839
 8002188:	20000024 	.word	0x20000024
 800218c:	00001388 	.word	0x00001388
 8002190:	fffff8ff 	.word	0xfffff8ff

08002194 <__libc_init_array>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	2600      	movs	r6, #0
 8002198:	4d0c      	ldr	r5, [pc, #48]	; (80021cc <__libc_init_array+0x38>)
 800219a:	4c0d      	ldr	r4, [pc, #52]	; (80021d0 <__libc_init_array+0x3c>)
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	42a6      	cmp	r6, r4
 80021a2:	d109      	bne.n	80021b8 <__libc_init_array+0x24>
 80021a4:	2600      	movs	r6, #0
 80021a6:	f000 f879 	bl	800229c <_init>
 80021aa:	4d0a      	ldr	r5, [pc, #40]	; (80021d4 <__libc_init_array+0x40>)
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <__libc_init_array+0x44>)
 80021ae:	1b64      	subs	r4, r4, r5
 80021b0:	10a4      	asrs	r4, r4, #2
 80021b2:	42a6      	cmp	r6, r4
 80021b4:	d105      	bne.n	80021c2 <__libc_init_array+0x2e>
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	00b3      	lsls	r3, r6, #2
 80021ba:	58eb      	ldr	r3, [r5, r3]
 80021bc:	4798      	blx	r3
 80021be:	3601      	adds	r6, #1
 80021c0:	e7ee      	b.n	80021a0 <__libc_init_array+0xc>
 80021c2:	00b3      	lsls	r3, r6, #2
 80021c4:	58eb      	ldr	r3, [r5, r3]
 80021c6:	4798      	blx	r3
 80021c8:	3601      	adds	r6, #1
 80021ca:	e7f2      	b.n	80021b2 <__libc_init_array+0x1e>
 80021cc:	08003870 	.word	0x08003870
 80021d0:	08003870 	.word	0x08003870
 80021d4:	08003870 	.word	0x08003870
 80021d8:	08003874 	.word	0x08003874

080021dc <__itoa>:
 80021dc:	1e93      	subs	r3, r2, #2
 80021de:	b510      	push	{r4, lr}
 80021e0:	000c      	movs	r4, r1
 80021e2:	2b22      	cmp	r3, #34	; 0x22
 80021e4:	d904      	bls.n	80021f0 <__itoa+0x14>
 80021e6:	2300      	movs	r3, #0
 80021e8:	001c      	movs	r4, r3
 80021ea:	700b      	strb	r3, [r1, #0]
 80021ec:	0020      	movs	r0, r4
 80021ee:	bd10      	pop	{r4, pc}
 80021f0:	2a0a      	cmp	r2, #10
 80021f2:	d109      	bne.n	8002208 <__itoa+0x2c>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	da07      	bge.n	8002208 <__itoa+0x2c>
 80021f8:	232d      	movs	r3, #45	; 0x2d
 80021fa:	700b      	strb	r3, [r1, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	4240      	negs	r0, r0
 8002200:	1861      	adds	r1, r4, r1
 8002202:	f000 f819 	bl	8002238 <__utoa>
 8002206:	e7f1      	b.n	80021ec <__itoa+0x10>
 8002208:	2100      	movs	r1, #0
 800220a:	e7f9      	b.n	8002200 <__itoa+0x24>

0800220c <itoa>:
 800220c:	b510      	push	{r4, lr}
 800220e:	f7ff ffe5 	bl	80021dc <__itoa>
 8002212:	bd10      	pop	{r4, pc}

08002214 <memcpy>:
 8002214:	2300      	movs	r3, #0
 8002216:	b510      	push	{r4, lr}
 8002218:	429a      	cmp	r2, r3
 800221a:	d100      	bne.n	800221e <memcpy+0xa>
 800221c:	bd10      	pop	{r4, pc}
 800221e:	5ccc      	ldrb	r4, [r1, r3]
 8002220:	54c4      	strb	r4, [r0, r3]
 8002222:	3301      	adds	r3, #1
 8002224:	e7f8      	b.n	8002218 <memcpy+0x4>

08002226 <memset>:
 8002226:	0003      	movs	r3, r0
 8002228:	1812      	adds	r2, r2, r0
 800222a:	4293      	cmp	r3, r2
 800222c:	d100      	bne.n	8002230 <memset+0xa>
 800222e:	4770      	bx	lr
 8002230:	7019      	strb	r1, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	e7f9      	b.n	800222a <memset+0x4>
	...

08002238 <__utoa>:
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223a:	0017      	movs	r7, r2
 800223c:	b08d      	sub	sp, #52	; 0x34
 800223e:	2225      	movs	r2, #37	; 0x25
 8002240:	0006      	movs	r6, r0
 8002242:	000d      	movs	r5, r1
 8002244:	a802      	add	r0, sp, #8
 8002246:	4914      	ldr	r1, [pc, #80]	; (8002298 <__utoa+0x60>)
 8002248:	f7ff ffe4 	bl	8002214 <memcpy>
 800224c:	aa02      	add	r2, sp, #8
 800224e:	1ebb      	subs	r3, r7, #2
 8002250:	2400      	movs	r4, #0
 8002252:	9201      	str	r2, [sp, #4]
 8002254:	2b22      	cmp	r3, #34	; 0x22
 8002256:	d905      	bls.n	8002264 <__utoa+0x2c>
 8002258:	702c      	strb	r4, [r5, #0]
 800225a:	0025      	movs	r5, r4
 800225c:	0028      	movs	r0, r5
 800225e:	b00d      	add	sp, #52	; 0x34
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	0014      	movs	r4, r2
 8002264:	0030      	movs	r0, r6
 8002266:	0039      	movs	r1, r7
 8002268:	f7fd ffde 	bl	8000228 <__aeabi_uidivmod>
 800226c:	4684      	mov	ip, r0
 800226e:	9801      	ldr	r0, [sp, #4]
 8002270:	1c62      	adds	r2, r4, #1
 8002272:	18ab      	adds	r3, r5, r2
 8002274:	5c41      	ldrb	r1, [r0, r1]
 8002276:	1e5e      	subs	r6, r3, #1
 8002278:	7031      	strb	r1, [r6, #0]
 800227a:	4666      	mov	r6, ip
 800227c:	2e00      	cmp	r6, #0
 800227e:	d1f0      	bne.n	8002262 <__utoa+0x2a>
 8002280:	701e      	strb	r6, [r3, #0]
 8002282:	002b      	movs	r3, r5
 8002284:	1b5a      	subs	r2, r3, r5
 8002286:	4294      	cmp	r4, r2
 8002288:	dde8      	ble.n	800225c <__utoa+0x24>
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	5d29      	ldrb	r1, [r5, r4]
 800228e:	7019      	strb	r1, [r3, #0]
 8002290:	552a      	strb	r2, [r5, r4]
 8002292:	3301      	adds	r3, #1
 8002294:	3c01      	subs	r4, #1
 8002296:	e7f5      	b.n	8002284 <__utoa+0x4c>
 8002298:	08003849 	.word	0x08003849

0800229c <_init>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr

080022a8 <_fini>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr
