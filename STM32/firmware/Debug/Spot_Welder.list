
Spot_Welder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001620  08002890  08002890  00012890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000002c  08003ee4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08003ee4  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d329  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b61  00000000  00000000  0002d37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002eb2  00000000  00000000  0002fede  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000808  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000008f0  00000000  00000000  00033598  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d14d  00000000  00000000  00033e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a611  00000000  00000000  00040fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00041fd6  00000000  00000000  0004b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008d5bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000141c  00000000  00000000  0008d638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002878 	.word	0x08002878

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08002878 	.word	0x08002878

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	a801      	add	r0, sp, #4
 800023c:	f002 fae1 	bl	8002802 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8000242:	4c16      	ldr	r4, [pc, #88]	; (800029c <MX_ADC_Init+0x68>)
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_ADC_Init+0x6c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000246:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000248:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 800024a:	2208      	movs	r2, #8
  hadc.Instance = ADC1;
 800024c:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000252:	60a2      	str	r2, [r4, #8]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	61e1      	str	r1, [r4, #28]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000256:	3a07      	subs	r2, #7
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000258:	1d61      	adds	r1, r4, #5
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800025a:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025c:	6063      	str	r3, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000262:	7623      	strb	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000264:	7663      	strb	r3, [r4, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000266:	76a2      	strb	r2, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	76e3      	strb	r3, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800026a:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026c:	77cb      	strb	r3, [r1, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000270:	f001 fd14 	bl	8001c9c <HAL_ADC_Init>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8000278:	f000 f9f6 	bl	8000668 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027c:	2280      	movs	r2, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 800027e:	2305      	movs	r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000280:	0152      	lsls	r2, r2, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000282:	a901      	add	r1, sp, #4
 8000284:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000286:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000288:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800028a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028c:	f001 fe3a 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC_Init+0x64>
  {
    Error_Handler();
 8000294:	f000 f9e8 	bl	8000668 <Error_Handler>
  }

}
 8000298:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000484 	.word	0x20000484
 80002a0:	40012400 	.word	0x40012400

080002a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	0004      	movs	r4, r0
 80002a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	2214      	movs	r2, #20
 80002ac:	2100      	movs	r1, #0
 80002ae:	a803      	add	r0, sp, #12
 80002b0:	f002 faa7 	bl	8002802 <memset>
  if(adcHandle->Instance==ADC1)
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <HAL_ADC_MspInit+0x54>)
 80002b6:	6822      	ldr	r2, [r4, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d11b      	bne.n	80002f4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <HAL_ADC_MspInit+0x58>)
 80002c0:	0080      	lsls	r0, r0, #2
 80002c2:	6999      	ldr	r1, [r3, #24]
 80002c4:	4301      	orrs	r1, r0
 80002c6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ca:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ce:	4002      	ands	r2, r0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	695a      	ldr	r2, [r3, #20]
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002d6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002de:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	400b      	ands	r3, r1
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002e6:	2320      	movs	r3, #32
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 80002ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	3b1d      	subs	r3, #29
 80002ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f001 feca 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002f4:	b008      	add	sp, #32
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	40012400 	.word	0x40012400
 80002fc:	40021000 	.word	0x40021000

08000300 <AT24CXX_Write_Byte>:
    {
    //Soft_I2C_Init(Soft_I2C1);
    }

uint8_t AT24CXX_Write_Byte(uint16_t register_address, uint8_t data)
    {
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000302:	4c16      	ldr	r4, [pc, #88]	; (800035c <AT24CXX_Write_Byte+0x5c>)
    {
 8000304:	0006      	movs	r6, r0
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000306:	0020      	movs	r0, r4
    {
 8000308:	000f      	movs	r7, r1
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 800030a:	f001 f87c 	bl	8001406 <Soft_I2C_Start>
 800030e:	0005      	movs	r5, r0
 8000310:	2801      	cmp	r0, #1
 8000312:	d104      	bne.n	800031e <AT24CXX_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000314:	0020      	movs	r0, r4
 8000316:	f001 f885 	bl	8001424 <Soft_I2C_Stop>
    Soft_I2C_Stop(&AT24C_I2C_Handle);

    //HAL_Delay(AT24CXX_WRITE_DELAY);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */

    return AT24CXX_OK;
    }
 800031a:	0028      	movs	r0, r5
 800031c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, AT24CXX_EEPROM_ADDR + 0) == SOFT_I2C_ERR)/*Send device address + write bit */
 800031e:	21a0      	movs	r1, #160	; 0xa0
 8000320:	0020      	movs	r0, r4
 8000322:	f001 f8d1 	bl	80014c8 <Soft_I2C_Send_Byte>
 8000326:	2801      	cmp	r0, #1
 8000328:	d101      	bne.n	800032e <AT24CXX_Write_Byte+0x2e>
	return AT24CXX_ERR;
 800032a:	2501      	movs	r5, #1
 800032c:	e7f5      	b.n	800031a <AT24CXX_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (register_address >> 8)) == SOFT_I2C_ERR)
 800032e:	0a31      	lsrs	r1, r6, #8
 8000330:	0020      	movs	r0, r4
 8000332:	f001 f8c9 	bl	80014c8 <Soft_I2C_Send_Byte>
 8000336:	2801      	cmp	r0, #1
 8000338:	d0f7      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, register_address) == SOFT_I2C_ERR)/*send register address to write*/
 800033a:	b2f1      	uxtb	r1, r6
 800033c:	0020      	movs	r0, r4
 800033e:	f001 f8c3 	bl	80014c8 <Soft_I2C_Send_Byte>
 8000342:	2801      	cmp	r0, #1
 8000344:	d0f1      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, data) == SOFT_I2C_ERR)
 8000346:	0039      	movs	r1, r7
 8000348:	0020      	movs	r0, r4
 800034a:	f001 f8bd 	bl	80014c8 <Soft_I2C_Send_Byte>
 800034e:	2801      	cmp	r0, #1
 8000350:	d0eb      	beq.n	800032a <AT24CXX_Write_Byte+0x2a>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000352:	0020      	movs	r0, r4
 8000354:	f001 f866 	bl	8001424 <Soft_I2C_Stop>
    return AT24CXX_OK;
 8000358:	2500      	movs	r5, #0
 800035a:	e7de      	b.n	800031a <AT24CXX_Write_Byte+0x1a>
 800035c:	2000050c 	.word	0x2000050c

08000360 <AT24CXX_Read_Buffer>:

    return AT24CXX_OK;
    }

uint8_t AT24CXX_Read_Buffer(uint16_t start_address, uint8_t *buf, uint16_t len)
    {
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000362:	4c21      	ldr	r4, [pc, #132]	; (80003e8 <AT24CXX_Read_Buffer+0x88>)
    {
 8000364:	0007      	movs	r7, r0
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000366:	0020      	movs	r0, r4
    {
 8000368:	000e      	movs	r6, r1
 800036a:	0015      	movs	r5, r2
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 800036c:	f001 f84b 	bl	8001406 <Soft_I2C_Start>
 8000370:	2801      	cmp	r0, #1
 8000372:	d104      	bne.n	800037e <AT24CXX_Read_Buffer+0x1e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000374:	0020      	movs	r0, r4
 8000376:	f001 f855 	bl	8001424 <Soft_I2C_Stop>
	return AT24CXX_ERR;
	}

    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
	{
	return AT24CXX_ERR;
 800037a:	2001      	movs	r0, #1

    Soft_I2C_Stop(&AT24C_I2C_Handle);

    return AT24CXX_OK;

    }
 800037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 800037e:	21a0      	movs	r1, #160	; 0xa0
 8000380:	0020      	movs	r0, r4
 8000382:	f001 f8a1 	bl	80014c8 <Soft_I2C_Send_Byte>
 8000386:	2801      	cmp	r0, #1
 8000388:	d0f7      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (start_address >> 8)) == SOFT_I2C_ERR)
 800038a:	0a39      	lsrs	r1, r7, #8
 800038c:	0020      	movs	r0, r4
 800038e:	f001 f89b 	bl	80014c8 <Soft_I2C_Send_Byte>
 8000392:	2801      	cmp	r0, #1
 8000394:	d0f1      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000396:	b2f9      	uxtb	r1, r7
 8000398:	0020      	movs	r0, r4
 800039a:	f001 f895 	bl	80014c8 <Soft_I2C_Send_Byte>
 800039e:	2801      	cmp	r0, #1
 80003a0:	d0eb      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR) //repeated start
 80003a2:	0020      	movs	r0, r4
 80003a4:	f001 f82f 	bl	8001406 <Soft_I2C_Start>
 80003a8:	2801      	cmp	r0, #1
 80003aa:	d0e3      	beq.n	8000374 <AT24CXX_Read_Buffer+0x14>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 1)) == SOFT_I2C_ERR) //read bit
 80003ac:	21a1      	movs	r1, #161	; 0xa1
 80003ae:	0020      	movs	r0, r4
 80003b0:	f001 f88a 	bl	80014c8 <Soft_I2C_Send_Byte>
 80003b4:	2801      	cmp	r0, #1
 80003b6:	d0e0      	beq.n	800037a <AT24CXX_Read_Buffer+0x1a>
    while (len--)
 80003b8:	1e6f      	subs	r7, r5, #1
 80003ba:	b2bf      	uxth	r7, r7
	*buf++ = Soft_I2C_Receive_Byte(&AT24C_I2C_Handle);
 80003bc:	0020      	movs	r0, r4
    while (len--)
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d103      	bne.n	80003ca <AT24CXX_Read_Buffer+0x6a>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 80003c2:	f001 f82f 	bl	8001424 <Soft_I2C_Stop>
    return AT24CXX_OK;
 80003c6:	0028      	movs	r0, r5
 80003c8:	e7d8      	b.n	800037c <AT24CXX_Read_Buffer+0x1c>
	*buf++ = Soft_I2C_Receive_Byte(&AT24C_I2C_Handle);
 80003ca:	f001 f8a3 	bl	8001514 <Soft_I2C_Receive_Byte>
 80003ce:	7030      	strb	r0, [r6, #0]
	    Soft_I2C_NACK(&AT24C_I2C_Handle);
 80003d0:	0020      	movs	r0, r4
	if (len == 0)
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d104      	bne.n	80003e0 <AT24CXX_Read_Buffer+0x80>
	    Soft_I2C_NACK(&AT24C_I2C_Handle);
 80003d6:	f001 f867 	bl	80014a8 <Soft_I2C_NACK>
 80003da:	3601      	adds	r6, #1
    {
 80003dc:	003d      	movs	r5, r7
 80003de:	e7eb      	b.n	80003b8 <AT24CXX_Read_Buffer+0x58>
	    Soft_I2C_ACK(&AT24C_I2C_Handle);
 80003e0:	f001 f852 	bl	8001488 <Soft_I2C_ACK>
 80003e4:	e7f9      	b.n	80003da <AT24CXX_Read_Buffer+0x7a>
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	2000050c 	.word	0x2000050c

080003ec <Button_Attach>:
static Button_Struct_t *Button_Struct_PTR_Array[MAX_BUTTONS];

static uint8_t Attached_Buttons = 0;

uint8_t Button_Attach(Button_Struct_t *Button_Struct_PTR)
    {
 80003ec:	b530      	push	{r4, r5, lr}

    //init GPIOs as input
    if (Attached_Buttons < MAX_BUTTONS)
 80003ee:	4d11      	ldr	r5, [pc, #68]	; (8000434 <Button_Attach+0x48>)
    {
 80003f0:	0004      	movs	r4, r0
    if (Attached_Buttons < MAX_BUTTONS)
 80003f2:	782b      	ldrb	r3, [r5, #0]
    {
 80003f4:	b087      	sub	sp, #28

	}
    else
	{
	//error
	return (255); //return error
 80003f6:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Buttons < MAX_BUTTONS)
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d817      	bhi.n	800042c <Button_Attach+0x40>
	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 80003fc:	8823      	ldrh	r3, [r4, #0]
 80003fe:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	9302      	str	r3, [sp, #8]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 8000404:	7a23      	ldrb	r3, [r4, #8]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d112      	bne.n	8000430 <Button_Attach+0x44>
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040a:	3301      	adds	r3, #1
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 800040c:	6860      	ldr	r0, [r4, #4]
 800040e:	a901      	add	r1, sp, #4
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000410:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000412:	f001 fe39 	bl	8002088 <HAL_GPIO_Init>
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000416:	2300      	movs	r3, #0
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000418:	7828      	ldrb	r0, [r5, #0]
	Button_Struct_PTR->Button_Clicked_Count = 0;
 800041a:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 800041c:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 800041e:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 8000420:	6123      	str	r3, [r4, #16]
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <Button_Attach+0x4c>)
 8000424:	0082      	lsls	r2, r0, #2
 8000426:	50d4      	str	r4, [r2, r3]
	Attached_Buttons++;
 8000428:	1c43      	adds	r3, r0, #1
 800042a:	702b      	strb	r3, [r5, #0]
	}

    }
 800042c:	b007      	add	sp, #28
 800042e:	bd30      	pop	{r4, r5, pc}
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000430:	2302      	movs	r3, #2
 8000432:	e7eb      	b.n	800040c <Button_Attach+0x20>
 8000434:	20000048 	.word	0x20000048
 8000438:	20000050 	.word	0x20000050

0800043c <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
    {
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    static volatile uint32_t Button_Scan_Time_Stamp = 0;
    Button_Struct_t *PTR = NULL;

    if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 800043e:	f001 fbc9 	bl	8001bd4 <HAL_GetTick>
 8000442:	4c2d      	ldr	r4, [pc, #180]	; (80004f8 <Button_Scan+0xbc>)
 8000444:	6823      	ldr	r3, [r4, #0]
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	2809      	cmp	r0, #9
 800044a:	d909      	bls.n	8000460 <Button_Scan+0x24>
	{
	Button_Scan_Time_Stamp = HAL_GetTick();
 800044c:	f001 fbc2 	bl	8001bd4 <HAL_GetTick>

		    }
		else if (PTR->Button_Event != Button_Long_Pressed)
		    {   //long pressed detected
		    PTR->Button_Event = Button_Long_Pressed;
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000450:	2701      	movs	r7, #1
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000452:	2500      	movs	r5, #0
	Button_Scan_Time_Stamp = HAL_GetTick();
 8000454:	6020      	str	r0, [r4, #0]
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000456:	427f      	negs	r7, r7
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000458:	4b28      	ldr	r3, [pc, #160]	; (80004fc <Button_Scan+0xc0>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	42ab      	cmp	r3, r5
 800045e:	d800      	bhi.n	8000462 <Button_Scan+0x26>
			}
		    }
		}
	    }
	}
    }
 8000460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    PTR = Button_Struct_PTR_Array[Index];
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <Button_Scan+0xc4>)
 8000464:	00aa      	lsls	r2, r5, #2
 8000466:	58d4      	ldr	r4, [r2, r3]
	    if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port, PTR->Button_Pin)
 8000468:	8821      	ldrh	r1, [r4, #0]
 800046a:	6860      	ldr	r0, [r4, #4]
 800046c:	f001 febc 	bl	80021e8 <HAL_GPIO_ReadPin>
 8000470:	7a22      	ldrb	r2, [r4, #8]
 8000472:	68e3      	ldr	r3, [r4, #12]
 8000474:	4282      	cmp	r2, r0
 8000476:	d11d      	bne.n	80004b4 <Button_Scan+0x78>
		PTR->Button_Pressed_Ticks++;	//
 8000478:	3301      	adds	r3, #1
 800047a:	60e3      	str	r3, [r4, #12]
		if (PTR->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_DELAY)
 800047c:	2b63      	cmp	r3, #99	; 0x63
 800047e:	d80b      	bhi.n	8000498 <Button_Scan+0x5c>
		    if (PTR->Button_Released_Ticks //repressed detected
 8000480:	6923      	ldr	r3, [r4, #16]
 8000482:	2b0e      	cmp	r3, #14
 8000484:	d806      	bhi.n	8000494 <Button_Scan+0x58>
			PTR->Button_Event = Button_Repressed;
 8000486:	2302      	movs	r3, #2
			PTR->Button_Event = Button_Pressed;
 8000488:	7263      	strb	r3, [r4, #9]
		    PTR->Button_Released_Ticks = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	6123      	str	r3, [r4, #16]
	for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 800048e:	3501      	adds	r5, #1
 8000490:	b2ed      	uxtb	r5, r5
 8000492:	e7e1      	b.n	8000458 <Button_Scan+0x1c>
			PTR->Button_Event = Button_Pressed;
 8000494:	2301      	movs	r3, #1
 8000496:	e7f7      	b.n	8000488 <Button_Scan+0x4c>
		else if (PTR->Button_Event != Button_Long_Pressed)
 8000498:	7a63      	ldrb	r3, [r4, #9]
 800049a:	2b03      	cmp	r3, #3
 800049c:	d0f7      	beq.n	800048e <Button_Scan+0x52>
		    PTR->Button_Event = Button_Long_Pressed;
 800049e:	2303      	movs	r3, #3
 80004a0:	7263      	strb	r3, [r4, #9]
		    if (PTR->Callback != NULL)
 80004a2:	69a3      	ldr	r3, [r4, #24]
		    PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 80004a4:	82a7      	strh	r7, [r4, #20]
		    if (PTR->Callback != NULL)
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f1      	beq.n	800048e <Button_Scan+0x52>
			PTR->Callback(PTR->Button_Clicked_Count);
 80004aa:	20ff      	movs	r0, #255	; 0xff
 80004ac:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	7523      	strb	r3, [r4, #20]
 80004b2:	e7ec      	b.n	800048e <Button_Scan+0x52>
		PTR->Button_Released_Ticks++;
 80004b4:	6922      	ldr	r2, [r4, #16]
 80004b6:	3201      	adds	r2, #1
 80004b8:	6122      	str	r2, [r4, #16]
		if (PTR->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 80004ba:	2b05      	cmp	r3, #5
 80004bc:	d907      	bls.n	80004ce <Button_Scan+0x92>
		    PTR->Button_Pressed_Ticks = 0;
 80004be:	2100      	movs	r1, #0
		    if (PTR->Button_Event == Button_Repressed)
 80004c0:	7a63      	ldrb	r3, [r4, #9]
		    PTR->Button_Pressed_Ticks = 0;
 80004c2:	60e1      	str	r1, [r4, #12]
		    if (PTR->Button_Event == Button_Repressed)
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d111      	bne.n	80004ec <Button_Scan+0xb0>
			PTR->Button_Clicked_Count++;
 80004c8:	7d23      	ldrb	r3, [r4, #20]
 80004ca:	3301      	adds	r3, #1
			PTR->Button_Clicked_Count = 1;
 80004cc:	7523      	strb	r3, [r4, #20]
		if (PTR->Button_Released_Ticks > BUTTON_CLICKED_DELAY)
 80004ce:	2a19      	cmp	r2, #25
 80004d0:	d9dd      	bls.n	800048e <Button_Scan+0x52>
		    if (PTR->Callback != NULL
 80004d2:	69a3      	ldr	r3, [r4, #24]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0da      	beq.n	800048e <Button_Scan+0x52>
			    && PTR->Button_Event != Button_Idle)
 80004d8:	7a62      	ldrb	r2, [r4, #9]
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d0d7      	beq.n	800048e <Button_Scan+0x52>
			PTR->Button_Event = Button_Idle;
 80004de:	2600      	movs	r6, #0
			PTR->Button_Count_Captured = PTR->Button_Clicked_Count;
 80004e0:	7d20      	ldrb	r0, [r4, #20]
			PTR->Button_Event = Button_Idle;
 80004e2:	7266      	strb	r6, [r4, #9]
			PTR->Button_Count_Captured = PTR->Button_Clicked_Count;
 80004e4:	7560      	strb	r0, [r4, #21]
			PTR->Callback(PTR->Button_Clicked_Count);
 80004e6:	4798      	blx	r3
			PTR->Button_Clicked_Count = 0;
 80004e8:	7526      	strb	r6, [r4, #20]
 80004ea:	e7d0      	b.n	800048e <Button_Scan+0x52>
		    else if (PTR->Button_Event == Button_Pressed)
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d0ed      	beq.n	80004cc <Button_Scan+0x90>
		    else if (PTR->Button_Event == Button_Long_Pressed)
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d1ec      	bne.n	80004ce <Button_Scan+0x92>
			PTR->Button_Event = Button_Idle;
 80004f4:	7261      	strb	r1, [r4, #9]
 80004f6:	e7ea      	b.n	80004ce <Button_Scan+0x92>
 80004f8:	2000004c 	.word	0x2000004c
 80004fc:	20000048 	.word	0x20000048
 8000500:	20000050 	.word	0x20000050

08000504 <Button_Get_Clicked_Count>:
	return 255;
	}
    }

uint8_t Button_Get_Clicked_Count(Button_Struct_t *PTR)
    {
 8000504:	1e03      	subs	r3, r0, #0

    uint8_t count = 0;

    if (PTR != NULL)
 8000506:	d008      	beq.n	800051a <Button_Get_Clicked_Count+0x16>
	{
	if (PTR->Button_Event == Button_Idle || PTR->Button_Event == Button_Long_Pressed)
 8000508:	7a42      	ldrb	r2, [r0, #9]
 800050a:	2a00      	cmp	r2, #0
 800050c:	d002      	beq.n	8000514 <Button_Get_Clicked_Count+0x10>
    uint8_t count = 0;
 800050e:	2000      	movs	r0, #0
	if (PTR->Button_Event == Button_Idle || PTR->Button_Event == Button_Long_Pressed)
 8000510:	2a03      	cmp	r2, #3
 8000512:	d102      	bne.n	800051a <Button_Get_Clicked_Count+0x16>
	    {
	    count = PTR->Button_Count_Captured;
	    PTR->Button_Count_Captured = 0;
 8000514:	2200      	movs	r2, #0
	    count = PTR->Button_Count_Captured;
 8000516:	7d58      	ldrb	r0, [r3, #21]
	    PTR->Button_Count_Captured = 0;
 8000518:	755a      	strb	r2, [r3, #21]
	//Error
	}

    return count;

    }
 800051a:	4770      	bx	lr

0800051c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2214      	movs	r2, #20
 8000522:	2100      	movs	r1, #0
 8000524:	a803      	add	r0, sp, #12
 8000526:	f002 f96c 	bl	8002802 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	2080      	movs	r0, #128	; 0x80
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <MX_GPIO_Init+0xc4>)
 800052e:	03c0      	lsls	r0, r0, #15
 8000530:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000532:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000534:	4301      	orrs	r1, r0
 8000536:	6159      	str	r1, [r3, #20]
 8000538:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	6959      	ldr	r1, [r3, #20]
 8000546:	0280      	lsls	r0, r0, #10
 8000548:	4301      	orrs	r1, r0
 800054a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800054e:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4002      	ands	r2, r0
 8000556:	9201      	str	r2, [sp, #4]
 8000558:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800055c:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	430a      	orrs	r2, r1
 8000560:	615a      	str	r2, [r3, #20]
 8000562:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	400b      	ands	r3, r1
 8000568:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800056a:	0028      	movs	r0, r5
 800056c:	491d      	ldr	r1, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, Gate_Driver_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000570:	f001 fe40 	bl	80021f4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000574:	a903      	add	r1, sp, #12
 8000576:	481c      	ldr	r0, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000578:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800057e:	f001 fd83 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PA10 */
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_GPIO_Init+0xd0>)
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	a903      	add	r1, sp, #12
 8000586:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = Auto_Pulse_In_Pin|Foot_Switch_Pin|ENCDR_B_Pin|ENCDR_A_Pin 
 8000588:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 800058a:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f001 fd7a 	bl	8002088 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 8000596:	a903      	add	r1, sp, #12
 8000598:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Gate_Driver_Pin;
 800059c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a0:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(Gate_Driver_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f001 fd71 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005a6:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	a903      	add	r1, sp, #12
 80005aa:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f001 fd69 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80005b6:	a903      	add	r1, sp, #12
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <MX_GPIO_Init+0xd4>)
  GPIO_InitStruct.Pin = ENCDR_Switch_Pin;
 80005ba:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCDR_Switch_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f001 fd62 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	a903      	add	r1, sp, #12
 80005ce:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f001 fd57 	bl	8002088 <HAL_GPIO_Init>

}
 80005da:	b009      	add	sp, #36	; 0x24
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000
 80005e4:	00000202 	.word	0x00000202
 80005e8:	48001400 	.word	0x48001400
 80005ec:	000004d1 	.word	0x000004d1
 80005f0:	48000400 	.word	0x48000400

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	2510      	movs	r5, #16
{
 80005f8:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	222c      	movs	r2, #44	; 0x2c
 80005fc:	2100      	movs	r1, #0
 80005fe:	a805      	add	r0, sp, #20
 8000600:	f002 f8ff 	bl	8002802 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	002a      	movs	r2, r5
 8000606:	2100      	movs	r1, #0
 8000608:	4668      	mov	r0, sp
 800060a:	f002 f8fa 	bl	8002802 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800060e:	2312      	movs	r3, #18
 8000610:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000612:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000618:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800061a:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000620:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000624:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f001 fdea 	bl	8002200 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	2307      	movs	r3, #7
 800062e:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000632:	0021      	movs	r1, r4
 8000634:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063c:	f002 f814 	bl	8002668 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000640:	b011      	add	sp, #68	; 0x44
 8000642:	bd30      	pop	{r4, r5, pc}

08000644 <main>:
{
 8000644:	b510      	push	{r4, lr}
  HAL_Init();
 8000646:	f001 faa9 	bl	8001b9c <HAL_Init>
  SystemClock_Config();
 800064a:	f7ff ffd3 	bl	80005f4 <SystemClock_Config>
  MX_GPIO_Init();
 800064e:	f7ff ff65 	bl	800051c <MX_GPIO_Init>
  MX_ADC_Init();
 8000652:	f7ff fdef 	bl	8000234 <MX_ADC_Init>
  HAL_ADC_Start(&hadc);
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x20>)
 8000658:	f001 fbc6 	bl	8001de8 <HAL_ADC_Start>
  Spot_Welder_Main();
 800065c:	f001 f8de 	bl	800181c <Spot_Welder_Main>
 8000660:	e7fe      	b.n	8000660 <main+0x1c>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000484 	.word	0x20000484

08000668 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000668:	4770      	bx	lr

0800066a <Encoder_Button_Callback>:
    }

void Encoder_Button_Callback(uint8_t Clicked_Count)
    {

    }
 800066a:	4770      	bx	lr

0800066c <Systic_Callback>:
    {
 800066c:	b510      	push	{r4, lr}
    Encoder_Scan();
 800066e:	f000 fe1b 	bl	80012a8 <Encoder_Scan>
    Button_Scan();
 8000672:	f7ff fee3 	bl	800043c <Button_Scan>
    }
 8000676:	bd10      	pop	{r4, pc}

08000678 <Menu_Change_Page>:

void Menu_Change_Page(uint8_t page_no, uint8_t page_screen)
    {
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <Menu_Change_Page+0x40>)
 800067a:	681b      	ldr	r3, [r3, #0]

    switch (page_no)
 800067c:	2801      	cmp	r0, #1
 800067e:	d008      	beq.n	8000692 <Menu_Change_Page+0x1a>
 8000680:	2802      	cmp	r0, #2
 8000682:	d010      	beq.n	80006a6 <Menu_Change_Page+0x2e>
	Menu_Handle->Current_Page_Screen = page_screen;
	Menu_Handle->Screens_In_Current_Page = 4; // 4 screens in page 2
	break;
	}

    if (Menu_Handle->Current_Page_Screen == 0)
 8000684:	7819      	ldrb	r1, [r3, #0]
 8000686:	2201      	movs	r2, #1
 8000688:	2900      	cmp	r1, #0
 800068a:	d100      	bne.n	800068e <Menu_Change_Page+0x16>
	{
	Menu_Handle->Current_Page_Screen = 1;
 800068c:	701a      	strb	r2, [r3, #0]
	}

    Menu_Handle->Refresh_Flag = 1;
 800068e:	709a      	strb	r2, [r3, #2]

    }
 8000690:	4770      	bx	lr
	Show_Page_Screen = &Show_Page1_Screen;
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <Menu_Change_Page+0x44>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <Menu_Change_Page+0x48>)
 8000696:	6010      	str	r0, [r2, #0]
	Enter_Page_Screen = &Enter_Page1_Screen;
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <Menu_Change_Page+0x4c>)
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <Menu_Change_Page+0x50>)
 800069c:	6010      	str	r0, [r2, #0]
	Menu_Handle->Screens_In_Current_Page = 5; // 5 screens in page 1
 800069e:	2205      	movs	r2, #5
	Menu_Handle->Current_Page_Screen = page_screen;
 80006a0:	7019      	strb	r1, [r3, #0]
	Menu_Handle->Screens_In_Current_Page = 4; // 4 screens in page 2
 80006a2:	705a      	strb	r2, [r3, #1]
	break;
 80006a4:	e7ee      	b.n	8000684 <Menu_Change_Page+0xc>
	Show_Page_Screen = &Show_Page2_Screen;
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <Menu_Change_Page+0x44>)
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <Menu_Change_Page+0x54>)
 80006aa:	6010      	str	r0, [r2, #0]
	Enter_Page_Screen = &Enter_Page2_Screen;
 80006ac:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <Menu_Change_Page+0x4c>)
 80006ae:	4808      	ldr	r0, [pc, #32]	; (80006d0 <Menu_Change_Page+0x58>)
 80006b0:	6010      	str	r0, [r2, #0]
	Menu_Handle->Current_Page_Screen = page_screen;
 80006b2:	7019      	strb	r1, [r3, #0]
	Menu_Handle->Screens_In_Current_Page = 4; // 4 screens in page 2
 80006b4:	2204      	movs	r2, #4
 80006b6:	e7f4      	b.n	80006a2 <Menu_Change_Page+0x2a>
 80006b8:	20000010 	.word	0x20000010
 80006bc:	200004e0 	.word	0x200004e0
 80006c0:	08000a35 	.word	0x08000a35
 80006c4:	200004fc 	.word	0x200004fc
 80006c8:	08000f31 	.word	0x08000f31
 80006cc:	08001171 	.word	0x08001171
 80006d0:	0800120f 	.word	0x0800120f

080006d4 <Menu_Init>:

void Menu_Init()
    {
 80006d4:	b510      	push	{r4, lr}

    ssd1306_Init();
 80006d6:	f001 f8ff 	bl	80018d8 <ssd1306_Init>

    ssd1306_Fill(Black);
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 f8ca 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	0008      	movs	r0, r1
 80006e4:	f001 f9e2 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("  Arduino", Font_11x18, White);
 80006e8:	4c1b      	ldr	r4, [pc, #108]	; (8000758 <Menu_Init+0x84>)
 80006ea:	2301      	movs	r3, #1
 80006ec:	6862      	ldr	r2, [r4, #4]
 80006ee:	6821      	ldr	r1, [r4, #0]
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <Menu_Init+0x88>)
 80006f2:	f001 f9c7 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80006f6:	2114      	movs	r1, #20
 80006f8:	2000      	movs	r0, #0
 80006fa:	f001 f9d7 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("Spot Welder", Font_11x18, White);
 80006fe:	2301      	movs	r3, #1
 8000700:	6821      	ldr	r1, [r4, #0]
 8000702:	6862      	ldr	r2, [r4, #4]
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <Menu_Init+0x8c>)
 8000706:	f001 f9bd 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800070a:	2128      	movs	r1, #40	; 0x28
 800070c:	2000      	movs	r0, #0
 800070e:	f001 f9cd 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("    V3", Font_11x18, White);
 8000712:	cc06      	ldmia	r4!, {r1, r2}
 8000714:	2301      	movs	r3, #1
 8000716:	4813      	ldr	r0, [pc, #76]	; (8000764 <Menu_Init+0x90>)
 8000718:	f001 f9b4 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800071c:	f001 f8b8 	bl	8001890 <ssd1306_UpdateScreen>

    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <Menu_Init+0x94>)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <Menu_Init+0x98>)
    Encoder.Encoder_Pin_1_Port = ENCDR_A_GPIO_Port;
    Encoder_Attach(&Encoder);

    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
    Encoder_Button.Button_Pressed_Logic = LOW;
 8000724:	2400      	movs	r4, #0
    Encoder.Encoder_Pin_0 = ENCDR_B_Pin;
 8000726:	6003      	str	r3, [r0, #0]
    Encoder.Encoder_Pin_1 = ENCDR_A_Pin;
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	6043      	str	r3, [r0, #4]
    Encoder.Encoder_Pin_0_Port = ENCDR_B_GPIO_Port;
 800072e:	6083      	str	r3, [r0, #8]
    Encoder_Attach(&Encoder);
 8000730:	f000 fd8a 	bl	8001248 <Encoder_Attach>
    Encoder_Button.Button_Pin = ENCDR_Switch_Pin;
 8000734:	2302      	movs	r3, #2
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <Menu_Init+0x9c>)
 8000738:	8003      	strh	r3, [r0, #0]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <Menu_Init+0xa0>)
    Encoder_Button.Button_Pressed_Logic = LOW;
 800073c:	7204      	strb	r4, [r0, #8]
    Encoder_Button.Button_Pin_Port = ENCDR_Switch_GPIO_Port;
 800073e:	6043      	str	r3, [r0, #4]
    Encoder_Button.Callback = Encoder_Button_Callback;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <Menu_Init+0xa4>)
 8000742:	6183      	str	r3, [r0, #24]
    Button_Attach(&Encoder_Button);
 8000744:	f7ff fe52 	bl	80003ec <Button_Attach>

    Menu_Change_Page(1, 1); // by default show page1 screen1.
 8000748:	2101      	movs	r1, #1
 800074a:	0008      	movs	r0, r1
 800074c:	f7ff ff94 	bl	8000678 <Menu_Change_Page>
    Menu_Handle->Refresh_Flag = 0; // do not refresh for first time
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <Menu_Init+0xa8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	709c      	strb	r4, [r3, #2]
    }
 8000756:	bd10      	pop	{r4, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	08003d78 	.word	0x08003d78
 8000760:	08003d82 	.word	0x08003d82
 8000764:	08003d8e 	.word	0x08003d8e
 8000768:	200004e4 	.word	0x200004e4
 800076c:	00800040 	.word	0x00800040
 8000770:	200004c4 	.word	0x200004c4
 8000774:	48000400 	.word	0x48000400
 8000778:	0800066b 	.word	0x0800066b
 800077c:	20000010 	.word	0x20000010

08000780 <Menu_Loop>:

void Menu_Loop()
    {
 8000780:	b537      	push	{r0, r1, r2, r4, r5, lr}

    static uint32_t Scan_Time_Stamp = 0;

    Menu_Event_t menu_event;

    if (HAL_GetTick() - Scan_Time_Stamp > (100 - 1))
 8000782:	f001 fa27 	bl	8001bd4 <HAL_GetTick>
 8000786:	4c31      	ldr	r4, [pc, #196]	; (800084c <Menu_Loop+0xcc>)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	1ac0      	subs	r0, r0, r3
 800078c:	2863      	cmp	r0, #99	; 0x63
 800078e:	d94c      	bls.n	800082a <Menu_Loop+0xaa>
	{

	Scan_Time_Stamp = HAL_GetTick();
 8000790:	f001 fa20 	bl	8001bd4 <HAL_GetTick>
 8000794:	6020      	str	r0, [r4, #0]

	menu_event.Encoder_Count = Encoder_Get_Count(&Encoder);
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <Menu_Loop+0xd0>)
 8000798:	f000 fde4 	bl	8001364 <Encoder_Get_Count>
 800079c:	466b      	mov	r3, sp
 800079e:	8018      	strh	r0, [r3, #0]

	menu_event.Enter_Button_Clicks = Button_Get_Clicked_Count(
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <Menu_Loop+0xd4>)
 80007a2:	f7ff feaf 	bl	8000504 <Button_Get_Clicked_Count>
 80007a6:	466b      	mov	r3, sp
		&Encoder_Button);

	if (!in_page_loop)
 80007a8:	4d2b      	ldr	r5, [pc, #172]	; (8000858 <Menu_Loop+0xd8>)
	menu_event.Enter_Button_Clicks = Button_Get_Clicked_Count(
 80007aa:	7098      	strb	r0, [r3, #2]
	if (!in_page_loop)
 80007ac:	782b      	ldrb	r3, [r5, #0]
 80007ae:	4c2b      	ldr	r4, [pc, #172]	; (800085c <Menu_Loop+0xdc>)
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d13d      	bne.n	8000830 <Menu_Loop+0xb0>
	    {

	    if (menu_event.Encoder_Count < 0) // or down button
 80007b4:	466b      	mov	r3, sp
 80007b6:	2200      	movs	r2, #0
 80007b8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da0c      	bge.n	80007d8 <Menu_Loop+0x58>
 80007be:	6822      	ldr	r2, [r4, #0]
		{
		Menu_Handle->Current_Page_Screen++;
 80007c0:	7813      	ldrb	r3, [r2, #0]
		if (Menu_Handle->Current_Page_Screen
			> Menu_Handle->Screens_In_Current_Page)
 80007c2:	7851      	ldrb	r1, [r2, #1]
		Menu_Handle->Current_Page_Screen++;
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	7013      	strb	r3, [r2, #0]
		if (Menu_Handle->Current_Page_Screen
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d900      	bls.n	80007d0 <Menu_Loop+0x50>
		    {
		    Menu_Handle->Current_Page_Screen =
 80007ce:	7011      	strb	r1, [r2, #0]
			    Menu_Handle->Screens_In_Current_Page;
		    }
		Show_Page_Screen(Menu_Handle->Current_Page_Screen);
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <Menu_Loop+0xe0>)
 80007d2:	7810      	ldrb	r0, [r2, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4798      	blx	r3
		}

	    if (menu_event.Encoder_Count > 0) // or up button
 80007d8:	466b      	mov	r3, sp
 80007da:	2200      	movs	r2, #0
 80007dc:	5e9b      	ldrsh	r3, [r3, r2]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd0a      	ble.n	80007f8 <Menu_Loop+0x78>
 80007e2:	6822      	ldr	r2, [r4, #0]
		{
		Menu_Handle->Current_Page_Screen--;
 80007e4:	7813      	ldrb	r3, [r2, #0]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b2db      	uxtb	r3, r3
		if (Menu_Handle->Current_Page_Screen == 0)
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d01e      	beq.n	800082c <Menu_Loop+0xac>
		    {
		    Menu_Handle->Current_Page_Screen = 1;
 80007ee:	7013      	strb	r3, [r2, #0]
		    }
		Show_Page_Screen(Menu_Handle->Current_Page_Screen);
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <Menu_Loop+0xe0>)
 80007f2:	7810      	ldrb	r0, [r2, #0]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4798      	blx	r3
		}

	    if (menu_event.Enter_Button_Clicks == 1) // enter or select button
 80007f8:	466b      	mov	r3, sp
 80007fa:	789b      	ldrb	r3, [r3, #2]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10a      	bne.n	8000816 <Menu_Loop+0x96>
		{
		menu_event.Enter_Button_Clicks = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	466a      	mov	r2, sp
 8000804:	7093      	strb	r3, [r2, #2]
		menu_event.Encoder_Count = 0;
 8000806:	8013      	strh	r3, [r2, #0]
		in_page_loop = Enter_Page_Screen(
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	4669      	mov	r1, sp
 800080c:	7818      	ldrb	r0, [r3, #0]
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <Menu_Loop+0xe4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4798      	blx	r3
 8000814:	7028      	strb	r0, [r5, #0]
			Menu_Handle->Current_Page_Screen, &menu_event);
		}

	    if (Menu_Handle->Refresh_Flag == 1)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	789a      	ldrb	r2, [r3, #2]
 800081a:	2a01      	cmp	r2, #1
 800081c:	d105      	bne.n	800082a <Menu_Loop+0xaa>
		{
		Menu_Handle->Refresh_Flag = 0;
 800081e:	2200      	movs	r2, #0
		Show_Page_Screen(Menu_Handle->Current_Page_Screen);
 8000820:	7818      	ldrb	r0, [r3, #0]
		Menu_Handle->Refresh_Flag = 0;
 8000822:	709a      	strb	r2, [r3, #2]
		Show_Page_Screen(Menu_Handle->Current_Page_Screen);
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <Menu_Loop+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4798      	blx	r3

	    }

	}

    }
 800082a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		    Menu_Handle->Current_Page_Screen = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	e7de      	b.n	80007ee <Menu_Loop+0x6e>
	    in_page_loop = Enter_Page_Screen(Menu_Handle->Current_Page_Screen,
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	4669      	mov	r1, sp
 8000834:	7818      	ldrb	r0, [r3, #0]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <Menu_Loop+0xe4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4798      	blx	r3
 800083c:	7028      	strb	r0, [r5, #0]
	    if (!in_page_loop)
 800083e:	2800      	cmp	r0, #0
 8000840:	d1f3      	bne.n	800082a <Menu_Loop+0xaa>
		Menu_Handle->Refresh_Flag = 1;
 8000842:	2201      	movs	r2, #1
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	709a      	strb	r2, [r3, #2]
    }
 8000848:	e7ef      	b.n	800082a <Menu_Loop+0xaa>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000068 	.word	0x20000068
 8000850:	200004e4 	.word	0x200004e4
 8000854:	200004c4 	.word	0x200004c4
 8000858:	20000014 	.word	0x20000014
 800085c:	20000010 	.word	0x20000010
 8000860:	200004e0 	.word	0x200004e0
 8000864:	200004fc 	.word	0x200004fc

08000868 <Show_Page1_Screen1>:
#include "ssd1306.h"
#include "spot_welder_main.h"


void Show_Page1_Screen1()
    {
 8000868:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 800086a:	2000      	movs	r0, #0
 800086c:	f001 f802 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	0008      	movs	r0, r1
 8000874:	f001 f91a 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, Black);
 8000878:	4c0e      	ldr	r4, [pc, #56]	; (80008b4 <Show_Page1_Screen1+0x4c>)
 800087a:	2300      	movs	r3, #0
 800087c:	6862      	ldr	r2, [r4, #4]
 800087e:	6821      	ldr	r1, [r4, #0]
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <Show_Page1_Screen1+0x50>)
 8000882:	f001 f8ff 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8000886:	2114      	movs	r1, #20
 8000888:	2000      	movs	r0, #0
 800088a:	f001 f90f 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 800088e:	2301      	movs	r3, #1
 8000890:	6821      	ldr	r1, [r4, #0]
 8000892:	6862      	ldr	r2, [r4, #4]
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <Show_Page1_Screen1+0x54>)
 8000896:	f001 f8f5 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 800089a:	2128      	movs	r1, #40	; 0x28
 800089c:	2000      	movs	r0, #0
 800089e:	f001 f905 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80008a2:	cc06      	ldmia	r4!, {r1, r2}
 80008a4:	2301      	movs	r3, #1
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <Show_Page1_Screen1+0x58>)
 80008a8:	f001 f8ec 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80008ac:	f000 fff0 	bl	8001890 <ssd1306_UpdateScreen>
    }
 80008b0:	bd10      	pop	{r4, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08003e42 	.word	0x08003e42
 80008bc:	08003e37 	.word	0x08003e37
 80008c0:	08003e47 	.word	0x08003e47

080008c4 <Show_Page1_Screen2>:

void Show_Page1_Screen2()
    {
 80008c4:	b510      	push	{r4, lr}
    ssd1306_Fill(Black);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 ffd4 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	0008      	movs	r0, r1
 80008d0:	f001 f8ec 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 80008d4:	4c0e      	ldr	r4, [pc, #56]	; (8000910 <Show_Page1_Screen2+0x4c>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	6862      	ldr	r2, [r4, #4]
 80008da:	6821      	ldr	r1, [r4, #0]
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <Show_Page1_Screen2+0x50>)
 80008de:	f001 f8d1 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80008e2:	2114      	movs	r1, #20
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 f8e1 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, Black);
 80008ea:	2300      	movs	r3, #0
 80008ec:	6821      	ldr	r1, [r4, #0]
 80008ee:	6862      	ldr	r2, [r4, #4]
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <Show_Page1_Screen2+0x54>)
 80008f2:	f001 f8c7 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80008f6:	2128      	movs	r1, #40	; 0x28
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 f8d7 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80008fe:	cc06      	ldmia	r4!, {r1, r2}
 8000900:	2301      	movs	r3, #1
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <Show_Page1_Screen2+0x58>)
 8000904:	f001 f8be 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000908:	f000 ffc2 	bl	8001890 <ssd1306_UpdateScreen>
    }
 800090c:	bd10      	pop	{r4, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000000 	.word	0x20000000
 8000914:	08003e42 	.word	0x08003e42
 8000918:	08003e37 	.word	0x08003e37
 800091c:	08003e47 	.word	0x08003e47

08000920 <Show_Page1_Screen3>:

void Show_Page1_Screen3()
    {
 8000920:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 8000922:	2000      	movs	r0, #0
 8000924:	f000 ffa6 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	0008      	movs	r0, r1
 800092c:	f001 f8be 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_11x18, White);
 8000930:	4c0e      	ldr	r4, [pc, #56]	; (800096c <Show_Page1_Screen3+0x4c>)
 8000932:	2301      	movs	r3, #1
 8000934:	6862      	ldr	r2, [r4, #4]
 8000936:	6821      	ldr	r1, [r4, #0]
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <Show_Page1_Screen3+0x50>)
 800093a:	f001 f8a3 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800093e:	2114      	movs	r1, #20
 8000940:	2000      	movs	r0, #0
 8000942:	f001 f8b3 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 8000946:	2301      	movs	r3, #1
 8000948:	6821      	ldr	r1, [r4, #0]
 800094a:	6862      	ldr	r2, [r4, #4]
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <Show_Page1_Screen3+0x54>)
 800094e:	f001 f899 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8000952:	2128      	movs	r1, #40	; 0x28
 8000954:	2000      	movs	r0, #0
 8000956:	f001 f8a9 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, Black);
 800095a:	cc06      	ldmia	r4!, {r1, r2}
 800095c:	2300      	movs	r3, #0
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <Show_Page1_Screen3+0x58>)
 8000960:	f001 f890 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000964:	f000 ff94 	bl	8001890 <ssd1306_UpdateScreen>

    }
 8000968:	bd10      	pop	{r4, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000000 	.word	0x20000000
 8000970:	08003e42 	.word	0x08003e42
 8000974:	08003e37 	.word	0x08003e37
 8000978:	08003e47 	.word	0x08003e47

0800097c <Show_Page1_Screen4>:

void Show_Page1_Screen4()
    {
 800097c:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 ff78 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000984:	2100      	movs	r1, #0
 8000986:	0008      	movs	r0, r1
 8000988:	f001 f890 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_11x18, White);
 800098c:	4c0e      	ldr	r4, [pc, #56]	; (80009c8 <Show_Page1_Screen4+0x4c>)
 800098e:	2301      	movs	r3, #1
 8000990:	6862      	ldr	r2, [r4, #4]
 8000992:	6821      	ldr	r1, [r4, #0]
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <Show_Page1_Screen4+0x50>)
 8000996:	f001 f875 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 800099a:	2114      	movs	r1, #20
 800099c:	2000      	movs	r0, #0
 800099e:	f001 f885 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80009a2:	2301      	movs	r3, #1
 80009a4:	6821      	ldr	r1, [r4, #0]
 80009a6:	6862      	ldr	r2, [r4, #4]
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <Show_Page1_Screen4+0x54>)
 80009aa:	f001 f86b 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80009ae:	2128      	movs	r1, #40	; 0x28
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 f87b 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, Black);
 80009b6:	cc06      	ldmia	r4!, {r1, r2}
 80009b8:	2300      	movs	r3, #0
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <Show_Page1_Screen4+0x58>)
 80009bc:	f001 f862 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80009c0:	f000 ff66 	bl	8001890 <ssd1306_UpdateScreen>

    }
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000000 	.word	0x20000000
 80009cc:	08003e37 	.word	0x08003e37
 80009d0:	08003e47 	.word	0x08003e47
 80009d4:	08003e70 	.word	0x08003e70

080009d8 <Show_Page1_Screen5>:

void Show_Page1_Screen5()
    {
 80009d8:	b510      	push	{r4, lr}

    ssd1306_Fill(Black);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 ff4a 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80009e0:	2100      	movs	r1, #0
 80009e2:	0008      	movs	r0, r1
 80009e4:	f001 f862 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 80009e8:	4c0e      	ldr	r4, [pc, #56]	; (8000a24 <Show_Page1_Screen5+0x4c>)
 80009ea:	2301      	movs	r3, #1
 80009ec:	6862      	ldr	r2, [r4, #4]
 80009ee:	6821      	ldr	r1, [r4, #0]
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <Show_Page1_Screen5+0x50>)
 80009f2:	f001 f847 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80009f6:	2114      	movs	r1, #20
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f857 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, White);
 80009fe:	2301      	movs	r3, #1
 8000a00:	6821      	ldr	r1, [r4, #0]
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <Show_Page1_Screen5+0x54>)
 8000a06:	f001 f83d 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 8000a0a:	2128      	movs	r1, #40	; 0x28
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f001 f84d 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Reset, Font_11x18, Black);
 8000a12:	cc06      	ldmia	r4!, {r1, r2}
 8000a14:	2300      	movs	r3, #0
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <Show_Page1_Screen5+0x58>)
 8000a18:	f001 f834 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000a1c:	f000 ff38 	bl	8001890 <ssd1306_UpdateScreen>

    }
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000000 	.word	0x20000000
 8000a28:	08003e47 	.word	0x08003e47
 8000a2c:	08003e70 	.word	0x08003e70
 8000a30:	08003e6a 	.word	0x08003e6a

08000a34 <Show_Page1_Screen>:

void Show_Page1_Screen(uint8_t screen)
    {

    switch (screen)
 8000a34:	3801      	subs	r0, #1
    {
 8000a36:	b510      	push	{r4, lr}
    switch (screen)
 8000a38:	2804      	cmp	r0, #4
 8000a3a:	d806      	bhi.n	8000a4a <Show_Page1_Screen+0x16>
 8000a3c:	f7ff fb64 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000a40:	0c090603 	.word	0x0c090603
 8000a44:	0f          	.byte	0x0f
 8000a45:	00          	.byte	0x00
	{
    case 1:
	Show_Page1_Screen1();
 8000a46:	f7ff ff0f 	bl	8000868 <Show_Page1_Screen1>
    case 5:
	Show_Page1_Screen5();
	break;

	}
    }
 8000a4a:	bd10      	pop	{r4, pc}
	Show_Page1_Screen2();
 8000a4c:	f7ff ff3a 	bl	80008c4 <Show_Page1_Screen2>
	break;
 8000a50:	e7fb      	b.n	8000a4a <Show_Page1_Screen+0x16>
	Show_Page1_Screen3();
 8000a52:	f7ff ff65 	bl	8000920 <Show_Page1_Screen3>
	break;
 8000a56:	e7f8      	b.n	8000a4a <Show_Page1_Screen+0x16>
	Show_Page1_Screen4();
 8000a58:	f7ff ff90 	bl	800097c <Show_Page1_Screen4>
	break;
 8000a5c:	e7f5      	b.n	8000a4a <Show_Page1_Screen+0x16>
	Show_Page1_Screen5();
 8000a5e:	f7ff ffbb 	bl	80009d8 <Show_Page1_Screen5>
    }
 8000a62:	e7f2      	b.n	8000a4a <Show_Page1_Screen+0x16>

08000a64 <Page1_Screen1_Loop>:

uint8_t Page1_Screen1_Loop(Menu_Event_t *event)
    {
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t xreturn = 1;
    char temp[10];

    int16_t bat_voltage;

    if (event->Enter_Button_Clicks == 1)
 8000a66:	7883      	ldrb	r3, [r0, #2]
    {
 8000a68:	b087      	sub	sp, #28
    if (event->Enter_Button_Clicks == 1)
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	4193      	sbcs	r3, r2
    uint8_t xreturn = 1;
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	9301      	str	r3, [sp, #4]
	{
	xreturn = 0; // exit loop
	}

    Set_Main_Pulse_Duration(event->Encoder_Count + Get_Main_Pulse_Duration());
 8000a74:	8804      	ldrh	r4, [r0, #0]
 8000a76:	f000 fe29 	bl	80016cc <Get_Main_Pulse_Duration>
 8000a7a:	1820      	adds	r0, r4, r0
 8000a7c:	b200      	sxth	r0, r0
 8000a7e:	f000 fe15 	bl	80016ac <Set_Main_Pulse_Duration>

    HAL_ADC_PollForConversion(&hadc, 10);
 8000a82:	4cac      	ldr	r4, [pc, #688]	; (8000d34 <Page1_Screen1_Loop+0x2d0>)
 8000a84:	210a      	movs	r1, #10
 8000a86:	0020      	movs	r0, r4
 8000a88:	f001 f9da 	bl	8001e40 <HAL_ADC_PollForConversion>
    bat_voltage = HAL_ADC_GetValue(&hadc) * 13;
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	f001 fa35 	bl	8001efc <HAL_ADC_GetValue>
 8000a92:	270d      	movs	r7, #13
 8000a94:	4347      	muls	r7, r0

    if (bat_voltage < Get_Batt_Alarm())
 8000a96:	b23f      	sxth	r7, r7
 8000a98:	f000 fe4c 	bl	8001734 <Get_Batt_Alarm>
 8000a9c:	4287      	cmp	r7, r0
 8000a9e:	da01      	bge.n	8000aa4 <Page1_Screen1_Loop+0x40>
	{
	Disable_Welder();
 8000aa0:	f000 fe4e 	bl	8001740 <Disable_Welder>
	}

    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 8000aa4:	f000 fe84 	bl	80017b0 <Get_Foot_Switch_Status>
 8000aa8:	4da3      	ldr	r5, [pc, #652]	; (8000d38 <Page1_Screen1_Loop+0x2d4>)
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d035      	beq.n	8000b1a <Page1_Screen1_Loop+0xb6>
	{

	if (Get_Welder_Status())
 8000aae:	f000 fe4d 	bl	800174c <Get_Welder_Status>
 8000ab2:	4ca2      	ldr	r4, [pc, #648]	; (8000d3c <Page1_Screen1_Loop+0x2d8>)
 8000ab4:	1e06      	subs	r6, r0, #0
 8000ab6:	d000      	beq.n	8000aba <Page1_Screen1_Loop+0x56>
 8000ab8:	e0ae      	b.n	8000c18 <Page1_Screen1_Loop+0x1b4>
		ssd1306_UpdateScreen();
		}
	    }
	else
	    {
	    ssd1306_Fill(Black);
 8000aba:	f000 fedb 	bl	8001874 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000abe:	0031      	movs	r1, r6
 8000ac0:	0030      	movs	r0, r6
 8000ac2:	f000 fff3 	bl	8001aac <ssd1306_SetCursor>
	    ssd1306_WriteString("Battery Low", Font_7x10, White);
 8000ac6:	6862      	ldr	r2, [r4, #4]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	6821      	ldr	r1, [r4, #0]
 8000acc:	489c      	ldr	r0, [pc, #624]	; (8000d40 <Page1_Screen1_Loop+0x2dc>)
 8000ace:	f000 ffd9 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 15);
 8000ad2:	0030      	movs	r0, r6
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f000 ffe9 	bl	8001aac <ssd1306_SetCursor>
	    ssd1306_WriteString("Under Voltage", Font_7x10, White);
 8000ada:	6862      	ldr	r2, [r4, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	6821      	ldr	r1, [r4, #0]
 8000ae0:	4898      	ldr	r0, [pc, #608]	; (8000d44 <Page1_Screen1_Loop+0x2e0>)
 8000ae2:	f000 ffcf 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 30);
 8000ae6:	0030      	movs	r0, r6
 8000ae8:	211e      	movs	r1, #30
 8000aea:	f000 ffdf 	bl	8001aac <ssd1306_SetCursor>
	    ssd1306_WriteString("Lock Out", Font_7x10, White);
 8000aee:	2301      	movs	r3, #1
 8000af0:	6821      	ldr	r1, [r4, #0]
 8000af2:	6862      	ldr	r2, [r4, #4]
 8000af4:	4894      	ldr	r0, [pc, #592]	; (8000d48 <Page1_Screen1_Loop+0x2e4>)
 8000af6:	f000 ffc5 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 45);
 8000afa:	0030      	movs	r0, r6
 8000afc:	212d      	movs	r1, #45	; 0x2d
 8000afe:	f000 ffd5 	bl	8001aac <ssd1306_SetCursor>
	    ssd1306_WriteString("Reboot Welder", Font_7x10, White);
 8000b02:	cc06      	ldmia	r4!, {r1, r2}
 8000b04:	2301      	movs	r3, #1
 8000b06:	4891      	ldr	r0, [pc, #580]	; (8000d4c <Page1_Screen1_Loop+0x2e8>)
 8000b08:	f000 ffbc 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000b0c:	f000 fec0 	bl	8001890 <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 8000b10:	20fa      	movs	r0, #250	; 0xfa
 8000b12:	00c0      	lsls	r0, r0, #3
 8000b14:	f001 f864 	bl	8001be0 <HAL_Delay>
 8000b18:	e003      	b.n	8000b22 <Page1_Screen1_Loop+0xbe>
    if (Get_Foot_Switch_Status() || Get_Auto_Puse_In_Status())
 8000b1a:	f000 fe5b 	bl	80017d4 <Get_Auto_Puse_In_Status>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d1c5      	bne.n	8000aae <Page1_Screen1_Loop+0x4a>
	    }

	}

    ssd1306_Fill(Black);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fea6 	bl	8001874 <ssd1306_Fill>

    ssd1306_SetCursor(45, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	202d      	movs	r0, #45	; 0x2d
 8000b2c:	f000 ffbe 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000b30:	f000 fdcc 	bl	80016cc <Get_Main_Pulse_Duration>
 8000b34:	220a      	movs	r2, #10
 8000b36:	a903      	add	r1, sp, #12
 8000b38:	f001 fe56 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	6829      	ldr	r1, [r5, #0]
 8000b40:	686a      	ldr	r2, [r5, #4]
 8000b42:	a803      	add	r0, sp, #12
 8000b44:	f000 ff9e 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString("ms", Font_11x18, White);
 8000b48:	cd06      	ldmia	r5!, {r1, r2}
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	4880      	ldr	r0, [pc, #512]	; (8000d50 <Page1_Screen1_Loop+0x2ec>)
 8000b4e:	f000 ff99 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000b52:	2114      	movs	r1, #20
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 ffa9 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("Battery:", Font_7x10, White);
 8000b5a:	4c78      	ldr	r4, [pc, #480]	; (8000d3c <Page1_Screen1_Loop+0x2d8>)
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	6821      	ldr	r1, [r4, #0]
 8000b62:	487c      	ldr	r0, [pc, #496]	; (8000d54 <Page1_Screen1_Loop+0x2f0>)
 8000b64:	f000 ff8e 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(75, 20);
 8000b68:	2114      	movs	r1, #20
 8000b6a:	204b      	movs	r0, #75	; 0x4b
 8000b6c:	f000 ff9e 	bl	8001aac <ssd1306_SetCursor>
    itoa(bat_voltage, temp, 10);
 8000b70:	220a      	movs	r2, #10
 8000b72:	a903      	add	r1, sp, #12
 8000b74:	0038      	movs	r0, r7
 8000b76:	f001 fe37 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	6862      	ldr	r2, [r4, #4]
 8000b80:	a803      	add	r0, sp, #12
 8000b82:	f000 ff7f 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString("mV", Font_7x10, White);
 8000b86:	2301      	movs	r3, #1
 8000b88:	6862      	ldr	r2, [r4, #4]
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	4872      	ldr	r0, [pc, #456]	; (8000d58 <Page1_Screen1_Loop+0x2f4>)
 8000b8e:	f000 ff79 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 35);
 8000b92:	2123      	movs	r1, #35	; 0x23
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 ff89 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("Tot Welds:", Font_7x10, White);
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	6862      	ldr	r2, [r4, #4]
 8000b9e:	6821      	ldr	r1, [r4, #0]
 8000ba0:	486e      	ldr	r0, [pc, #440]	; (8000d5c <Page1_Screen1_Loop+0x2f8>)
 8000ba2:	f000 ff6f 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(75, 35);
 8000ba6:	2123      	movs	r1, #35	; 0x23
 8000ba8:	204b      	movs	r0, #75	; 0x4b
 8000baa:	f000 ff7f 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Weld_Count(), temp, 10);
 8000bae:	f000 fdf9 	bl	80017a4 <Get_Weld_Count>
 8000bb2:	220a      	movs	r2, #10
 8000bb4:	a903      	add	r1, sp, #12
 8000bb6:	f001 fe17 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	6862      	ldr	r2, [r4, #4]
 8000bbe:	6821      	ldr	r1, [r4, #0]
 8000bc0:	a803      	add	r0, sp, #12
 8000bc2:	f000 ff5f 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8000bc6:	2132      	movs	r1, #50	; 0x32
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 ff6f 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto, Font_7x10, White);
 8000bce:	2301      	movs	r3, #1
 8000bd0:	6821      	ldr	r1, [r4, #0]
 8000bd2:	6862      	ldr	r2, [r4, #4]
 8000bd4:	4862      	ldr	r0, [pc, #392]	; (8000d60 <Page1_Screen1_Loop+0x2fc>)
 8000bd6:	f000 ff55 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString(" ", Font_7x10, White);
 8000bda:	2301      	movs	r3, #1
 8000bdc:	6821      	ldr	r1, [r4, #0]
 8000bde:	6862      	ldr	r2, [r4, #4]
 8000be0:	4860      	ldr	r0, [pc, #384]	; (8000d64 <Page1_Screen1_Loop+0x300>)
 8000be2:	f000 ff4f 	bl	8001a84 <ssd1306_WriteString>
    if (Get_Auto_Weld_Status())
 8000be6:	f000 fdcb 	bl	8001780 <Get_Auto_Weld_Status>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000bea:	2301      	movs	r3, #1
 8000bec:	6821      	ldr	r1, [r4, #0]
 8000bee:	6862      	ldr	r2, [r4, #4]
    if (Get_Auto_Weld_Status())
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d100      	bne.n	8000bf6 <Page1_Screen1_Loop+0x192>
 8000bf4:	e09b      	b.n	8000d2e <Page1_Screen1_Loop+0x2ca>
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000bf6:	485c      	ldr	r0, [pc, #368]	; (8000d68 <Page1_Screen1_Loop+0x304>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000bf8:	f000 ff44 	bl	8001a84 <ssd1306_WriteString>
	}
    ssd1306_SetCursor(100, 50);
 8000bfc:	2132      	movs	r1, #50	; 0x32
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f000 ff54 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(">>", Font_7x10, White);
 8000c04:	cc06      	ldmia	r4!, {r1, r2}
 8000c06:	2301      	movs	r3, #1
 8000c08:	4858      	ldr	r0, [pc, #352]	; (8000d6c <Page1_Screen1_Loop+0x308>)
 8000c0a:	f000 ff3b 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000c0e:	f000 fe3f 	bl	8001890 <ssd1306_UpdateScreen>

    return xreturn;
    }
 8000c12:	9801      	ldr	r0, [sp, #4]
 8000c14:	b007      	add	sp, #28
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    HAL_Delay(Get_Auto_Pulse_Delay());
 8000c18:	f000 fd42 	bl	80016a0 <Get_Auto_Pulse_Delay>
 8000c1c:	f000 ffe0 	bl	8001be0 <HAL_Delay>
	    ssd1306_Fill(Black);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 fe27 	bl	8001874 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	0008      	movs	r0, r1
 8000c2a:	f000 ff3f 	bl	8001aac <ssd1306_SetCursor>
	    ssd1306_WriteString("Pulse:", Font_11x18, White);
 8000c2e:	2301      	movs	r3, #1
 8000c30:	6829      	ldr	r1, [r5, #0]
 8000c32:	686a      	ldr	r2, [r5, #4]
 8000c34:	484e      	ldr	r0, [pc, #312]	; (8000d70 <Page1_Screen1_Loop+0x30c>)
 8000c36:	f000 ff25 	bl	8001a84 <ssd1306_WriteString>
	    itoa(Get_Main_Pulse_Duration(), temp, 10);
 8000c3a:	f000 fd47 	bl	80016cc <Get_Main_Pulse_Duration>
 8000c3e:	220a      	movs	r2, #10
 8000c40:	a903      	add	r1, sp, #12
 8000c42:	f001 fdd1 	bl	80027e8 <itoa>
	    ssd1306_WriteString(temp, Font_11x18, White);
 8000c46:	2301      	movs	r3, #1
 8000c48:	6829      	ldr	r1, [r5, #0]
 8000c4a:	686a      	ldr	r2, [r5, #4]
 8000c4c:	a803      	add	r0, sp, #12
 8000c4e:	f000 ff19 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_WriteString("ms", Font_11x18, White);
 8000c52:	2301      	movs	r3, #1
 8000c54:	6829      	ldr	r1, [r5, #0]
 8000c56:	686a      	ldr	r2, [r5, #4]
 8000c58:	483d      	ldr	r0, [pc, #244]	; (8000d50 <Page1_Screen1_Loop+0x2ec>)
 8000c5a:	f000 ff13 	bl	8001a84 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8000c5e:	f000 fe17 	bl	8001890 <ssd1306_UpdateScreen>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c62:	2090      	movs	r0, #144	; 0x90
 8000c64:	2201      	movs	r2, #1
 8000c66:	2102      	movs	r1, #2
 8000c68:	05c0      	lsls	r0, r0, #23
 8000c6a:	f001 fac3 	bl	80021f4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Short_Pulse_Duration());
 8000c6e:	f000 fd43 	bl	80016f8 <Get_Short_Pulse_Duration>
 8000c72:	f000 ffb5 	bl	8001be0 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c76:	2090      	movs	r0, #144	; 0x90
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	05c0      	lsls	r0, r0, #23
 8000c7e:	f001 fab9 	bl	80021f4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Main_Pulse_Duration());
 8000c82:	f000 fd23 	bl	80016cc <Get_Main_Pulse_Duration>
 8000c86:	f000 ffab 	bl	8001be0 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c8a:	2090      	movs	r0, #144	; 0x90
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2102      	movs	r1, #2
 8000c90:	05c0      	lsls	r0, r0, #23
 8000c92:	f001 faaf 	bl	80021f4 <HAL_GPIO_WritePin>
	    HAL_Delay(Get_Main_Pulse_Duration());
 8000c96:	f000 fd19 	bl	80016cc <Get_Main_Pulse_Duration>
 8000c9a:	f000 ffa1 	bl	8001be0 <HAL_Delay>
	    HAL_GPIO_WritePin(Gate_Driver_GPIO_Port, Gate_Driver_Pin,
 8000c9e:	2090      	movs	r0, #144	; 0x90
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	f001 faa5 	bl	80021f4 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f000 ff98 	bl	8001be0 <HAL_Delay>
	    Increment_Weld_Count();
 8000cb0:	f000 fd6c 	bl	800178c <Increment_Weld_Count>
	    while (Get_Auto_Puse_In_Status())
 8000cb4:	f000 fd8e 	bl	80017d4 <Get_Auto_Puse_In_Status>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d11e      	bne.n	8000cfa <Page1_Screen1_Loop+0x296>
	    while (Get_Foot_Switch_Status())
 8000cbc:	f000 fd78 	bl	80017b0 <Get_Foot_Switch_Status>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d100      	bne.n	8000cc6 <Page1_Screen1_Loop+0x262>
 8000cc4:	e72d      	b.n	8000b22 <Page1_Screen1_Loop+0xbe>
		ssd1306_Fill(Black);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fdd4 	bl	8001874 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	0008      	movs	r0, r1
 8000cd0:	f000 feec 	bl	8001aac <ssd1306_SetCursor>
		ssd1306_WriteString("Release", Font_7x10, White);
 8000cd4:	6862      	ldr	r2, [r4, #4]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	6821      	ldr	r1, [r4, #0]
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <Page1_Screen1_Loop+0x310>)
 8000cdc:	f000 fed2 	bl	8001a84 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fee2 	bl	8001aac <ssd1306_SetCursor>
		ssd1306_WriteString("Foot SW", Font_7x10, White);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	6821      	ldr	r1, [r4, #0]
 8000cec:	6862      	ldr	r2, [r4, #4]
 8000cee:	4822      	ldr	r0, [pc, #136]	; (8000d78 <Page1_Screen1_Loop+0x314>)
 8000cf0:	f000 fec8 	bl	8001a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000cf4:	f000 fdcc 	bl	8001890 <ssd1306_UpdateScreen>
 8000cf8:	e7e0      	b.n	8000cbc <Page1_Screen1_Loop+0x258>
		ssd1306_Fill(Black);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fdba 	bl	8001874 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	0008      	movs	r0, r1
 8000d04:	f000 fed2 	bl	8001aac <ssd1306_SetCursor>
		ssd1306_WriteString("Disconnect", Font_7x10, White);
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	6821      	ldr	r1, [r4, #0]
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <Page1_Screen1_Loop+0x318>)
 8000d10:	f000 feb8 	bl	8001a84 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 15);
 8000d14:	210f      	movs	r1, #15
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 fec8 	bl	8001aac <ssd1306_SetCursor>
		ssd1306_WriteString("Now", Font_7x10, White);
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	6821      	ldr	r1, [r4, #0]
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	4817      	ldr	r0, [pc, #92]	; (8000d80 <Page1_Screen1_Loop+0x31c>)
 8000d24:	f000 feae 	bl	8001a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d28:	f000 fdb2 	bl	8001890 <ssd1306_UpdateScreen>
 8000d2c:	e7c2      	b.n	8000cb4 <Page1_Screen1_Loop+0x250>
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <Page1_Screen1_Loop+0x320>)
 8000d30:	e762      	b.n	8000bf8 <Page1_Screen1_Loop+0x194>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000484 	.word	0x20000484
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	08003dbe 	.word	0x08003dbe
 8000d44:	08003dca 	.word	0x08003dca
 8000d48:	08003dd8 	.word	0x08003dd8
 8000d4c:	08003de1 	.word	0x08003de1
 8000d50:	08003d9c 	.word	0x08003d9c
 8000d54:	08003def 	.word	0x08003def
 8000d58:	08003e07 	.word	0x08003e07
 8000d5c:	08003df8 	.word	0x08003df8
 8000d60:	08003e31 	.word	0x08003e31
 8000d64:	08003e0d 	.word	0x08003e0d
 8000d68:	08003e67 	.word	0x08003e67
 8000d6c:	08003e03 	.word	0x08003e03
 8000d70:	08003d95 	.word	0x08003d95
 8000d74:	08003dae 	.word	0x08003dae
 8000d78:	08003db6 	.word	0x08003db6
 8000d7c:	08003d9f 	.word	0x08003d9f
 8000d80:	08003daa 	.word	0x08003daa
 8000d84:	08003e63 	.word	0x08003e63

08000d88 <Page1_Screen3_Loop>:
    Menu_Change_Page(2, 1); // change page to page2 screen1
    return 0; // exit loop
    }

uint8_t Page1_Screen3_Loop(Menu_Event_t *event)
    {
 8000d88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000d8a:	0005      	movs	r5, r0
    if (event->Enter_Button_Clicks == 1)
	{
	xreturn = 0; // exit loop
	}

    Set_Batt_Alarm(Get_Batt_Alarm() + (event->Encoder_Count * 10));
 8000d8c:	260a      	movs	r6, #10
    if (event->Enter_Button_Clicks == 1)
 8000d8e:	7884      	ldrb	r4, [r0, #2]
    Set_Batt_Alarm(Get_Batt_Alarm() + (event->Encoder_Count * 10));
 8000d90:	f000 fcd0 	bl	8001734 <Get_Batt_Alarm>
    if (event->Enter_Button_Clicks == 1)
 8000d94:	3c01      	subs	r4, #1
 8000d96:	1e63      	subs	r3, r4, #1
 8000d98:	419c      	sbcs	r4, r3
    Set_Batt_Alarm(Get_Batt_Alarm() + (event->Encoder_Count * 10));
 8000d9a:	882b      	ldrh	r3, [r5, #0]
    uint8_t xreturn = 1;
 8000d9c:	b2e4      	uxtb	r4, r4
    Set_Batt_Alarm(Get_Batt_Alarm() + (event->Encoder_Count * 10));
 8000d9e:	4373      	muls	r3, r6
 8000da0:	18c0      	adds	r0, r0, r3
 8000da2:	b200      	sxth	r0, r0
 8000da4:	f000 fcae 	bl	8001704 <Set_Batt_Alarm>

    ssd1306_Fill(Black);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 fd63 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	0008      	movs	r0, r1
 8000db2:	f000 fe7b 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Batt_Alarm, Font_11x18, White);
 8000db6:	4d10      	ldr	r5, [pc, #64]	; (8000df8 <Page1_Screen3_Loop+0x70>)
 8000db8:	2301      	movs	r3, #1
 8000dba:	686a      	ldr	r2, [r5, #4]
 8000dbc:	6829      	ldr	r1, [r5, #0]
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <Page1_Screen3_Loop+0x74>)
 8000dc0:	f000 fe60 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000dc4:	2114      	movs	r1, #20
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 fe70 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Batt_Alarm(), temp, 10);
 8000dcc:	f000 fcb2 	bl	8001734 <Get_Batt_Alarm>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	a901      	add	r1, sp, #4
 8000dd4:	f001 fd08 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000dd8:	2301      	movs	r3, #1
 8000dda:	6829      	ldr	r1, [r5, #0]
 8000ddc:	686a      	ldr	r2, [r5, #4]
 8000dde:	a801      	add	r0, sp, #4
 8000de0:	f000 fe50 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString(" mV", Font_11x18, White);
 8000de4:	cd06      	ldmia	r5!, {r1, r2}
 8000de6:	2301      	movs	r3, #1
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <Page1_Screen3_Loop+0x78>)
 8000dea:	f000 fe4b 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000dee:	f000 fd4f 	bl	8001890 <ssd1306_UpdateScreen>

    return xreturn;
    }
 8000df2:	0020      	movs	r0, r4
 8000df4:	b004      	add	sp, #16
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	08003e47 	.word	0x08003e47
 8000e00:	08003e06 	.word	0x08003e06

08000e04 <Page1_Screen4_Loop>:

uint8_t Page1_Screen4_Loop(Menu_Event_t *event)
    {
 8000e04:	b530      	push	{r4, r5, lr}
 8000e06:	0004      	movs	r4, r0
 8000e08:	b085      	sub	sp, #20

    uint8_t xreturn = 1;
    char temp[10];

    Set_Short_Pulse_Duration(
	    Get_Short_Pulse_Duration() + (event->Encoder_Count));
 8000e0a:	f000 fc75 	bl	80016f8 <Get_Short_Pulse_Duration>
 8000e0e:	8823      	ldrh	r3, [r4, #0]
 8000e10:	18c0      	adds	r0, r0, r3
    Set_Short_Pulse_Duration(
 8000e12:	b200      	sxth	r0, r0
 8000e14:	f000 fc60 	bl	80016d8 <Set_Short_Pulse_Duration>
    if (event->Enter_Button_Clicks == 1)
	{
	xreturn = 0; // exit loop
	}

    ssd1306_Fill(Black);
 8000e18:	2000      	movs	r0, #0
    if (event->Enter_Button_Clicks == 1)
 8000e1a:	78a4      	ldrb	r4, [r4, #2]
    ssd1306_Fill(Black);
 8000e1c:	f000 fd2a 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000e20:	2100      	movs	r1, #0
    if (event->Enter_Button_Clicks == 1)
 8000e22:	3c01      	subs	r4, #1
 8000e24:	1e63      	subs	r3, r4, #1
 8000e26:	419c      	sbcs	r4, r3
    ssd1306_SetCursor(0, 0);
 8000e28:	0008      	movs	r0, r1
 8000e2a:	f000 fe3f 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Shrt_Pulse, Font_11x18, White);
 8000e2e:	4d11      	ldr	r5, [pc, #68]	; (8000e74 <Page1_Screen4_Loop+0x70>)
 8000e30:	2301      	movs	r3, #1
 8000e32:	686a      	ldr	r2, [r5, #4]
 8000e34:	6829      	ldr	r1, [r5, #0]
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <Page1_Screen4_Loop+0x74>)
 8000e38:	f000 fe24 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000e3c:	2114      	movs	r1, #20
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fe34 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Short_Pulse_Duration(), temp, 10);
 8000e44:	f000 fc58 	bl	80016f8 <Get_Short_Pulse_Duration>
 8000e48:	a901      	add	r1, sp, #4
 8000e4a:	220a      	movs	r2, #10
 8000e4c:	f001 fccc 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_11x18, White);
 8000e50:	2301      	movs	r3, #1
 8000e52:	6829      	ldr	r1, [r5, #0]
 8000e54:	686a      	ldr	r2, [r5, #4]
 8000e56:	a801      	add	r0, sp, #4
 8000e58:	f000 fe14 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000e5c:	cd06      	ldmia	r5!, {r1, r2}
 8000e5e:	2301      	movs	r3, #1
    uint8_t xreturn = 1;
 8000e60:	b2e4      	uxtb	r4, r4
    ssd1306_WriteString(" ms ", Font_11x18, White);
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <Page1_Screen4_Loop+0x78>)
 8000e64:	f000 fe0e 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000e68:	f000 fd12 	bl	8001890 <ssd1306_UpdateScreen>

    return xreturn;
    }
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	b005      	add	sp, #20
 8000e70:	bd30      	pop	{r4, r5, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000000 	.word	0x20000000
 8000e78:	08003e70 	.word	0x08003e70
 8000e7c:	08003e0a 	.word	0x08003e0a

08000e80 <Page1_Screen5_Loop>:

uint8_t Page1_Screen5_Loop(Menu_Event_t *event)
    {
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	0005      	movs	r5, r0

    uint8_t xreturn = 1;

    ssd1306_Fill(Black);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fcf5 	bl	8001874 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	0008      	movs	r0, r1
 8000e8e:	f000 fe0d 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Reset, Font_11x18, White);
 8000e92:	4c20      	ldr	r4, [pc, #128]	; (8000f14 <Page1_Screen5_Loop+0x94>)
 8000e94:	2301      	movs	r3, #1
 8000e96:	6821      	ldr	r1, [r4, #0]
 8000e98:	6862      	ldr	r2, [r4, #4]
 8000e9a:	481f      	ldr	r0, [pc, #124]	; (8000f18 <Page1_Screen5_Loop+0x98>)
 8000e9c:	f000 fdf2 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString("?", Font_11x18, White);
 8000ea0:	cc06      	ldmia	r4!, {r1, r2}
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <Page1_Screen5_Loop+0x9c>)
 8000ea6:	f000 fded 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000eaa:	2114      	movs	r1, #20
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fdfd 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("long press", Font_7x10, White);
 8000eb2:	4c1b      	ldr	r4, [pc, #108]	; (8000f20 <Page1_Screen5_Loop+0xa0>)
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	6862      	ldr	r2, [r4, #4]
 8000eb8:	6821      	ldr	r1, [r4, #0]
 8000eba:	481a      	ldr	r0, [pc, #104]	; (8000f24 <Page1_Screen5_Loop+0xa4>)
 8000ebc:	f000 fde2 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 35);
 8000ec0:	2123      	movs	r1, #35	; 0x23
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 fdf2 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString("to RESET", Font_7x10, White);
 8000ec8:	2301      	movs	r3, #1
 8000eca:	6821      	ldr	r1, [r4, #0]
 8000ecc:	6862      	ldr	r2, [r4, #4]
 8000ece:	4816      	ldr	r0, [pc, #88]	; (8000f28 <Page1_Screen5_Loop+0xa8>)
 8000ed0:	f000 fdd8 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000ed4:	f000 fcdc 	bl	8001890 <ssd1306_UpdateScreen>

    if (event->Enter_Button_Clicks == 1)
 8000ed8:	78ab      	ldrb	r3, [r5, #2]
	{
	xreturn = 0; // exit loop
 8000eda:	2500      	movs	r5, #0
    if (event->Enter_Button_Clicks == 1)
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d017      	beq.n	8000f10 <Page1_Screen5_Loop+0x90>
    uint8_t xreturn = 1;
 8000ee0:	3501      	adds	r5, #1
	}

    if (event->Enter_Button_Clicks == 255) //255 is for long press
 8000ee2:	2bff      	cmp	r3, #255	; 0xff
 8000ee4:	d114      	bne.n	8000f10 <Page1_Screen5_Loop+0x90>
	{
	xreturn = 0; // exit loop
	ssd1306_Fill(Black);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 fcc4 	bl	8001874 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000eec:	2100      	movs	r1, #0
 8000eee:	0008      	movs	r0, r1
 8000ef0:	f000 fddc 	bl	8001aac <ssd1306_SetCursor>
	ssd1306_WriteString("RESETTING..", Font_7x10, White);
 8000ef4:	cc06      	ldmia	r4!, {r1, r2}
 8000ef6:	002b      	movs	r3, r5
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <Page1_Screen5_Loop+0xac>)
 8000efa:	f000 fdc3 	bl	8001a84 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000efe:	f000 fcc7 	bl	8001890 <ssd1306_UpdateScreen>
	HAL_Delay(2000);
 8000f02:	20fa      	movs	r0, #250	; 0xfa
 8000f04:	00c0      	lsls	r0, r0, #3
 8000f06:	f000 fe6b 	bl	8001be0 <HAL_Delay>
	xreturn = 0; // exit loop
 8000f0a:	2500      	movs	r5, #0
	Reset_Welder_Data();
 8000f0c:	f000 fc70 	bl	80017f0 <Reset_Welder_Data>
	}

    return xreturn;
    }
 8000f10:	0028      	movs	r0, r5
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	08003e6a 	.word	0x08003e6a
 8000f1c:	08003e0f 	.word	0x08003e0f
 8000f20:	20000008 	.word	0x20000008
 8000f24:	08003e11 	.word	0x08003e11
 8000f28:	08003e1c 	.word	0x08003e1c
 8000f2c:	08003e25 	.word	0x08003e25

08000f30 <Enter_Page1_Screen>:
uint8_t Enter_Page1_Screen(uint8_t screen, Menu_Event_t *event)
    {

    uint8_t xreturn = 0;

    switch (screen)
 8000f30:	1e43      	subs	r3, r0, #1
    {
 8000f32:	b510      	push	{r4, lr}
    uint8_t xreturn = 0;
 8000f34:	2000      	movs	r0, #0
    switch (screen)
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d808      	bhi.n	8000f4c <Enter_Page1_Screen+0x1c>
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff f8e4 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f40:	110d0703 	.word	0x110d0703
 8000f44:	15          	.byte	0x15
 8000f45:	00          	.byte	0x00
	{
    case 1:
	xreturn = Page1_Screen1_Loop(event);
 8000f46:	0008      	movs	r0, r1
 8000f48:	f7ff fd8c 	bl	8000a64 <Page1_Screen1_Loop>
	xreturn = Page1_Screen5_Loop(event);
	break;
	}

    return xreturn;
    }
 8000f4c:	bd10      	pop	{r4, pc}
    Menu_Change_Page(2, 1); // change page to page2 screen1
 8000f4e:	2002      	movs	r0, #2
 8000f50:	2101      	movs	r1, #1
 8000f52:	f7ff fb91 	bl	8000678 <Menu_Change_Page>
	xreturn = Page1_Screen2_Loop(event);
 8000f56:	2000      	movs	r0, #0
	break;
 8000f58:	e7f8      	b.n	8000f4c <Enter_Page1_Screen+0x1c>
	xreturn = Page1_Screen3_Loop(event);
 8000f5a:	0008      	movs	r0, r1
 8000f5c:	f7ff ff14 	bl	8000d88 <Page1_Screen3_Loop>
	break;
 8000f60:	e7f4      	b.n	8000f4c <Enter_Page1_Screen+0x1c>
	xreturn = Page1_Screen4_Loop(event);
 8000f62:	0008      	movs	r0, r1
 8000f64:	f7ff ff4e 	bl	8000e04 <Page1_Screen4_Loop>
	break;
 8000f68:	e7f0      	b.n	8000f4c <Enter_Page1_Screen+0x1c>
	xreturn = Page1_Screen5_Loop(event);
 8000f6a:	0008      	movs	r0, r1
 8000f6c:	f7ff ff88 	bl	8000e80 <Page1_Screen5_Loop>
	break;
 8000f70:	e7ec      	b.n	8000f4c <Enter_Page1_Screen+0x1c>
	...

08000f74 <Show_Page2_Comman>:
#include "menu_strings.h"
#include "ssd1306.h"
#include "spot_welder_main.h"

void Show_Page2_Comman()
    {
 8000f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];

    ssd1306_Fill(Black);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fc7c 	bl	8001874 <ssd1306_Fill>

    ssd1306_SetCursor(0, 5);
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 fd94 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, White);
 8000f84:	4c2e      	ldr	r4, [pc, #184]	; (8001040 <Show_Page2_Comman+0xcc>)
 8000f86:	2301      	movs	r3, #1
 8000f88:	6862      	ldr	r2, [r4, #4]
 8000f8a:	6821      	ldr	r1, [r4, #0]
 8000f8c:	482d      	ldr	r0, [pc, #180]	; (8001044 <Show_Page2_Comman+0xd0>)
 8000f8e:	f000 fd79 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 20);
 8000f92:	2114      	movs	r1, #20
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 fd89 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_7x10, White);
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	6862      	ldr	r2, [r4, #4]
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <Show_Page2_Comman+0xd4>)
 8000fa2:	f000 fd6f 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString(":", Font_7x10, White);
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	6862      	ldr	r2, [r4, #4]
 8000faa:	6821      	ldr	r1, [r4, #0]
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <Show_Page2_Comman+0xd8>)
 8000fae:	f000 fd69 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 8000fb2:	2114      	movs	r1, #20
 8000fb4:	2050      	movs	r0, #80	; 0x50
 8000fb6:	f000 fd79 	bl	8001aac <ssd1306_SetCursor>
    if (Get_Auto_Weld_Status())
 8000fba:	f000 fbe1 	bl	8001780 <Get_Auto_Weld_Status>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	6821      	ldr	r1, [r4, #0]
 8000fc2:	6862      	ldr	r2, [r4, #4]
    if (Get_Auto_Weld_Status())
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d038      	beq.n	800103a <Show_Page2_Comman+0xc6>
	ssd1306_WriteString(STR_ON, Font_7x10, White);
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <Show_Page2_Comman+0xdc>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 8000fca:	f000 fd5b 	bl	8001a84 <ssd1306_WriteString>
	}

    ssd1306_SetCursor(0, 35);
 8000fce:	2123      	movs	r1, #35	; 0x23
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 fd6b 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, White);
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	6862      	ldr	r2, [r4, #4]
 8000fda:	6821      	ldr	r1, [r4, #0]
 8000fdc:	481d      	ldr	r0, [pc, #116]	; (8001054 <Show_Page2_Comman+0xe0>)
 8000fde:	f000 fd51 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 8000fe2:	2123      	movs	r1, #35	; 0x23
 8000fe4:	2050      	movs	r0, #80	; 0x50
 8000fe6:	f000 fd61 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 8000fea:	f000 fb59 	bl	80016a0 <Get_Auto_Pulse_Delay>
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	f001 fbf9 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 8000ff6:	6862      	ldr	r2, [r4, #4]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	6821      	ldr	r1, [r4, #0]
 8000ffc:	a801      	add	r0, sp, #4
 8000ffe:	f000 fd41 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 50);
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	2000      	movs	r0, #0
 8001006:	f000 fd51 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, White);
 800100a:	2301      	movs	r3, #1
 800100c:	6862      	ldr	r2, [r4, #4]
 800100e:	6821      	ldr	r1, [r4, #0]
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <Show_Page2_Comman+0xe4>)
 8001012:	f000 fd37 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8001016:	2132      	movs	r1, #50	; 0x32
 8001018:	2050      	movs	r0, #80	; 0x50
 800101a:	f000 fd47 	bl	8001aac <ssd1306_SetCursor>
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 800101e:	f000 fb55 	bl	80016cc <Get_Main_Pulse_Duration>
 8001022:	a901      	add	r1, sp, #4
 8001024:	220a      	movs	r2, #10
 8001026:	f001 fbdf 	bl	80027e8 <itoa>
    ssd1306_WriteString(temp, Font_7x10, White);
 800102a:	cc06      	ldmia	r4!, {r1, r2}
 800102c:	2301      	movs	r3, #1
 800102e:	a801      	add	r0, sp, #4
 8001030:	f000 fd28 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001034:	f000 fc2c 	bl	8001890 <ssd1306_UpdateScreen>
    }
 8001038:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	ssd1306_WriteString(STR_OFF, Font_7x10, White);
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <Show_Page2_Comman+0xe8>)
 800103c:	e7c5      	b.n	8000fca <Show_Page2_Comman+0x56>
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	08003e42 	.word	0x08003e42
 8001048:	08003e37 	.word	0x08003e37
 800104c:	08003d9a 	.word	0x08003d9a
 8001050:	08003e67 	.word	0x08003e67
 8001054:	08003e52 	.word	0x08003e52
 8001058:	08003e59 	.word	0x08003e59
 800105c:	08003e63 	.word	0x08003e63

08001060 <Show_Page2_Screen1>:

void Show_Page2_Screen1()
    {
 8001060:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 5);
 8001062:	2105      	movs	r1, #5
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fd21 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Back, Font_7x10, Black);
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <Show_Page2_Screen1+0x20>)
 800106c:	2300      	movs	r3, #0
 800106e:	6811      	ldr	r1, [r2, #0]
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <Show_Page2_Screen1+0x24>)
 8001072:	6852      	ldr	r2, [r2, #4]
 8001074:	f000 fd06 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001078:	f000 fc0a 	bl	8001890 <ssd1306_UpdateScreen>
    }
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000008 	.word	0x20000008
 8001084:	08003e42 	.word	0x08003e42

08001088 <Show_Page2_Screen2>:

void Show_Page2_Screen2()
    {
 8001088:	b510      	push	{r4, lr}

    ssd1306_SetCursor(0, 20);
 800108a:	2114      	movs	r1, #20
 800108c:	2000      	movs	r0, #0
 800108e:	f000 fd0d 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Auto_Pulse, Font_7x10, Black);
 8001092:	4c10      	ldr	r4, [pc, #64]	; (80010d4 <Show_Page2_Screen2+0x4c>)
 8001094:	2300      	movs	r3, #0
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	6862      	ldr	r2, [r4, #4]
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <Show_Page2_Screen2+0x50>)
 800109c:	f000 fcf2 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_WriteString(":", Font_7x10, Black);
 80010a0:	2300      	movs	r3, #0
 80010a2:	6862      	ldr	r2, [r4, #4]
 80010a4:	6821      	ldr	r1, [r4, #0]
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <Show_Page2_Screen2+0x54>)
 80010a8:	f000 fcec 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 20);
 80010ac:	2114      	movs	r1, #20
 80010ae:	2050      	movs	r0, #80	; 0x50
 80010b0:	f000 fcfc 	bl	8001aac <ssd1306_SetCursor>
    if (Get_Auto_Weld_Status())
 80010b4:	f000 fb64 	bl	8001780 <Get_Auto_Weld_Status>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d007      	beq.n	80010cc <Show_Page2_Screen2+0x44>
	{
	ssd1306_WriteString(STR_ON, Font_7x10, Black);
 80010bc:	cc06      	ldmia	r4!, {r1, r2}
 80010be:	2300      	movs	r3, #0
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <Show_Page2_Screen2+0x58>)
	}
    else
	{
	ssd1306_WriteString(STR_OFF, Font_7x10, Black);
 80010c2:	f000 fcdf 	bl	8001a84 <ssd1306_WriteString>
	}
    ssd1306_UpdateScreen();
 80010c6:	f000 fbe3 	bl	8001890 <ssd1306_UpdateScreen>
    }
 80010ca:	bd10      	pop	{r4, pc}
	ssd1306_WriteString(STR_OFF, Font_7x10, Black);
 80010cc:	cc06      	ldmia	r4!, {r1, r2}
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <Show_Page2_Screen2+0x5c>)
 80010d0:	e7f7      	b.n	80010c2 <Show_Page2_Screen2+0x3a>
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000008 	.word	0x20000008
 80010d8:	08003e37 	.word	0x08003e37
 80010dc:	08003d9a 	.word	0x08003d9a
 80010e0:	08003e67 	.word	0x08003e67
 80010e4:	08003e63 	.word	0x08003e63

080010e8 <Show_Page2_Screen3>:

void Show_Page2_Screen3()
    {
 80010e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Auto_Pulse_Delay(), temp, 10);
 80010ea:	f000 fad9 	bl	80016a0 <Get_Auto_Pulse_Delay>
 80010ee:	220a      	movs	r2, #10
 80010f0:	a901      	add	r1, sp, #4
 80010f2:	f001 fb79 	bl	80027e8 <itoa>

    ssd1306_SetCursor(0, 35);
 80010f6:	2123      	movs	r1, #35	; 0x23
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 fcd7 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Delay, Font_7x10, Black);
 80010fe:	4c09      	ldr	r4, [pc, #36]	; (8001124 <Show_Page2_Screen3+0x3c>)
 8001100:	2300      	movs	r3, #0
 8001102:	6821      	ldr	r1, [r4, #0]
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <Show_Page2_Screen3+0x40>)
 8001108:	f000 fcbc 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 35);
 800110c:	2123      	movs	r1, #35	; 0x23
 800110e:	2050      	movs	r0, #80	; 0x50
 8001110:	f000 fccc 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8001114:	cc06      	ldmia	r4!, {r1, r2}
 8001116:	2300      	movs	r3, #0
 8001118:	a801      	add	r0, sp, #4
 800111a:	f000 fcb3 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800111e:	f000 fbb7 	bl	8001890 <ssd1306_UpdateScreen>

    }
 8001122:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001124:	20000008 	.word	0x20000008
 8001128:	08003e52 	.word	0x08003e52

0800112c <Show_Page2_Screen4>:

void Show_Page2_Screen4()
    {
 800112c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char temp[10];
    itoa(Get_Main_Pulse_Duration(), temp, 10);
 800112e:	f000 facd 	bl	80016cc <Get_Main_Pulse_Duration>
 8001132:	220a      	movs	r2, #10
 8001134:	a901      	add	r1, sp, #4
 8001136:	f001 fb57 	bl	80027e8 <itoa>

    ssd1306_SetCursor(0, 50);
 800113a:	2132      	movs	r1, #50	; 0x32
 800113c:	2000      	movs	r0, #0
 800113e:	f000 fcb5 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(STR_Duration, Font_7x10, Black);
 8001142:	4c09      	ldr	r4, [pc, #36]	; (8001168 <Show_Page2_Screen4+0x3c>)
 8001144:	2300      	movs	r3, #0
 8001146:	6821      	ldr	r1, [r4, #0]
 8001148:	6862      	ldr	r2, [r4, #4]
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <Show_Page2_Screen4+0x40>)
 800114c:	f000 fc9a 	bl	8001a84 <ssd1306_WriteString>
    ssd1306_SetCursor(80, 50);
 8001150:	2132      	movs	r1, #50	; 0x32
 8001152:	2050      	movs	r0, #80	; 0x50
 8001154:	f000 fcaa 	bl	8001aac <ssd1306_SetCursor>
    ssd1306_WriteString(temp, Font_7x10, Black);
 8001158:	cc06      	ldmia	r4!, {r1, r2}
 800115a:	2300      	movs	r3, #0
 800115c:	a801      	add	r0, sp, #4
 800115e:	f000 fc91 	bl	8001a84 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001162:	f000 fb95 	bl	8001890 <ssd1306_UpdateScreen>
    }
 8001166:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001168:	20000008 	.word	0x20000008
 800116c:	08003e59 	.word	0x08003e59

08001170 <Show_Page2_Screen>:

void Show_Page2_Screen(uint8_t screen)
    {

    switch (screen)
 8001170:	3801      	subs	r0, #1
    {
 8001172:	b510      	push	{r4, lr}
    switch (screen)
 8001174:	2803      	cmp	r0, #3
 8001176:	d807      	bhi.n	8001188 <Show_Page2_Screen+0x18>
 8001178:	f7fe ffc6 	bl	8000108 <__gnu_thumb1_case_uqi>
 800117c:	110c0702 	.word	0x110c0702
	{
    break;
case 1:
    Show_Page2_Comman();
 8001180:	f7ff fef8 	bl	8000f74 <Show_Page2_Comman>
    Show_Page2_Screen1();
 8001184:	f7ff ff6c 	bl	8001060 <Show_Page2_Screen1>
case 4:
    Show_Page2_Comman();
    Show_Page2_Screen4();
    break;
    }
}
 8001188:	bd10      	pop	{r4, pc}
    Show_Page2_Comman();
 800118a:	f7ff fef3 	bl	8000f74 <Show_Page2_Comman>
    Show_Page2_Screen2();
 800118e:	f7ff ff7b 	bl	8001088 <Show_Page2_Screen2>
    break;
 8001192:	e7f9      	b.n	8001188 <Show_Page2_Screen+0x18>
    Show_Page2_Comman();
 8001194:	f7ff feee 	bl	8000f74 <Show_Page2_Comman>
    Show_Page2_Screen3();
 8001198:	f7ff ffa6 	bl	80010e8 <Show_Page2_Screen3>
    break;
 800119c:	e7f4      	b.n	8001188 <Show_Page2_Screen+0x18>
    Show_Page2_Comman();
 800119e:	f7ff fee9 	bl	8000f74 <Show_Page2_Comman>
    Show_Page2_Screen4();
 80011a2:	f7ff ffc3 	bl	800112c <Show_Page2_Screen4>
}
 80011a6:	e7ef      	b.n	8001188 <Show_Page2_Screen+0x18>

080011a8 <Page2_Screen2_Loop>:
Menu_Change_Page(1, 2); // change page to page1 screen2
return 0; // exit loop
}

uint8_t Page2_Screen2_Loop(Menu_Event_t *event)
{
 80011a8:	b510      	push	{r4, lr}

if (Get_Auto_Weld_Status())
 80011aa:	f000 fae9 	bl	8001780 <Get_Auto_Weld_Status>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d007      	beq.n	80011c2 <Page2_Screen2_Loop+0x1a>
    {
    Disable_Auto_Weld();
 80011b2:	f000 fad1 	bl	8001758 <Disable_Auto_Weld>
else
    {
    Enable_Auto_Weld();
    }

Show_Page2_Comman();
 80011b6:	f7ff fedd 	bl	8000f74 <Show_Page2_Comman>
Show_Page2_Screen2();
 80011ba:	f7ff ff65 	bl	8001088 <Show_Page2_Screen2>

return 0; // exit loop

}
 80011be:	2000      	movs	r0, #0
 80011c0:	bd10      	pop	{r4, pc}
    Enable_Auto_Weld();
 80011c2:	f000 fad3 	bl	800176c <Enable_Auto_Weld>
 80011c6:	e7f6      	b.n	80011b6 <Page2_Screen2_Loop+0xe>

080011c8 <Page2_Screen3_Loop>:

uint8_t Page2_Screen3_Loop(Menu_Event_t *event)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	0005      	movs	r5, r0

uint8_t xreturn = 1;

Set_Auto_Pulse_Delay(event->Encoder_Count + Get_Auto_Pulse_Delay());
 80011cc:	8804      	ldrh	r4, [r0, #0]
 80011ce:	f000 fa67 	bl	80016a0 <Get_Auto_Pulse_Delay>
 80011d2:	1820      	adds	r0, r4, r0
 80011d4:	b200      	sxth	r0, r0
 80011d6:	f000 fa4d 	bl	8001674 <Set_Auto_Pulse_Delay>

if (event->Enter_Button_Clicks == 1)
 80011da:	78ac      	ldrb	r4, [r5, #2]
 80011dc:	3c01      	subs	r4, #1
 80011de:	1e63      	subs	r3, r4, #1
 80011e0:	419c      	sbcs	r4, r3
uint8_t xreturn = 1;
 80011e2:	b2e4      	uxtb	r4, r4
    {
    xreturn = 0;  // exit loop
    }

Show_Page2_Screen3();
 80011e4:	f7ff ff80 	bl	80010e8 <Show_Page2_Screen3>

return xreturn;

}
 80011e8:	0020      	movs	r0, r4
 80011ea:	bd70      	pop	{r4, r5, r6, pc}

080011ec <Page2_Screen4_Loop>:

uint8_t Page2_Screen4_Loop(Menu_Event_t *event)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}

uint8_t xreturn = 1;

if (event->Enter_Button_Clicks == 1)
 80011ee:	7884      	ldrb	r4, [r0, #2]
    {
    xreturn = 0;  // exit loop
    }

Set_Main_Pulse_Duration(event->Encoder_Count + Get_Main_Pulse_Duration());
 80011f0:	8805      	ldrh	r5, [r0, #0]
if (event->Enter_Button_Clicks == 1)
 80011f2:	3c01      	subs	r4, #1
Set_Main_Pulse_Duration(event->Encoder_Count + Get_Main_Pulse_Duration());
 80011f4:	f000 fa6a 	bl	80016cc <Get_Main_Pulse_Duration>
if (event->Enter_Button_Clicks == 1)
 80011f8:	1e63      	subs	r3, r4, #1
 80011fa:	419c      	sbcs	r4, r3
Set_Main_Pulse_Duration(event->Encoder_Count + Get_Main_Pulse_Duration());
 80011fc:	1828      	adds	r0, r5, r0
 80011fe:	b200      	sxth	r0, r0
uint8_t xreturn = 1;
 8001200:	b2e4      	uxtb	r4, r4
Set_Main_Pulse_Duration(event->Encoder_Count + Get_Main_Pulse_Duration());
 8001202:	f000 fa53 	bl	80016ac <Set_Main_Pulse_Duration>

Show_Page2_Screen4();
 8001206:	f7ff ff91 	bl	800112c <Show_Page2_Screen4>

return xreturn;
}
 800120a:	0020      	movs	r0, r4
 800120c:	bd70      	pop	{r4, r5, r6, pc}

0800120e <Enter_Page2_Screen>:
uint8_t Enter_Page2_Screen(uint8_t screen, Menu_Event_t *event)
{

uint8_t xreturn = 0;

switch (screen)
 800120e:	1e43      	subs	r3, r0, #1
{
 8001210:	b510      	push	{r4, lr}
uint8_t xreturn = 0;
 8001212:	2000      	movs	r0, #0
switch (screen)
 8001214:	2b03      	cmp	r3, #3
 8001216:	d809      	bhi.n	800122c <Enter_Page2_Screen+0x1e>
 8001218:	0018      	movs	r0, r3
 800121a:	f7fe ff75 	bl	8000108 <__gnu_thumb1_case_uqi>
 800121e:	0802      	.short	0x0802
 8001220:	100c      	.short	0x100c
Menu_Change_Page(1, 2); // change page to page1 screen2
 8001222:	2001      	movs	r0, #1
 8001224:	2102      	movs	r1, #2
 8001226:	f7ff fa27 	bl	8000678 <Menu_Change_Page>
    {
case 1:
    xreturn = Page2_Screen1_Loop(event);
 800122a:	2000      	movs	r0, #0
    xreturn = Page2_Screen4_Loop(event);
    break;
    }

return xreturn;
}
 800122c:	bd10      	pop	{r4, pc}
    xreturn = Page2_Screen2_Loop(event);
 800122e:	0008      	movs	r0, r1
 8001230:	f7ff ffba 	bl	80011a8 <Page2_Screen2_Loop>
    break;
 8001234:	e7fa      	b.n	800122c <Enter_Page2_Screen+0x1e>
    xreturn = Page2_Screen3_Loop(event);
 8001236:	0008      	movs	r0, r1
 8001238:	f7ff ffc6 	bl	80011c8 <Page2_Screen3_Loop>
    break;
 800123c:	e7f6      	b.n	800122c <Enter_Page2_Screen+0x1e>
    xreturn = Page2_Screen4_Loop(event);
 800123e:	0008      	movs	r0, r1
 8001240:	f7ff ffd4 	bl	80011ec <Page2_Screen4_Loop>
    break;
 8001244:	e7f2      	b.n	800122c <Enter_Page2_Screen+0x1e>
	...

08001248 <Encoder_Attach>:
static Encoder_Struct_t *Encoder_Struct_PTR_Array[MAX_ENCODERS];

static uint8_t Attached_Encoders = 0;

uint8_t Encoder_Attach(Encoder_Struct_t *Encoder_Struct_PTR)
    {
 8001248:	b570      	push	{r4, r5, r6, lr}
    //init GPIOs as input

    GPIO_InitTypeDef GPIO_InitStruct;

    if (Attached_Encoders < MAX_ENCODERS)
 800124a:	4d15      	ldr	r5, [pc, #84]	; (80012a0 <Encoder_Attach+0x58>)
    {
 800124c:	0004      	movs	r4, r0
    if (Attached_Encoders < MAX_ENCODERS)
 800124e:	782b      	ldrb	r3, [r5, #0]
    {
 8001250:	b086      	sub	sp, #24
	return (Attached_Encoders - 1); //return encoder ID
	}
    else
	{
	//Error
	return (255); //return error
 8001252:	20ff      	movs	r0, #255	; 0xff
    if (Attached_Encoders < MAX_ENCODERS)
 8001254:	2b01      	cmp	r3, #1
 8001256:	d821      	bhi.n	800129c <Encoder_Attach+0x54>
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 8001258:	8823      	ldrh	r3, [r4, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2600      	movs	r6, #0
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_0;
 800125c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125e:	2301      	movs	r3, #1
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001260:	a901      	add	r1, sp, #4
 8001262:	6860      	ldr	r0, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	9602      	str	r6, [sp, #8]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_0_Port, &GPIO_InitStruct);
 8001268:	f000 ff0e 	bl	8002088 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 800126c:	8863      	ldrh	r3, [r4, #2]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 800126e:	a901      	add	r1, sp, #4
 8001270:	68a0      	ldr	r0, [r4, #8]
	GPIO_InitStruct.Pin = Encoder_Struct_PTR->Encoder_Pin_1;
 8001272:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(Encoder_Struct_PTR->Encoder_Pin_1_Port, &GPIO_InitStruct);
 8001274:	f000 ff08 	bl	8002088 <HAL_GPIO_Init>
	Encoder_Struct_PTR->Encoder_Pin_0_State = HAL_GPIO_ReadPin(
 8001278:	8821      	ldrh	r1, [r4, #0]
	Encoder_Struct_PTR->Encoder_Time_Stamp = 0;
 800127a:	6126      	str	r6, [r4, #16]
	Encoder_Struct_PTR->Encoder_Count = 0;
 800127c:	82a6      	strh	r6, [r4, #20]
	Encoder_Struct_PTR->Encoder_Pin_0_State = HAL_GPIO_ReadPin(
 800127e:	6860      	ldr	r0, [r4, #4]
 8001280:	f000 ffb2 	bl	80021e8 <HAL_GPIO_ReadPin>
	Encoder_Struct_PTR->Encoder_Pin_1_State = HAL_GPIO_ReadPin(
 8001284:	8861      	ldrh	r1, [r4, #2]
	Encoder_Struct_PTR->Encoder_Pin_0_State = HAL_GPIO_ReadPin(
 8001286:	7320      	strb	r0, [r4, #12]
	Encoder_Struct_PTR->Encoder_Pin_1_State = HAL_GPIO_ReadPin(
 8001288:	68a0      	ldr	r0, [r4, #8]
 800128a:	f000 ffad 	bl	80021e8 <HAL_GPIO_ReadPin>
 800128e:	7360      	strb	r0, [r4, #13]
	Encoder_Struct_PTR_Array[Attached_Encoders] = Encoder_Struct_PTR;
 8001290:	7828      	ldrb	r0, [r5, #0]
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <Encoder_Attach+0x5c>)
 8001294:	0082      	lsls	r2, r0, #2
 8001296:	50d4      	str	r4, [r2, r3]
	Attached_Encoders++;
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	702b      	strb	r3, [r5, #0]
	}

    }
 800129c:	b006      	add	sp, #24
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	2000006c 	.word	0x2000006c
 80012a4:	20000070 	.word	0x20000070

080012a8 <Encoder_Scan>:

/* call in millis callback or systick callback */
void Encoder_Scan()
    {
 80012a8:	b570      	push	{r4, r5, r6, lr}

    Encoder_Struct_t *PTR = NULL;

    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 80012aa:	2500      	movs	r5, #0
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <Encoder_Scan+0xb4>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	42ab      	cmp	r3, r5
 80012b2:	d800      	bhi.n	80012b6 <Encoder_Scan+0xe>
		PTR->Encoder_Time_Stamp = HAL_GetTick();
		}
	    }
	}

    }
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
	PTR = Encoder_Struct_PTR_Array[Index];
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <Encoder_Scan+0xb8>)
 80012b8:	00aa      	lsls	r2, r5, #2
 80012ba:	58d4      	ldr	r4, [r2, r3]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 80012bc:	8821      	ldrh	r1, [r4, #0]
 80012be:	6860      	ldr	r0, [r4, #4]
 80012c0:	f000 ff92 	bl	80021e8 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_0_State)
 80012c4:	7b23      	ldrb	r3, [r4, #12]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_0_Port, PTR->Encoder_Pin_0)
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d013      	beq.n	80012f2 <Encoder_Scan+0x4a>
	    PTR->Encoder_Pin_0_State = !PTR->Encoder_Pin_0_State;
 80012ca:	425a      	negs	r2, r3
 80012cc:	415a      	adcs	r2, r3
 80012ce:	7322      	strb	r2, [r4, #12]
	    if (PTR->Encoder_Pin_0_State && !PTR->Encoder_Pin_1_State)
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10e      	bne.n	80012f2 <Encoder_Scan+0x4a>
 80012d4:	7b63      	ldrb	r3, [r4, #13]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <Encoder_Scan+0x4a>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 80012da:	f000 fc7b 	bl	8001bd4 <HAL_GetTick>
 80012de:	6923      	ldr	r3, [r4, #16]
 80012e0:	1ac0      	subs	r0, r0, r3
 80012e2:	280a      	cmp	r0, #10
 80012e4:	d923      	bls.n	800132e <Encoder_Scan+0x86>
		    PTR->Encoder_Count += 1;
 80012e6:	8aa3      	ldrh	r3, [r4, #20]
 80012e8:	3301      	adds	r3, #1
		    PTR->Encoder_Count += 50;
 80012ea:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 80012ec:	f000 fc72 	bl	8001bd4 <HAL_GetTick>
 80012f0:	6120      	str	r0, [r4, #16]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 80012f2:	8861      	ldrh	r1, [r4, #2]
 80012f4:	68a0      	ldr	r0, [r4, #8]
 80012f6:	f000 ff77 	bl	80021e8 <HAL_GPIO_ReadPin>
		!= PTR->Encoder_Pin_1_State)
 80012fa:	7b63      	ldrb	r3, [r4, #13]
	if (HAL_GPIO_ReadPin(PTR->Encoder_Pin_1_Port, PTR->Encoder_Pin_1)
 80012fc:	4298      	cmp	r0, r3
 80012fe:	d013      	beq.n	8001328 <Encoder_Scan+0x80>
	    PTR->Encoder_Pin_1_State = !PTR->Encoder_Pin_1_State;
 8001300:	425a      	negs	r2, r3
 8001302:	415a      	adcs	r2, r3
 8001304:	7362      	strb	r2, [r4, #13]
	    if (PTR->Encoder_Pin_1_State && !PTR->Encoder_Pin_0_State)
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10e      	bne.n	8001328 <Encoder_Scan+0x80>
 800130a:	7b23      	ldrb	r3, [r4, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10b      	bne.n	8001328 <Encoder_Scan+0x80>
		if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 10)
 8001310:	f000 fc60 	bl	8001bd4 <HAL_GetTick>
 8001314:	6923      	ldr	r3, [r4, #16]
 8001316:	1ac0      	subs	r0, r0, r3
 8001318:	280a      	cmp	r0, #10
 800131a:	d913      	bls.n	8001344 <Encoder_Scan+0x9c>
		    PTR->Encoder_Count -= 1;
 800131c:	8aa3      	ldrh	r3, [r4, #20]
 800131e:	3b01      	subs	r3, #1
		    PTR->Encoder_Count -= 50;
 8001320:	82a3      	strh	r3, [r4, #20]
		PTR->Encoder_Time_Stamp = HAL_GetTick();
 8001322:	f000 fc57 	bl	8001bd4 <HAL_GetTick>
 8001326:	6120      	str	r0, [r4, #16]
    for (uint8_t Index = 0; Index < Attached_Encoders; Index++)
 8001328:	3501      	adds	r5, #1
 800132a:	b2ed      	uxtb	r5, r5
 800132c:	e7be      	b.n	80012ac <Encoder_Scan+0x4>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 800132e:	f000 fc51 	bl	8001bd4 <HAL_GetTick>
 8001332:	6923      	ldr	r3, [r4, #16]
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	8aa3      	ldrh	r3, [r4, #20]
 8001338:	2805      	cmp	r0, #5
 800133a:	d901      	bls.n	8001340 <Encoder_Scan+0x98>
		    PTR->Encoder_Count += 10;
 800133c:	330a      	adds	r3, #10
 800133e:	e7d4      	b.n	80012ea <Encoder_Scan+0x42>
		    PTR->Encoder_Count += 50;
 8001340:	3332      	adds	r3, #50	; 0x32
 8001342:	e7d2      	b.n	80012ea <Encoder_Scan+0x42>
		else if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 5)
 8001344:	f000 fc46 	bl	8001bd4 <HAL_GetTick>
 8001348:	6923      	ldr	r3, [r4, #16]
 800134a:	1ac0      	subs	r0, r0, r3
 800134c:	8aa3      	ldrh	r3, [r4, #20]
 800134e:	2805      	cmp	r0, #5
 8001350:	d901      	bls.n	8001356 <Encoder_Scan+0xae>
		    PTR->Encoder_Count -= 10;
 8001352:	3b0a      	subs	r3, #10
 8001354:	e7e4      	b.n	8001320 <Encoder_Scan+0x78>
		    PTR->Encoder_Count -= 50;
 8001356:	3b32      	subs	r3, #50	; 0x32
 8001358:	e7e2      	b.n	8001320 <Encoder_Scan+0x78>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	2000006c 	.word	0x2000006c
 8001360:	20000070 	.word	0x20000070

08001364 <Encoder_Get_Count>:

int16_t Encoder_Get_Count(Encoder_Struct_t *PTR)
    {
 8001364:	b570      	push	{r4, r5, r6, lr}

    int16_t count = 0;
 8001366:	2500      	movs	r5, #0
    {
 8001368:	0004      	movs	r4, r0

    if (PTR != NULL)
 800136a:	42a8      	cmp	r0, r5
 800136c:	d00c      	beq.n	8001388 <Encoder_Get_Count+0x24>
	{

	/*reset encoder count after 500ms of inactivity*/
	if (HAL_GetTick() - PTR->Encoder_Time_Stamp > 500)
 800136e:	f000 fc31 	bl	8001bd4 <HAL_GetTick>
 8001372:	22fa      	movs	r2, #250	; 0xfa
 8001374:	6923      	ldr	r3, [r4, #16]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	1ac0      	subs	r0, r0, r3
 800137a:	002b      	movs	r3, r5
 800137c:	4290      	cmp	r0, r2
 800137e:	d900      	bls.n	8001382 <Encoder_Get_Count+0x1e>
	    {
	    PTR->Encoder_Count = 0;
 8001380:	82a5      	strh	r5, [r4, #20]
	    }

	count = PTR->Encoder_Count;
 8001382:	2214      	movs	r2, #20
 8001384:	5ea5      	ldrsh	r5, [r4, r2]
	PTR->Encoder_Count = 0;
 8001386:	82a3      	strh	r3, [r4, #20]
	//Error
	}

    return count;

    }
 8001388:	0028      	movs	r0, r5
 800138a:	bd70      	pop	{r4, r5, r6, pc}

0800138c <Soft_I2C_SDA_High>:
#include "soft_i2c.h"
#include "delay_us.h"


void Soft_I2C_SDA_High(Soft_I2C_t* i2c_handle)
    {
 800138c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800138e:	2201      	movs	r2, #1
 8001390:	8981      	ldrh	r1, [r0, #12]
 8001392:	6880      	ldr	r0, [r0, #8]
 8001394:	f000 ff2e 	bl	80021f4 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 8001398:	bd10      	pop	{r4, pc}

0800139a <Soft_I2C_SDA_Low>:

void Soft_I2C_SDA_Low(Soft_I2C_t* i2c_handle)
    {
 800139a:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800139c:	2200      	movs	r2, #0
 800139e:	8981      	ldrh	r1, [r0, #12]
 80013a0:	6880      	ldr	r0, [r0, #8]
 80013a2:	f000 ff27 	bl	80021f4 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <Soft_I2C_SDA_Read>:

uint8_t Soft_I2C_SDA_Read(Soft_I2C_t* i2c_handle)
    {
 80013a8:	b510      	push	{r4, lr}
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 80013aa:	8981      	ldrh	r1, [r0, #12]
 80013ac:	6880      	ldr	r0, [r0, #8]
 80013ae:	f000 ff1b 	bl	80021e8 <HAL_GPIO_ReadPin>
    }
 80013b2:	bd10      	pop	{r4, pc}

080013b4 <Soft_I2C_SCL_High>:

void Soft_I2C_SCL_High(Soft_I2C_t* i2c_handle)
    {
 80013b4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013b6:	2201      	movs	r2, #1
 80013b8:	8881      	ldrh	r1, [r0, #4]
 80013ba:	6800      	ldr	r0, [r0, #0]
 80013bc:	f000 ff1a 	bl	80021f4 <HAL_GPIO_WritePin>
	    GPIO_PIN_SET);
    }
 80013c0:	bd10      	pop	{r4, pc}

080013c2 <Soft_I2C_SCL_Low>:

void Soft_I2C_SCL_Low(Soft_I2C_t* i2c_handle)
    {
 80013c2:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013c4:	2200      	movs	r2, #0
 80013c6:	8881      	ldrh	r1, [r0, #4]
 80013c8:	6800      	ldr	r0, [r0, #0]
 80013ca:	f000 ff13 	bl	80021f4 <HAL_GPIO_WritePin>
	    GPIO_PIN_RESET);
    }
 80013ce:	bd10      	pop	{r4, pc}

080013d0 <Soft_I2C_Init>:
    {
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin);
    }

void Soft_I2C_Init(Soft_I2C_t *i2c_handle)
    {
 80013d0:	b510      	push	{r4, lr}
 80013d2:	0004      	movs	r4, r0
 80013d4:	b086      	sub	sp, #24
     __HAL_RCC_GPIOD_CLK_ENABLE();
     __HAL_RCC_GPIOE_CLK_ENABLE();
     __HAL_RCC_GPIOF_CLK_ENABLE();
     */

    Soft_I2C_SDA_High(i2c_handle);
 80013d6:	f7ff ffd9 	bl	800138c <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 80013da:	0020      	movs	r0, r4
 80013dc:	f7ff ffea 	bl	80013b4 <Soft_I2C_SCL_High>

    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
 80013e0:	2311      	movs	r3, #17
 80013e2:	9302      	str	r3, [sp, #8]
    GPIO_Init.Pull  = GPIO_PULLUP;
 80013e4:	3b10      	subs	r3, #16
 80013e6:	9303      	str	r3, [sp, #12]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013e8:	9304      	str	r3, [sp, #16]

    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80013ea:	89a3      	ldrh	r3, [r4, #12]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80013ec:	a901      	add	r1, sp, #4
 80013ee:	68a0      	ldr	r0, [r4, #8]
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 80013f0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 80013f2:	f000 fe49 	bl	8002088 <HAL_GPIO_Init>

    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 80013f6:	88a3      	ldrh	r3, [r4, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 80013f8:	a901      	add	r1, sp, #4
 80013fa:	6820      	ldr	r0, [r4, #0]
    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 80013fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 80013fe:	f000 fe43 	bl	8002088 <HAL_GPIO_Init>
    }
 8001402:	b006      	add	sp, #24
 8001404:	bd10      	pop	{r4, pc}

08001406 <Soft_I2C_Start>:


/*generate start condition */

uint8_t Soft_I2C_Start(Soft_I2C_t* i2c_handle)
    {
 8001406:	b510      	push	{r4, lr}
 8001408:	0004      	movs	r4, r0

    Soft_I2C_SCL_High(i2c_handle);
 800140a:	f7ff ffd3 	bl	80013b4 <Soft_I2C_SCL_High>
    Soft_I2C_SDA_Low(i2c_handle);
 800140e:	0020      	movs	r0, r4
 8001410:	f7ff ffc3 	bl	800139a <Soft_I2C_SDA_Low>
    asm("nop");
 8001414:	46c0      	nop			; (mov r8, r8)

    Soft_I2C_Delay();

    if (Soft_I2C_SDA_Read(i2c_handle))
 8001416:	0020      	movs	r0, r4
 8001418:	f7ff ffc6 	bl	80013a8 <Soft_I2C_SDA_Read>
 800141c:	1e43      	subs	r3, r0, #1
 800141e:	4198      	sbcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}

    return SOFT_I2C_OK;
    }
 8001420:	b2c0      	uxtb	r0, r0
 8001422:	bd10      	pop	{r4, pc}

08001424 <Soft_I2C_Stop>:

/*generate stop condition */

void Soft_I2C_Stop(Soft_I2C_t* i2c_handle)
    {
 8001424:	b510      	push	{r4, lr}
 8001426:	0004      	movs	r4, r0
    Soft_I2C_SCL_Low(i2c_handle);
 8001428:	f7ff ffcb 	bl	80013c2 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 800142c:	0020      	movs	r0, r4
 800142e:	f7ff ffb4 	bl	800139a <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 8001432:	0020      	movs	r0, r4
 8001434:	f7ff ffbe 	bl	80013b4 <Soft_I2C_SCL_High>
    asm("nop");
 8001438:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SDA_High(i2c_handle);
 800143a:	0020      	movs	r0, r4
 800143c:	f7ff ffa6 	bl	800138c <Soft_I2C_SDA_High>
    }
 8001440:	bd10      	pop	{r4, pc}
	...

08001444 <Soft_I2C_Wait_ACK>:

uint8_t Soft_I2C_Wait_ACK(Soft_I2C_t* i2c_handle)
    {
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	0004      	movs	r4, r0

    uint16_t timeOut = 5000;

    Soft_I2C_SCL_Low(i2c_handle);
 8001448:	f7ff ffbb 	bl	80013c2 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 800144c:	0020      	movs	r0, r4
 800144e:	f7ff ff9d 	bl	800138c <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 8001452:	0020      	movs	r0, r4
 8001454:	f7ff ffae 	bl	80013b4 <Soft_I2C_SCL_High>
    asm("nop");
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	4d0a      	ldr	r5, [pc, #40]	; (8001484 <Soft_I2C_Wait_ACK+0x40>)
    Soft_I2C_Delay();

    while (Soft_I2C_SDA_Read(i2c_handle))
 800145c:	0020      	movs	r0, r4
 800145e:	f7ff ffa3 	bl	80013a8 <Soft_I2C_SDA_Read>
 8001462:	1e06      	subs	r6, r0, #0
 8001464:	d103      	bne.n	800146e <Soft_I2C_Wait_ACK+0x2a>
	    Soft_I2C_Stop(i2c_handle);
	    return SOFT_I2C_ERR;
	    }
	}

    Soft_I2C_SCL_Low(i2c_handle);
 8001466:	0020      	movs	r0, r4
 8001468:	f7ff ffab 	bl	80013c2 <Soft_I2C_SCL_Low>

    return SOFT_I2C_OK;
 800146c:	e007      	b.n	800147e <Soft_I2C_Wait_ACK+0x3a>
 800146e:	3d01      	subs	r5, #1
 8001470:	b2ad      	uxth	r5, r5
	if (timeOut == 0)
 8001472:	2d00      	cmp	r5, #0
 8001474:	d1f2      	bne.n	800145c <Soft_I2C_Wait_ACK+0x18>
	    Soft_I2C_Stop(i2c_handle);
 8001476:	0020      	movs	r0, r4
 8001478:	f7ff ffd4 	bl	8001424 <Soft_I2C_Stop>
	    return SOFT_I2C_ERR;
 800147c:	2601      	movs	r6, #1

    }
 800147e:	0030      	movs	r0, r6
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	00001388 	.word	0x00001388

08001488 <Soft_I2C_ACK>:

void Soft_I2C_ACK(Soft_I2C_t* i2c_handle)
    {
 8001488:	b510      	push	{r4, lr}
 800148a:	0004      	movs	r4, r0

    Soft_I2C_SCL_Low(i2c_handle);
 800148c:	f7ff ff99 	bl	80013c2 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_Low(i2c_handle);
 8001490:	0020      	movs	r0, r4
 8001492:	f7ff ff82 	bl	800139a <Soft_I2C_SDA_Low>
    Soft_I2C_SCL_High(i2c_handle);
 8001496:	0020      	movs	r0, r4
 8001498:	f7ff ff8c 	bl	80013b4 <Soft_I2C_SCL_High>
    asm("nop");
 800149c:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
 800149e:	0020      	movs	r0, r4
 80014a0:	f7ff ff8f 	bl	80013c2 <Soft_I2C_SCL_Low>
    asm("nop");
 80014a4:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();

    }
 80014a6:	bd10      	pop	{r4, pc}

080014a8 <Soft_I2C_NACK>:

void Soft_I2C_NACK(Soft_I2C_t* i2c_handle)
    {
 80014a8:	b510      	push	{r4, lr}
 80014aa:	0004      	movs	r4, r0

    Soft_I2C_SCL_Low(i2c_handle);
 80014ac:	f7ff ff89 	bl	80013c2 <Soft_I2C_SCL_Low>
    Soft_I2C_SDA_High(i2c_handle);
 80014b0:	0020      	movs	r0, r4
 80014b2:	f7ff ff6b 	bl	800138c <Soft_I2C_SDA_High>
    Soft_I2C_SCL_High(i2c_handle);
 80014b6:	0020      	movs	r0, r4
 80014b8:	f7ff ff7c 	bl	80013b4 <Soft_I2C_SCL_High>
    asm("nop");
 80014bc:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
 80014be:	0020      	movs	r0, r4
 80014c0:	f7ff ff7f 	bl	80013c2 <Soft_I2C_SCL_Low>
    asm("nop");
 80014c4:	46c0      	nop			; (mov r8, r8)
    Soft_I2C_Delay();

    }
 80014c6:	bd10      	pop	{r4, pc}

080014c8 <Soft_I2C_Send_Byte>:

uint8_t Soft_I2C_Send_Byte(Soft_I2C_t* i2c_handle, uint8_t byte)
    {
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	0004      	movs	r4, r0
 80014cc:	000e      	movs	r6, r1

    uint8_t count = 8;

    Soft_I2C_SCL_Low(i2c_handle);

    while (count--)
 80014ce:	2509      	movs	r5, #9
    Soft_I2C_SCL_Low(i2c_handle);
 80014d0:	f7ff ff77 	bl	80013c2 <Soft_I2C_SCL_Low>
 80014d4:	3d01      	subs	r5, #1
 80014d6:	b2ed      	uxtb	r5, r5
    while (count--)
 80014d8:	2d00      	cmp	r5, #0
 80014da:	d107      	bne.n	80014ec <Soft_I2C_Send_Byte+0x24>
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	Soft_I2C_SCL_Low(i2c_handle);
	Soft_I2C_Delay();
	}
    if (Soft_I2C_Wait_ACK(i2c_handle) == SOFT_I2C_ERR)
 80014dc:	0020      	movs	r0, r4
 80014de:	f7ff ffb1 	bl	8001444 <Soft_I2C_Wait_ACK>
 80014e2:	3801      	subs	r0, #1
 80014e4:	4243      	negs	r3, r0
 80014e6:	4158      	adcs	r0, r3
	{
	return SOFT_I2C_ERR;
	}
    return SOFT_I2C_OK;
    }
 80014e8:	b2c0      	uxtb	r0, r0
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
	if (byte & 0x80)
 80014ec:	b273      	sxtb	r3, r6
	    Soft_I2C_SDA_High(i2c_handle);
 80014ee:	0020      	movs	r0, r4
	if (byte & 0x80)
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da0c      	bge.n	800150e <Soft_I2C_Send_Byte+0x46>
	    Soft_I2C_SDA_High(i2c_handle);
 80014f4:	f7ff ff4a 	bl	800138c <Soft_I2C_SDA_High>
	Soft_I2C_SCL_High(i2c_handle);
 80014f8:	0020      	movs	r0, r4
	byte <<= 1;
 80014fa:	0076      	lsls	r6, r6, #1
	Soft_I2C_SCL_High(i2c_handle);
 80014fc:	f7ff ff5a 	bl	80013b4 <Soft_I2C_SCL_High>
	byte <<= 1;
 8001500:	b2f6      	uxtb	r6, r6
    asm("nop");
 8001502:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_Low(i2c_handle);
 8001504:	0020      	movs	r0, r4
 8001506:	f7ff ff5c 	bl	80013c2 <Soft_I2C_SCL_Low>
    asm("nop");
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	e7e2      	b.n	80014d4 <Soft_I2C_Send_Byte+0xc>
	    Soft_I2C_SDA_Low(i2c_handle);
 800150e:	f7ff ff44 	bl	800139a <Soft_I2C_SDA_Low>
 8001512:	e7f1      	b.n	80014f8 <Soft_I2C_Send_Byte+0x30>

08001514 <Soft_I2C_Receive_Byte>:

uint8_t Soft_I2C_Receive_Byte(Soft_I2C_t* i2c_handle)
    {
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	0005      	movs	r5, r0

    uint8_t i = 8;
    uint8_t ReceivedByte = 0;

    Soft_I2C_SDA_High(i2c_handle);
    while (i--)
 8001518:	2609      	movs	r6, #9
    Soft_I2C_SDA_High(i2c_handle);
 800151a:	f7ff ff37 	bl	800138c <Soft_I2C_SDA_High>
    uint8_t ReceivedByte = 0;
 800151e:	2400      	movs	r4, #0
	Soft_I2C_Delay();
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	if (Soft_I2C_SDA_Read(i2c_handle))
	    {
	    ReceivedByte |= 0x01;
 8001520:	2701      	movs	r7, #1
 8001522:	3e01      	subs	r6, #1
 8001524:	b2f6      	uxtb	r6, r6
    while (i--)
 8001526:	2e00      	cmp	r6, #0
 8001528:	d104      	bne.n	8001534 <Soft_I2C_Receive_Byte+0x20>
	    }
	}
    Soft_I2C_SCL_Low(i2c_handle);
 800152a:	0028      	movs	r0, r5
 800152c:	f7ff ff49 	bl	80013c2 <Soft_I2C_SCL_Low>
    return ReceivedByte;

    }
 8001530:	0020      	movs	r0, r4
 8001532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Soft_I2C_SCL_Low(i2c_handle);
 8001534:	0028      	movs	r0, r5
	ReceivedByte <<= 1;
 8001536:	0064      	lsls	r4, r4, #1
	Soft_I2C_SCL_Low(i2c_handle);
 8001538:	f7ff ff43 	bl	80013c2 <Soft_I2C_SCL_Low>
	ReceivedByte <<= 1;
 800153c:	b2e4      	uxtb	r4, r4
    asm("nop");
 800153e:	46c0      	nop			; (mov r8, r8)
	Soft_I2C_SCL_High(i2c_handle);
 8001540:	0028      	movs	r0, r5
 8001542:	f7ff ff37 	bl	80013b4 <Soft_I2C_SCL_High>
    asm("nop");
 8001546:	46c0      	nop			; (mov r8, r8)
	if (Soft_I2C_SDA_Read(i2c_handle))
 8001548:	0028      	movs	r0, r5
 800154a:	f7ff ff2d 	bl	80013a8 <Soft_I2C_SDA_Read>
 800154e:	2800      	cmp	r0, #0
 8001550:	d0e7      	beq.n	8001522 <Soft_I2C_Receive_Byte+0xe>
	    ReceivedByte |= 0x01;
 8001552:	433c      	orrs	r4, r7
 8001554:	e7e5      	b.n	8001522 <Soft_I2C_Receive_Byte+0xe>

08001556 <Soft_I2C_Write_Byte>:

uint8_t Soft_I2C_Write_Byte(Soft_I2C_t* i2c_handle,
	                    uint8_t     slave_address,
	                    uint8_t     register_address,
			    uint8_t     *byte)
    {
 8001556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001558:	0004      	movs	r4, r0
 800155a:	9101      	str	r1, [sp, #4]
 800155c:	0017      	movs	r7, r2
 800155e:	001e      	movs	r6, r3

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 8001560:	f7ff ff51 	bl	8001406 <Soft_I2C_Start>
 8001564:	0005      	movs	r5, r0
 8001566:	2801      	cmp	r0, #1
 8001568:	d104      	bne.n	8001574 <Soft_I2C_Write_Byte+0x1e>
	{
	Soft_I2C_Stop(i2c_handle);
 800156a:	0020      	movs	r0, r4
 800156c:	f7ff ff5a 	bl	8001424 <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 8001570:	0028      	movs	r0, r5
 8001572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 8001574:	9901      	ldr	r1, [sp, #4]
 8001576:	0020      	movs	r0, r4
 8001578:	f7ff ffa6 	bl	80014c8 <Soft_I2C_Send_Byte>
 800157c:	2801      	cmp	r0, #1
 800157e:	d101      	bne.n	8001584 <Soft_I2C_Write_Byte+0x2e>
	return SOFT_I2C_ERR;
 8001580:	2501      	movs	r5, #1
 8001582:	e7f5      	b.n	8001570 <Soft_I2C_Write_Byte+0x1a>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 8001584:	0039      	movs	r1, r7
 8001586:	0020      	movs	r0, r4
 8001588:	f7ff ff9e 	bl	80014c8 <Soft_I2C_Send_Byte>
 800158c:	2801      	cmp	r0, #1
 800158e:	d0f7      	beq.n	8001580 <Soft_I2C_Write_Byte+0x2a>
    if (byte)
 8001590:	2e00      	cmp	r6, #0
 8001592:	d104      	bne.n	800159e <Soft_I2C_Write_Byte+0x48>
    Soft_I2C_Stop(i2c_handle);
 8001594:	0020      	movs	r0, r4
 8001596:	f7ff ff45 	bl	8001424 <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 800159a:	2500      	movs	r5, #0
 800159c:	e7e8      	b.n	8001570 <Soft_I2C_Write_Byte+0x1a>
	if (Soft_I2C_Send_Byte(i2c_handle, *byte) == SOFT_I2C_ERR)
 800159e:	7831      	ldrb	r1, [r6, #0]
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff ff91 	bl	80014c8 <Soft_I2C_Send_Byte>
 80015a6:	2801      	cmp	r0, #1
 80015a8:	d1f4      	bne.n	8001594 <Soft_I2C_Write_Byte+0x3e>
 80015aa:	e7e9      	b.n	8001580 <Soft_I2C_Write_Byte+0x2a>

080015ac <Soft_I2C_Write_Bytes>:
uint8_t Soft_I2C_Write_Bytes(Soft_I2C_t* i2c_handle,
	                     uint8_t     slave_address,
	                     uint8_t     register_address,
			     uint8_t     *buf,
			     uint8_t     num)
    {
 80015ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	ab08      	add	r3, sp, #32
 80015b2:	0004      	movs	r4, r0
 80015b4:	000f      	movs	r7, r1
 80015b6:	9200      	str	r2, [sp, #0]
 80015b8:	781e      	ldrb	r6, [r3, #0]

    if (Soft_I2C_Start(i2c_handle) == SOFT_I2C_ERR)
 80015ba:	f7ff ff24 	bl	8001406 <Soft_I2C_Start>
 80015be:	0005      	movs	r5, r0
 80015c0:	2801      	cmp	r0, #1
 80015c2:	d104      	bne.n	80015ce <Soft_I2C_Write_Bytes+0x22>
	{
	Soft_I2C_Stop(i2c_handle);
 80015c4:	0020      	movs	r0, r4
 80015c6:	f7ff ff2d 	bl	8001424 <Soft_I2C_Stop>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 80015ca:	0028      	movs	r0, r5
 80015cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80015ce:	0039      	movs	r1, r7
 80015d0:	0020      	movs	r0, r4
 80015d2:	f7ff ff79 	bl	80014c8 <Soft_I2C_Send_Byte>
 80015d6:	2801      	cmp	r0, #1
 80015d8:	d101      	bne.n	80015de <Soft_I2C_Write_Bytes+0x32>
	return SOFT_I2C_ERR;
 80015da:	2501      	movs	r5, #1
 80015dc:	e7f5      	b.n	80015ca <Soft_I2C_Write_Bytes+0x1e>
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	0020      	movs	r0, r4
 80015e2:	f7ff ff71 	bl	80014c8 <Soft_I2C_Send_Byte>
 80015e6:	2801      	cmp	r0, #1
 80015e8:	d0f7      	beq.n	80015da <Soft_I2C_Write_Bytes+0x2e>
 80015ea:	9d01      	ldr	r5, [sp, #4]
 80015ec:	19ae      	adds	r6, r5, r6
    while (num--)
 80015ee:	42b5      	cmp	r5, r6
 80015f0:	d104      	bne.n	80015fc <Soft_I2C_Write_Bytes+0x50>
    Soft_I2C_Stop(i2c_handle);
 80015f2:	0020      	movs	r0, r4
 80015f4:	f7ff ff16 	bl	8001424 <Soft_I2C_Stop>
    return SOFT_I2C_OK;
 80015f8:	2500      	movs	r5, #0
 80015fa:	e7e6      	b.n	80015ca <Soft_I2C_Write_Bytes+0x1e>
	if (Soft_I2C_Send_Byte(i2c_handle, *buf++) == SOFT_I2C_ERR)
 80015fc:	7829      	ldrb	r1, [r5, #0]
 80015fe:	0020      	movs	r0, r4
 8001600:	f7ff ff62 	bl	80014c8 <Soft_I2C_Send_Byte>
 8001604:	3501      	adds	r5, #1
 8001606:	2801      	cmp	r0, #1
 8001608:	d1f1      	bne.n	80015ee <Soft_I2C_Write_Bytes+0x42>
 800160a:	e7e6      	b.n	80015da <Soft_I2C_Write_Bytes+0x2e>

0800160c <Update_Data_In_EEPROM>:

#define SOFT_I2C_SCL_PIN		GPIO_PIN_9
#define SOFT_I2C_SCL_PORT		GPIOA

void Update_Data_In_EEPROM()
    {
 800160c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    static uint32_t Update_Time_Stamp = 0;

    /* update only every 2000ms if data is changed*/
    if (HAL_GetTick() - Update_Time_Stamp > (2000 - 1))
 800160e:	f000 fae1 	bl	8001bd4 <HAL_GetTick>
 8001612:	4c10      	ldr	r4, [pc, #64]	; (8001654 <Update_Data_In_EEPROM+0x48>)
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	1ac0      	subs	r0, r0, r3
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <Update_Data_In_EEPROM+0x4c>)
 800161a:	4298      	cmp	r0, r3
 800161c:	d918      	bls.n	8001650 <Update_Data_In_EEPROM+0x44>
	{
	uint8_t cmp_buffer[sizeof(Welder_Data)];
	uint8_t *data = (uint8_t*) Welder_Data_Handle;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <Update_Data_In_EEPROM+0x50>)

	Update_Time_Stamp = HAL_GetTick();

	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Data));
 8001620:	ad01      	add	r5, sp, #4
	uint8_t *data = (uint8_t*) Welder_Data_Handle;
 8001622:	681e      	ldr	r6, [r3, #0]
	Update_Time_Stamp = HAL_GetTick();
 8001624:	f000 fad6 	bl	8001bd4 <HAL_GetTick>
	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Data));
 8001628:	220c      	movs	r2, #12
	Update_Time_Stamp = HAL_GetTick();
 800162a:	6020      	str	r0, [r4, #0]
	AT24CXX_Read_Buffer(0x00, cmp_buffer, sizeof(Welder_Data));
 800162c:	0029      	movs	r1, r5
 800162e:	2000      	movs	r0, #0
 8001630:	f7fe fe96 	bl	8000360 <AT24CXX_Read_Buffer>
 8001634:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < sizeof(Welder_Data); i++)
	    {
	    if (cmp_buffer[i] != data[i])
 8001636:	5d31      	ldrb	r1, [r6, r4]
 8001638:	5d2b      	ldrb	r3, [r5, r4]
 800163a:	428b      	cmp	r3, r1
 800163c:	d002      	beq.n	8001644 <Update_Data_In_EEPROM+0x38>
		{
		AT24CXX_Write_Byte(i, data[i]);
 800163e:	b2a0      	uxth	r0, r4
 8001640:	f7fe fe5e 	bl	8000300 <AT24CXX_Write_Byte>
 8001644:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < sizeof(Welder_Data); i++)
 8001646:	2c0c      	cmp	r4, #12
 8001648:	d1f5      	bne.n	8001636 <Update_Data_In_EEPROM+0x2a>
		}
	    }
	HAL_Delay(AT24CXX_WRITE_DELAY);
 800164a:	2003      	movs	r0, #3
 800164c:	f000 fac8 	bl	8001be0 <HAL_Delay>
	}

    }
 8001650:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	20000078 	.word	0x20000078
 8001658:	000007cf 	.word	0x000007cf
 800165c:	20000018 	.word	0x20000018

08001660 <Read_Data_From_EEPROM>:

void Read_Data_From_EEPROM()
    {
 8001660:	b510      	push	{r4, lr}
    AT24CXX_Read_Buffer(0x00, (uint8_t*)Welder_Data_Handle, sizeof(Welder_Data));
 8001662:	4b03      	ldr	r3, [pc, #12]	; (8001670 <Read_Data_From_EEPROM+0x10>)
 8001664:	220c      	movs	r2, #12
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	2000      	movs	r0, #0
 800166a:	f7fe fe79 	bl	8000360 <AT24CXX_Read_Buffer>
    }
 800166e:	bd10      	pop	{r4, pc}
 8001670:	20000018 	.word	0x20000018

08001674 <Set_Auto_Pulse_Delay>:

void Set_Auto_Pulse_Delay(int16_t delay)
    {
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <Set_Auto_Pulse_Delay+0x24>)
 8001676:	b510      	push	{r4, lr}
 8001678:	1c03      	adds	r3, r0, #0
 800167a:	4290      	cmp	r0, r2
 800167c:	dd00      	ble.n	8001680 <Set_Auto_Pulse_Delay+0xc>
 800167e:	1c13      	adds	r3, r2, #0
	}
    if (delay > 5000)
	{
	delay = 5000;
	}
    Welder_Data_Handle->Auto_Pulse_Delay = delay;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <Set_Auto_Pulse_Delay+0x28>)
 8001682:	b218      	sxth	r0, r3
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	22fa      	movs	r2, #250	; 0xfa
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	4290      	cmp	r0, r2
 800168c:	da00      	bge.n	8001690 <Set_Auto_Pulse_Delay+0x1c>
 800168e:	1c13      	adds	r3, r2, #0
 8001690:	80cb      	strh	r3, [r1, #6]
    Update_Data_In_EEPROM();
 8001692:	f7ff ffbb 	bl	800160c <Update_Data_In_EEPROM>
    }
 8001696:	bd10      	pop	{r4, pc}
 8001698:	00001388 	.word	0x00001388
 800169c:	20000018 	.word	0x20000018

080016a0 <Get_Auto_Pulse_Delay>:

uint16_t Get_Auto_Pulse_Delay()
    {
    return Welder_Data_Handle->Auto_Pulse_Delay;
 80016a0:	4b01      	ldr	r3, [pc, #4]	; (80016a8 <Get_Auto_Pulse_Delay+0x8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	88d8      	ldrh	r0, [r3, #6]
    }
 80016a6:	4770      	bx	lr
 80016a8:	20000018 	.word	0x20000018

080016ac <Set_Main_Pulse_Duration>:


void Set_Main_Pulse_Duration(int16_t duration)
    {
 80016ac:	b510      	push	{r4, lr}
 80016ae:	1c03      	adds	r3, r0, #0
 80016b0:	2832      	cmp	r0, #50	; 0x32
 80016b2:	dd00      	ble.n	80016b6 <Set_Main_Pulse_Duration+0xa>
 80016b4:	2332      	movs	r3, #50	; 0x32
	}
    if (duration > 50)
	{
	duration = 50;
	}
    Welder_Data_Handle->Main_Pulse_Duration = duration;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <Set_Main_Pulse_Duration+0x1c>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	0419      	lsls	r1, r3, #16
 80016bc:	d500      	bpl.n	80016c0 <Set_Main_Pulse_Duration+0x14>
 80016be:	2300      	movs	r3, #0
 80016c0:	8053      	strh	r3, [r2, #2]
    Update_Data_In_EEPROM();
 80016c2:	f7ff ffa3 	bl	800160c <Update_Data_In_EEPROM>
    }
 80016c6:	bd10      	pop	{r4, pc}
 80016c8:	20000018 	.word	0x20000018

080016cc <Get_Main_Pulse_Duration>:

uint16_t Get_Main_Pulse_Duration()
    {
    return Welder_Data_Handle->Main_Pulse_Duration;
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <Get_Main_Pulse_Duration+0x8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	8858      	ldrh	r0, [r3, #2]
    }
 80016d2:	4770      	bx	lr
 80016d4:	20000018 	.word	0x20000018

080016d8 <Set_Short_Pulse_Duration>:

void Set_Short_Pulse_Duration(int16_t duration)
    {
 80016d8:	b510      	push	{r4, lr}
 80016da:	1c03      	adds	r3, r0, #0
 80016dc:	2814      	cmp	r0, #20
 80016de:	dd00      	ble.n	80016e2 <Set_Short_Pulse_Duration+0xa>
 80016e0:	2314      	movs	r3, #20
	}
    if (duration > 20)
	{
	duration = 20;
	}
    Welder_Data_Handle->Short_Pulse_Duration = duration;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <Set_Short_Pulse_Duration+0x1c>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	0419      	lsls	r1, r3, #16
 80016e8:	d500      	bpl.n	80016ec <Set_Short_Pulse_Duration+0x14>
 80016ea:	2300      	movs	r3, #0
 80016ec:	8093      	strh	r3, [r2, #4]
    Update_Data_In_EEPROM();
 80016ee:	f7ff ff8d 	bl	800160c <Update_Data_In_EEPROM>
    }
 80016f2:	bd10      	pop	{r4, pc}
 80016f4:	20000018 	.word	0x20000018

080016f8 <Get_Short_Pulse_Duration>:

uint16_t Get_Short_Pulse_Duration()
    {
    return Welder_Data_Handle->Short_Pulse_Duration;
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <Get_Short_Pulse_Duration+0x8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	8898      	ldrh	r0, [r3, #4]
    }
 80016fe:	4770      	bx	lr
 8001700:	20000018 	.word	0x20000018

08001704 <Set_Batt_Alarm>:


void Set_Batt_Alarm(int16_t voltage)
    {
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <Set_Batt_Alarm+0x24>)
 8001706:	b510      	push	{r4, lr}
 8001708:	1c03      	adds	r3, r0, #0
 800170a:	4290      	cmp	r0, r2
 800170c:	dd00      	ble.n	8001710 <Set_Batt_Alarm+0xc>
 800170e:	1c13      	adds	r3, r2, #0
	}
    if (voltage > 13000)
	{
	voltage = 13000;
	}
    Welder_Data_Handle->Batt_Alarm = voltage;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <Set_Batt_Alarm+0x28>)
 8001712:	b218      	sxth	r0, r3
 8001714:	6811      	ldr	r1, [r2, #0]
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <Set_Batt_Alarm+0x2c>)
 8001718:	4290      	cmp	r0, r2
 800171a:	da00      	bge.n	800171e <Set_Batt_Alarm+0x1a>
 800171c:	1c13      	adds	r3, r2, #0
 800171e:	810b      	strh	r3, [r1, #8]
    Update_Data_In_EEPROM();
 8001720:	f7ff ff74 	bl	800160c <Update_Data_In_EEPROM>
    }
 8001724:	bd10      	pop	{r4, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	000032c8 	.word	0x000032c8
 800172c:	20000018 	.word	0x20000018
 8001730:	00002710 	.word	0x00002710

08001734 <Get_Batt_Alarm>:

uint16_t Get_Batt_Alarm()
    {
    return Welder_Data_Handle->Batt_Alarm;
 8001734:	4b01      	ldr	r3, [pc, #4]	; (800173c <Get_Batt_Alarm+0x8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	8918      	ldrh	r0, [r3, #8]
    }
 800173a:	4770      	bx	lr
 800173c:	20000018 	.word	0x20000018

08001740 <Disable_Welder>:

void Disable_Welder()
    {
    Welder_Enable_Flag = 0;
 8001740:	2200      	movs	r2, #0
 8001742:	4b01      	ldr	r3, [pc, #4]	; (8001748 <Disable_Welder+0x8>)
 8001744:	701a      	strb	r2, [r3, #0]
    }
 8001746:	4770      	bx	lr
 8001748:	2000001c 	.word	0x2000001c

0800174c <Get_Welder_Status>:

uint8_t Get_Welder_Status()
    {
    return Welder_Enable_Flag;
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <Get_Welder_Status+0x8>)
 800174e:	7818      	ldrb	r0, [r3, #0]
    }
 8001750:	4770      	bx	lr
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	2000001c 	.word	0x2000001c

08001758 <Disable_Auto_Weld>:

void Disable_Auto_Weld()
    {
    Welder_Data_Handle->Welder_Auto_Flag = 0;
 8001758:	2200      	movs	r2, #0
    {
 800175a:	b510      	push	{r4, lr}
    Welder_Data_Handle->Welder_Auto_Flag = 0;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <Disable_Auto_Weld+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	801a      	strh	r2, [r3, #0]
    Update_Data_In_EEPROM();
 8001762:	f7ff ff53 	bl	800160c <Update_Data_In_EEPROM>
    }
 8001766:	bd10      	pop	{r4, pc}
 8001768:	20000018 	.word	0x20000018

0800176c <Enable_Auto_Weld>:

void Enable_Auto_Weld()
    {
    Welder_Data_Handle->Welder_Auto_Flag = 1;
 800176c:	2201      	movs	r2, #1
    {
 800176e:	b510      	push	{r4, lr}
    Welder_Data_Handle->Welder_Auto_Flag = 1;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <Enable_Auto_Weld+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	801a      	strh	r2, [r3, #0]
    Update_Data_In_EEPROM();
 8001776:	f7ff ff49 	bl	800160c <Update_Data_In_EEPROM>
    }
 800177a:	bd10      	pop	{r4, pc}
 800177c:	20000018 	.word	0x20000018

08001780 <Get_Auto_Weld_Status>:

uint8_t Get_Auto_Weld_Status()
    {
    return Welder_Data_Handle->Welder_Auto_Flag;
 8001780:	4b01      	ldr	r3, [pc, #4]	; (8001788 <Get_Auto_Weld_Status+0x8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	7818      	ldrb	r0, [r3, #0]
    }
 8001786:	4770      	bx	lr
 8001788:	20000018 	.word	0x20000018

0800178c <Increment_Weld_Count>:

void Increment_Weld_Count()
    {
 800178c:	b510      	push	{r4, lr}
    Welder_Data_Handle->Weld_Counter++;
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <Increment_Weld_Count+0x14>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	8953      	ldrh	r3, [r2, #10]
 8001794:	3301      	adds	r3, #1
 8001796:	8153      	strh	r3, [r2, #10]
    Update_Data_In_EEPROM();
 8001798:	f7ff ff38 	bl	800160c <Update_Data_In_EEPROM>
    }
 800179c:	bd10      	pop	{r4, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	20000018 	.word	0x20000018

080017a4 <Get_Weld_Count>:

uint16_t Get_Weld_Count()
    {
    return Welder_Data_Handle->Weld_Counter;
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <Get_Weld_Count+0x8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	8958      	ldrh	r0, [r3, #10]
    }
 80017aa:	4770      	bx	lr
 80017ac:	20000018 	.word	0x20000018

080017b0 <Get_Foot_Switch_Status>:
    {
    if (!Get_Auto_Weld_Status()) // only active if Auto Weld is disabled.
	{
	return HAL_GPIO_ReadPin(Foot_Switch_GPIO_Port, Foot_Switch_Pin)?0:1;
	}
    return 0;
 80017b0:	2000      	movs	r0, #0
    return Welder_Data_Handle->Welder_Auto_Flag;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <Get_Foot_Switch_Status+0x20>)
    {
 80017b4:	b510      	push	{r4, lr}
    return Welder_Data_Handle->Welder_Auto_Flag;
 80017b6:	681b      	ldr	r3, [r3, #0]
    if (!Get_Auto_Weld_Status()) // only active if Auto Weld is disabled.
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4283      	cmp	r3, r0
 80017bc:	d107      	bne.n	80017ce <Get_Foot_Switch_Status+0x1e>
	return HAL_GPIO_ReadPin(Foot_Switch_GPIO_Port, Foot_Switch_Pin)?0:1;
 80017be:	2090      	movs	r0, #144	; 0x90
 80017c0:	2110      	movs	r1, #16
 80017c2:	05c0      	lsls	r0, r0, #23
 80017c4:	f000 fd10 	bl	80021e8 <HAL_GPIO_ReadPin>
 80017c8:	4243      	negs	r3, r0
 80017ca:	4158      	adcs	r0, r3
 80017cc:	b2c0      	uxtb	r0, r0
    }
 80017ce:	bd10      	pop	{r4, pc}
 80017d0:	20000018 	.word	0x20000018

080017d4 <Get_Auto_Puse_In_Status>:
    return Welder_Data_Handle->Welder_Auto_Flag;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <Get_Auto_Puse_In_Status+0x18>)

uint8_t Get_Auto_Puse_In_Status()
    {
 80017d6:	b510      	push	{r4, lr}
    return Welder_Data_Handle->Welder_Auto_Flag;
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	7818      	ldrb	r0, [r3, #0]
    if (Get_Auto_Weld_Status())
 80017dc:	2800      	cmp	r0, #0
 80017de:	d004      	beq.n	80017ea <Get_Auto_Puse_In_Status+0x16>
	{
	return HAL_GPIO_ReadPin(Auto_Pulse_In_GPIO_Port, Auto_Pulse_In_Pin);
 80017e0:	2090      	movs	r0, #144	; 0x90
 80017e2:	2101      	movs	r1, #1
 80017e4:	05c0      	lsls	r0, r0, #23
 80017e6:	f000 fcff 	bl	80021e8 <HAL_GPIO_ReadPin>
	}
    return 0;
    }
 80017ea:	bd10      	pop	{r4, pc}
 80017ec:	20000018 	.word	0x20000018

080017f0 <Reset_Welder_Data>:

void Reset_Welder_Data()
    {
 80017f0:	b510      	push	{r4, lr}
    Set_Main_Pulse_Duration(3);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f7ff ff5a 	bl	80016ac <Set_Main_Pulse_Duration>
    Set_Short_Pulse_Duration(2);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f7ff ff6d 	bl	80016d8 <Set_Short_Pulse_Duration>
    Set_Batt_Alarm(11000);
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <Reset_Welder_Data+0x28>)
 8001800:	f7ff ff80 	bl	8001704 <Set_Batt_Alarm>
    Set_Auto_Pulse_Delay(1000);
 8001804:	20fa      	movs	r0, #250	; 0xfa
 8001806:	0080      	lsls	r0, r0, #2
 8001808:	f7ff ff34 	bl	8001674 <Set_Auto_Pulse_Delay>
    Disable_Auto_Weld();
 800180c:	f7ff ffa4 	bl	8001758 <Disable_Auto_Weld>
    Update_Data_In_EEPROM();
 8001810:	f7ff fefc 	bl	800160c <Update_Data_In_EEPROM>
    }
 8001814:	bd10      	pop	{r4, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	00002af8 	.word	0x00002af8

0800181c <Spot_Welder_Main>:
    }

void Spot_Welder_Main()
    {

    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <Spot_Welder_Main+0x34>)
 8001820:	009b      	lsls	r3, r3, #2
    {
 8001822:	b510      	push	{r4, lr}
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;

    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8001824:	2280      	movs	r2, #128	; 0x80
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8001826:	8083      	strh	r3, [r0, #4]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8001828:	2390      	movs	r3, #144	; 0x90
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 800182a:	00d2      	lsls	r2, r2, #3
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 800182c:	05db      	lsls	r3, r3, #23
 800182e:	6003      	str	r3, [r0, #0]
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8001830:	8182      	strh	r2, [r0, #12]
    Soft_I2C1.GPIO_SDA_Port = SOFT_I2C_SDA_PORT;
 8001832:	6083      	str	r3, [r0, #8]

    Soft_I2C_Init(&Soft_I2C1);
 8001834:	f7ff fdcc 	bl	80013d0 <Soft_I2C_Init>

    Read_Data_From_EEPROM();
 8001838:	f7ff ff12 	bl	8001660 <Read_Data_From_EEPROM>

    Menu_Init();
 800183c:	f7fe ff4a 	bl	80006d4 <Menu_Init>

    HAL_Delay(2000);
 8001840:	20fa      	movs	r0, #250	; 0xfa
 8001842:	00c0      	lsls	r0, r0, #3
 8001844:	f000 f9cc 	bl	8001be0 <HAL_Delay>

    while (1)
	{

	Menu_Loop();
 8001848:	f7fe ff9a 	bl	8000780 <Menu_Loop>
 800184c:	e7fc      	b.n	8001848 <Spot_Welder_Main+0x2c>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	2000050c 	.word	0x2000050c

08001854 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 8001854:	b507      	push	{r0, r1, r2, lr}
 8001856:	466b      	mov	r3, sp
 8001858:	3307      	adds	r3, #7
 800185a:	7018      	strb	r0, [r3, #0]
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 800185c:	2200      	movs	r2, #0
 800185e:	2178      	movs	r1, #120	; 0x78
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <ssd1306_WriteCommand+0x1c>)
 8001862:	f7ff fe78 	bl	8001556 <Soft_I2C_Write_Byte>
 8001866:	2801      	cmp	r0, #1
 8001868:	d101      	bne.n	800186e <ssd1306_WriteCommand+0x1a>
    {
    	Error_Handler();
 800186a:	f7fe fefd 	bl	8000668 <Error_Handler>
    }
}
 800186e:	bd07      	pop	{r0, r1, r2, pc}
 8001870:	2000050c 	.word	0x2000050c

08001874 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001874:	1e42      	subs	r2, r0, #1
 8001876:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <ssd1306_Fill+0x18>)
 800187e:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001880:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001882:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001884:	3301      	adds	r3, #1
 8001886:	4293      	cmp	r3, r2
 8001888:	d1fb      	bne.n	8001882 <ssd1306_Fill+0xe>
	}
}
 800188a:	4770      	bx	lr
 800188c:	20000082 	.word	0x20000082

08001890 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001892:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 8001894:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 8001896:	0020      	movs	r0, r4
 8001898:	3850      	subs	r0, #80	; 0x50
 800189a:	b2c0      	uxtb	r0, r0
 800189c:	f7ff ffda 	bl	8001854 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ffd7 	bl	8001854 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80018a6:	2010      	movs	r0, #16
 80018a8:	f7ff ffd4 	bl	8001854 <ssd1306_WriteCommand>
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <ssd1306_UpdateScreen+0x40>)
 80018ae:	01e3      	lsls	r3, r4, #7
 80018b0:	189b      	adds	r3, r3, r2
 80018b2:	9500      	str	r5, [sp, #0]
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	2178      	movs	r1, #120	; 0x78
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <ssd1306_UpdateScreen+0x44>)
 80018ba:	f7ff fe77 	bl	80015ac <Soft_I2C_Write_Bytes>
 80018be:	2801      	cmp	r0, #1
 80018c0:	d101      	bne.n	80018c6 <ssd1306_UpdateScreen+0x36>
	    {
	    	Error_Handler();
 80018c2:	f7fe fed1 	bl	8000668 <Error_Handler>
 80018c6:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 80018c8:	2c08      	cmp	r4, #8
 80018ca:	d1e4      	bne.n	8001896 <ssd1306_UpdateScreen+0x6>
	    }
	}
}
 80018cc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000082 	.word	0x20000082
 80018d4:	2000050c 	.word	0x2000050c

080018d8 <ssd1306_Init>:
{	
 80018d8:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(0xAE); //display off
 80018da:	20ae      	movs	r0, #174	; 0xae
 80018dc:	f7ff ffba 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80018e0:	2020      	movs	r0, #32
 80018e2:	f7ff ffb7 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018e6:	2010      	movs	r0, #16
 80018e8:	f7ff ffb4 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018ec:	20b0      	movs	r0, #176	; 0xb0
 80018ee:	f7ff ffb1 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018f2:	20c8      	movs	r0, #200	; 0xc8
 80018f4:	f7ff ffae 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff ffab 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80018fe:	2010      	movs	r0, #16
 8001900:	f7ff ffa8 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001904:	2040      	movs	r0, #64	; 0x40
 8001906:	f7ff ffa5 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800190a:	2081      	movs	r0, #129	; 0x81
 800190c:	f7ff ffa2 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001910:	20ff      	movs	r0, #255	; 0xff
 8001912:	f7ff ff9f 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001916:	20a1      	movs	r0, #161	; 0xa1
 8001918:	f7ff ff9c 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800191c:	20a6      	movs	r0, #166	; 0xa6
 800191e:	f7ff ff99 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001922:	20a8      	movs	r0, #168	; 0xa8
 8001924:	f7ff ff96 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001928:	203f      	movs	r0, #63	; 0x3f
 800192a:	f7ff ff93 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800192e:	20a4      	movs	r0, #164	; 0xa4
 8001930:	f7ff ff90 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001934:	20d3      	movs	r0, #211	; 0xd3
 8001936:	f7ff ff8d 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ff8a 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001940:	20d5      	movs	r0, #213	; 0xd5
 8001942:	f7ff ff87 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001946:	20f0      	movs	r0, #240	; 0xf0
 8001948:	f7ff ff84 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800194c:	20d9      	movs	r0, #217	; 0xd9
 800194e:	f7ff ff81 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001952:	2022      	movs	r0, #34	; 0x22
 8001954:	f7ff ff7e 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001958:	20da      	movs	r0, #218	; 0xda
 800195a:	f7ff ff7b 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800195e:	2012      	movs	r0, #18
 8001960:	f7ff ff78 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001964:	20db      	movs	r0, #219	; 0xdb
 8001966:	f7ff ff75 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800196a:	2020      	movs	r0, #32
 800196c:	f7ff ff72 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001970:	208d      	movs	r0, #141	; 0x8d
 8001972:	f7ff ff6f 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001976:	2014      	movs	r0, #20
 8001978:	f7ff ff6c 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800197c:	20af      	movs	r0, #175	; 0xaf
 800197e:	f7ff ff69 	bl	8001854 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff ff76 	bl	8001874 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001988:	f7ff ff82 	bl	8001890 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800198c:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 800198e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <ssd1306_Init+0xc4>)
 8001992:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001994:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001996:	7158      	strb	r0, [r3, #5]
}
 8001998:	bd10      	pop	{r4, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	2000007c 	.word	0x2000007c

080019a0 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019a0:	b243      	sxtb	r3, r0
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db16      	blt.n	80019d6 <ssd1306_DrawPixel+0x36>
 80019a8:	293f      	cmp	r1, #63	; 0x3f
 80019aa:	d814      	bhi.n	80019d6 <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <ssd1306_DrawPixel+0x40>)
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 80019b4:	4253      	negs	r3, r2
 80019b6:	415a      	adcs	r2, r3
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	2407      	movs	r4, #7
 80019bc:	08cb      	lsrs	r3, r1, #3
 80019be:	400c      	ands	r4, r1
 80019c0:	2101      	movs	r1, #1
 80019c2:	40a1      	lsls	r1, r4
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4d07      	ldr	r5, [pc, #28]	; (80019e4 <ssd1306_DrawPixel+0x44>)
 80019c8:	1818      	adds	r0, r3, r0
 80019ca:	562e      	ldrsb	r6, [r5, r0]
 80019cc:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 80019ce:	2a01      	cmp	r2, #1
 80019d0:	d102      	bne.n	80019d8 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019d2:	4333      	orrs	r3, r6
 80019d4:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d8:	439e      	bics	r6, r3
 80019da:	542e      	strb	r6, [r5, r0]
 80019dc:	e7fb      	b.n	80019d6 <ssd1306_DrawPixel+0x36>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	2000007c 	.word	0x2000007c
 80019e4:	20000082 	.word	0x20000082

080019e8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	9303      	str	r3, [sp, #12]
 80019ee:	b2cb      	uxtb	r3, r1
 80019f0:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <ssd1306_WriteChar+0x98>)
{
 80019f4:	9106      	str	r1, [sp, #24]
 80019f6:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019f8:	9901      	ldr	r1, [sp, #4]
 80019fa:	881a      	ldrh	r2, [r3, #0]
{
 80019fc:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	1852      	adds	r2, r2, r1
 8001a02:	2a7f      	cmp	r2, #127	; 0x7f
 8001a04:	dc3a      	bgt.n	8001a7c <ssd1306_WriteChar+0x94>
 8001a06:	aa06      	add	r2, sp, #24
 8001a08:	7852      	ldrb	r2, [r2, #1]
 8001a0a:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001a0c:	885c      	ldrh	r4, [r3, #2]
 8001a0e:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001a10:	2b3f      	cmp	r3, #63	; 0x3f
 8001a12:	dc33      	bgt.n	8001a7c <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a14:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 8001a16:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a18:	3b20      	subs	r3, #32
 8001a1a:	435a      	muls	r2, r3
 8001a1c:	b2e4      	uxtb	r4, r4
 8001a1e:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 8001a20:	9b02      	ldr	r3, [sp, #8]
 8001a22:	42bb      	cmp	r3, r7
 8001a24:	d808      	bhi.n	8001a38 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8001a26:	9a01      	ldr	r2, [sp, #4]
 8001a28:	9b00      	ldr	r3, [sp, #0]
 8001a2a:	4694      	mov	ip, r2
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <ssd1306_WriteChar+0x98>)
 8001a2e:	4463      	add	r3, ip
 8001a30:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 8001a32:	0030      	movs	r0, r6
 8001a34:	b009      	add	sp, #36	; 0x24
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8001a38:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a3a:	9b04      	ldr	r3, [sp, #16]
 8001a3c:	9a07      	ldr	r2, [sp, #28]
 8001a3e:	19db      	adds	r3, r3, r7
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	5a9b      	ldrh	r3, [r3, r2]
 8001a44:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	42ab      	cmp	r3, r5
 8001a4a:	d803      	bhi.n	8001a54 <ssd1306_WriteChar+0x6c>
 8001a4c:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 8001a4e:	3701      	adds	r7, #1
 8001a50:	b2e4      	uxtb	r4, r4
 8001a52:	e7e5      	b.n	8001a20 <ssd1306_WriteChar+0x38>
 8001a54:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	18e8      	adds	r0, r5, r3
 8001a5a:	9b05      	ldr	r3, [sp, #20]
 8001a5c:	0212      	lsls	r2, r2, #8
 8001a5e:	40ab      	lsls	r3, r5
 8001a60:	b2c0      	uxtb	r0, r0
 8001a62:	4213      	tst	r3, r2
 8001a64:	d005      	beq.n	8001a72 <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a66:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a68:	0021      	movs	r1, r4
 8001a6a:	f7ff ff99 	bl	80019a0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001a6e:	3501      	adds	r5, #1
 8001a70:	e7e9      	b.n	8001a46 <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a72:	9a03      	ldr	r2, [sp, #12]
 8001a74:	4253      	negs	r3, r2
 8001a76:	415a      	adcs	r2, r3
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	e7f5      	b.n	8001a68 <ssd1306_WriteChar+0x80>
		return 0;
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	e7d8      	b.n	8001a32 <ssd1306_WriteChar+0x4a>
 8001a80:	2000007c 	.word	0x2000007c

08001a84 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a86:	0004      	movs	r4, r0
 8001a88:	001d      	movs	r5, r3
 8001a8a:	9100      	str	r1, [sp, #0]
 8001a8c:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8001a8e:	7820      	ldrb	r0, [r4, #0]
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d100      	bne.n	8001a96 <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8001a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001a96:	002b      	movs	r3, r5
 8001a98:	9900      	ldr	r1, [sp, #0]
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	f7ff ffa4 	bl	80019e8 <ssd1306_WriteChar>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	7820      	ldrb	r0, [r4, #0]
 8001aa4:	4283      	cmp	r3, r0
 8001aa6:	d1f5      	bne.n	8001a94 <ssd1306_WriteString+0x10>
		str++;
 8001aa8:	3401      	adds	r4, #1
 8001aaa:	e7f0      	b.n	8001a8e <ssd1306_WriteString+0xa>

08001aac <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <ssd1306_SetCursor+0x8>)
 8001aae:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001ab0:	8059      	strh	r1, [r3, #2]
}
 8001ab2:	4770      	bx	lr
 8001ab4:	2000007c 	.word	0x2000007c

08001ab8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	2001      	movs	r0, #1
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_MspInit+0x2c>)
{
 8001abc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	6999      	ldr	r1, [r3, #24]
 8001ac0:	4301      	orrs	r1, r0
 8001ac2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4002      	ands	r2, r0
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	61da      	str	r2, [r3, #28]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	400b      	ands	r3, r1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	4770      	bx	lr
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae8:	4770      	bx	lr

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler>

08001aec <SVC_Handler>:
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 f863 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systic_Callback();
 8001af6:	f7fe fdb9 	bl	800066c <Systic_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bd10      	pop	{r4, pc}

08001afc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001afc:	4770      	bx	lr
	...

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b2a:	f7ff ffe7 	bl	8001afc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b2e:	f000 fe1f 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7fe fd87 	bl	8000644 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   r0, =_estack
 8001b38:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001b44:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 8001b48:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001b4c:	20000520 	.word	0x20000520

08001b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_IRQHandler>
	...

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	20fa      	movs	r0, #250	; 0xfa
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_InitTick+0x3c>)
 8001b5c:	0080      	lsls	r0, r0, #2
 8001b5e:	7819      	ldrb	r1, [r3, #0]
 8001b60:	f7fe fadc 	bl	800011c <__udivsi3>
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_InitTick+0x40>)
 8001b66:	0001      	movs	r1, r0
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	f7fe fad7 	bl	800011c <__udivsi3>
 8001b6e:	f000 fa71 	bl	8002054 <HAL_SYSTICK_Config>
 8001b72:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	2d03      	cmp	r5, #3
 8001b7c:	d807      	bhi.n	8001b8e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7e:	3802      	subs	r0, #2
 8001b80:	0022      	movs	r2, r4
 8001b82:	0029      	movs	r1, r5
 8001b84:	f000 fa3c 	bl	8002000 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	0020      	movs	r0, r4
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_InitTick+0x44>)
 8001b8c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	20000024 	.word	0x20000024
 8001b94:	20000020 	.word	0x20000020
 8001b98:	20000028 	.word	0x20000028

08001b9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_Init+0x1c>)
{
 8001ba0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	f7ff ffd3 	bl	8001b54 <HAL_InitTick>
  HAL_MspInit();
 8001bae:	f7ff ff83 	bl	8001ab8 <HAL_MspInit>
}
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_IncTick+0x10>)
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_IncTick+0x14>)
 8001bc0:	6811      	ldr	r1, [r2, #0]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	185b      	adds	r3, r3, r1
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	4770      	bx	lr
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	2000051c 	.word	0x2000051c
 8001bd0:	20000024 	.word	0x20000024

08001bd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bd4:	4b01      	ldr	r3, [pc, #4]	; (8001bdc <HAL_GetTick+0x8>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
}
 8001bd8:	4770      	bx	lr
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	2000051c 	.word	0x2000051c

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fff6 	bl	8001bd4 <HAL_GetTick>
 8001be8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	1c63      	adds	r3, r4, #1
 8001bec:	d002      	beq.n	8001bf4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_Delay+0x20>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	1b40      	subs	r0, r0, r5
 8001bfa:	42a0      	cmp	r0, r4
 8001bfc:	d3fa      	bcc.n	8001bf4 <HAL_Delay+0x14>
  {
  }
}
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	20000024 	.word	0x20000024

08001c04 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001c04:	2300      	movs	r3, #0
{
 8001c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c08:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001c0a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c0c:	6803      	ldr	r3, [r0, #0]
{
 8001c0e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	400a      	ands	r2, r1
 8001c14:	2a01      	cmp	r2, #1
 8001c16:	d107      	bne.n	8001c28 <ADC_Enable+0x24>
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	4211      	tst	r1, r2
 8001c1c:	d001      	beq.n	8001c22 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
}
 8001c20:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	d4fa      	bmi.n	8001c1e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <ADC_Enable+0x8c>)
 8001c2c:	4211      	tst	r1, r2
 8001c2e:	d008      	beq.n	8001c42 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c36:	4313      	orrs	r3, r2
 8001c38:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c3c:	4303      	orrs	r3, r0
 8001c3e:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001c40:	e7ee      	b.n	8001c20 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001c42:	2201      	movs	r2, #1
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <ADC_Enable+0x90>)
 8001c4c:	4912      	ldr	r1, [pc, #72]	; (8001c98 <ADC_Enable+0x94>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f7fe fa64 	bl	800011c <__udivsi3>
 8001c54:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001c56:	9b01      	ldr	r3, [sp, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d115      	bne.n	8001c88 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001c5c:	f7ff ffba 	bl	8001bd4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c60:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001c62:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	422b      	tst	r3, r5
 8001c6a:	d1d8      	bne.n	8001c1e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6c:	f7ff ffb2 	bl	8001bd4 <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d9f6      	bls.n	8001c64 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	2310      	movs	r3, #16
 8001c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c82:	432b      	orrs	r3, r5
 8001c84:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001c86:	e7cb      	b.n	8001c20 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	e7e2      	b.n	8001c56 <ADC_Enable+0x52>
 8001c90:	80000017 	.word	0x80000017
 8001c94:	20000020 	.word	0x20000020
 8001c98:	000f4240 	.word	0x000f4240

08001c9c <HAL_ADC_Init>:
{
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001ca0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d07e      	beq.n	8001da4 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001cac:	0022      	movs	r2, r4
 8001cae:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001cb2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001cb4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001cb6:	f7fe faf5 	bl	80002a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cbc:	06db      	lsls	r3, r3, #27
 8001cbe:	d500      	bpl.n	8001cc2 <HAL_ADC_Init+0x26>
 8001cc0:	e085      	b.n	8001dce <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	6898      	ldr	r0, [r3, #8]
 8001cc8:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001cca:	d000      	beq.n	8001cce <HAL_ADC_Init+0x32>
 8001ccc:	e07f      	b.n	8001dce <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8001cce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cd0:	4942      	ldr	r1, [pc, #264]	; (8001ddc <HAL_ADC_Init+0x140>)
 8001cd2:	4011      	ands	r1, r2
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cd8:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	2a01      	cmp	r2, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_ADC_Init+0x54>
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	4211      	tst	r1, r2
 8001ce8:	d10e      	bne.n	8001d08 <HAL_ADC_Init+0x6c>
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	0412      	lsls	r2, r2, #16
 8001cee:	d40b      	bmi.n	8001d08 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cf0:	2118      	movs	r1, #24
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	68a1      	ldr	r1, [r4, #8]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001cfc:	6919      	ldr	r1, [r3, #16]
 8001cfe:	6862      	ldr	r2, [r4, #4]
 8001d00:	0089      	lsls	r1, r1, #2
 8001d02:	0889      	lsrs	r1, r1, #2
 8001d04:	4311      	orrs	r1, r2
 8001d06:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_ADC_Init+0x144>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d10:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d12:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d14:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d16:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d18:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d1c:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	1e56      	subs	r6, r2, #1
 8001d22:	41b2      	sbcs	r2, r6
 8001d24:	0316      	lsls	r6, r2, #12
 8001d26:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d28:	034f      	lsls	r7, r1, #13
 8001d2a:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d2c:	6922      	ldr	r2, [r4, #16]
 8001d2e:	432f      	orrs	r7, r5
 8001d30:	2a02      	cmp	r2, #2
 8001d32:	d100      	bne.n	8001d36 <HAL_ADC_Init+0x9a>
 8001d34:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d36:	1d62      	adds	r2, r4, #5
 8001d38:	7fd2      	ldrb	r2, [r2, #31]
 8001d3a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d3c:	433a      	orrs	r2, r7
 8001d3e:	4332      	orrs	r2, r6
 8001d40:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d42:	7ee0      	ldrb	r0, [r4, #27]
 8001d44:	2801      	cmp	r0, #1
 8001d46:	d104      	bne.n	8001d52 <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	d12c      	bne.n	8001da6 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0249      	lsls	r1, r1, #9
 8001d50:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d52:	20c2      	movs	r0, #194	; 0xc2
 8001d54:	69e1      	ldr	r1, [r4, #28]
 8001d56:	30ff      	adds	r0, #255	; 0xff
 8001d58:	4281      	cmp	r1, r0
 8001d5a:	d002      	beq.n	8001d62 <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d5c:	6a20      	ldr	r0, [r4, #32]
 8001d5e:	4301      	orrs	r1, r0
 8001d60:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d62:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d64:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d66:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d6e:	4281      	cmp	r1, r0
 8001d70:	d002      	beq.n	8001d78 <HAL_ADC_Init+0xdc>
 8001d72:	1e48      	subs	r0, r1, #1
 8001d74:	2806      	cmp	r0, #6
 8001d76:	d807      	bhi.n	8001d88 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d78:	2507      	movs	r5, #7
 8001d7a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d7c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d7e:	43a8      	bics	r0, r5
 8001d80:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d82:	6958      	ldr	r0, [r3, #20]
 8001d84:	4301      	orrs	r1, r0
 8001d86:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4916      	ldr	r1, [pc, #88]	; (8001de4 <HAL_ADC_Init+0x148>)
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d111      	bne.n	8001db6 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001d94:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001d96:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4313      	orrs	r3, r2
 8001da2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da6:	2120      	movs	r1, #32
 8001da8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001daa:	4329      	orrs	r1, r5
 8001dac:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001db0:	4308      	orrs	r0, r1
 8001db2:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001db4:	e7cd      	b.n	8001d52 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	2212      	movs	r2, #18
 8001db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dc8:	4303      	orrs	r3, r0
 8001dca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001dcc:	e7ea      	b.n	8001da4 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dce:	2310      	movs	r3, #16
 8001dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001dd2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001dd8:	e7e4      	b.n	8001da4 <HAL_ADC_Init+0x108>
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	fffffefd 	.word	0xfffffefd
 8001de0:	fffe0219 	.word	0xfffe0219
 8001de4:	833fffe7 	.word	0x833fffe7

08001de8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de8:	6803      	ldr	r3, [r0, #0]
{
 8001dea:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dec:	689b      	ldr	r3, [r3, #8]
{
 8001dee:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001df0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001df2:	075b      	lsls	r3, r3, #29
 8001df4:	d41a      	bmi.n	8001e2c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001df6:	0025      	movs	r5, r4
 8001df8:	3534      	adds	r5, #52	; 0x34
 8001dfa:	782b      	ldrb	r3, [r5, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d015      	beq.n	8001e2c <HAL_ADC_Start+0x44>
 8001e00:	2301      	movs	r3, #1
 8001e02:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e04:	7e63      	ldrb	r3, [r4, #25]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d111      	bne.n	8001e2e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001e0e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	401a      	ands	r2, r3
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e18:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e1c:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001e20:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e22:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	3a18      	subs	r2, #24
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f7ff fee8 	bl	8001c04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d0e8      	beq.n	8001e0a <HAL_ADC_Start+0x22>
 8001e38:	e7f8      	b.n	8001e2c <HAL_ADC_Start+0x44>
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	fffff0fe 	.word	0xfffff0fe

08001e40 <HAL_ADC_PollForConversion>:
{
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e42:	6945      	ldr	r5, [r0, #20]
{
 8001e44:	0004      	movs	r4, r0
 8001e46:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e48:	2d08      	cmp	r5, #8
 8001e4a:	d00d      	beq.n	8001e68 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e4c:	6803      	ldr	r3, [r0, #0]
 8001e4e:	2001      	movs	r0, #1
 8001e50:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e52:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e54:	4203      	tst	r3, r0
 8001e56:	d007      	beq.n	8001e68 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	2320      	movs	r3, #32
 8001e5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001e5c:	3434      	adds	r4, #52	; 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001e62:	2300      	movs	r3, #0
 8001e64:	7023      	strb	r3, [r4, #0]
}
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001e68:	f7ff feb4 	bl	8001bd4 <HAL_GetTick>
 8001e6c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4215      	tst	r5, r2
 8001e74:	d023      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e80:	22c0      	movs	r2, #192	; 0xc0
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	4211      	tst	r1, r2
 8001e88:	d112      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x70>
 8001e8a:	7ea2      	ldrb	r2, [r4, #26]
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d10f      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	0712      	lsls	r2, r2, #28
 8001e94:	d50c      	bpl.n	8001eb0 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	d423      	bmi.n	8001ee4 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e9c:	210c      	movs	r1, #12
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ea6:	4914      	ldr	r1, [pc, #80]	; (8001ef8 <HAL_ADC_PollForConversion+0xb8>)
 8001ea8:	4011      	ands	r1, r2
 8001eaa:	2201      	movs	r2, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	63a2      	str	r2, [r4, #56]	; 0x38
  return HAL_OK;
 8001eb0:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001eb2:	7e22      	ldrb	r2, [r4, #24]
 8001eb4:	4282      	cmp	r2, r0
 8001eb6:	d1d6      	bne.n	8001e66 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001eb8:	220c      	movs	r2, #12
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e7d3      	b.n	8001e66 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001ebe:	1c72      	adds	r2, r6, #1
 8001ec0:	d0d6      	beq.n	8001e70 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d108      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8001eca:	3434      	adds	r4, #52	; 0x34
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001ed0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8001ed4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001ed6:	e7c6      	b.n	8001e66 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ed8:	f7ff fe7c 	bl	8001bd4 <HAL_GetTick>
 8001edc:	1bc0      	subs	r0, r0, r7
 8001ede:	42b0      	cmp	r0, r6
 8001ee0:	d9c5      	bls.n	8001e6e <HAL_ADC_PollForConversion+0x2e>
 8001ee2:	e7f0      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	2201      	movs	r2, #1
 8001eee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001ef4:	e7dc      	b.n	8001eb0 <HAL_ADC_PollForConversion+0x70>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	fffffefe 	.word	0xfffffefe

08001efc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_ADC_ConfigChannel>:
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001f06:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001f08:	0004      	movs	r4, r0
{
 8001f0a:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001f0c:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001f0e:	3434      	adds	r4, #52	; 0x34
 8001f10:	7823      	ldrb	r3, [r4, #0]
{
 8001f12:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001f14:	2002      	movs	r0, #2
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d02f      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f1c:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f1e:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8001f20:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f22:	68bd      	ldr	r5, [r7, #8]
 8001f24:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8001f26:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f28:	4005      	ands	r5, r0
 8001f2a:	d159      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0xdc>
 8001f2c:	680e      	ldr	r6, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f2e:	482f      	ldr	r0, [pc, #188]	; (8001fec <HAL_ADC_ConfigChannel+0xe8>)
 8001f30:	40b3      	lsls	r3, r6
 8001f32:	0032      	movs	r2, r6
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	684b      	ldr	r3, [r1, #4]
 8001f38:	3a10      	subs	r2, #16
 8001f3a:	4283      	cmp	r3, r0
 8001f3c:	d03d      	beq.n	8001fba <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	9801      	ldr	r0, [sp, #4]
 8001f42:	4318      	orrs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f44:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f46:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f48:	055b      	lsls	r3, r3, #21
 8001f4a:	459c      	cmp	ip, r3
 8001f4c:	d010      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x6c>
 8001f4e:	4663      	mov	r3, ip
 8001f50:	3b01      	subs	r3, #1
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d90c      	bls.n	8001f70 <HAL_ADC_ConfigChannel+0x6c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f56:	688b      	ldr	r3, [r1, #8]
 8001f58:	2107      	movs	r1, #7
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	4008      	ands	r0, r1
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	d006      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x6c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f62:	6978      	ldr	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f64:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f66:	4388      	bics	r0, r1
 8001f68:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	4303      	orrs	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	d904      	bls.n	8001f7e <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f74:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001f76:	2300      	movs	r3, #0
 8001f78:	7023      	strb	r3, [r4, #0]
}
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f7e:	0033      	movs	r3, r6
 8001f80:	3b10      	subs	r3, #16
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	4183      	sbcs	r3, r0
 8001f86:	2080      	movs	r0, #128	; 0x80
 8001f88:	4919      	ldr	r1, [pc, #100]	; (8001ff0 <HAL_ADC_ConfigChannel+0xec>)
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	680a      	ldr	r2, [r1, #0]
 8001f8e:	059b      	lsls	r3, r3, #22
 8001f90:	0400      	lsls	r0, r0, #16
 8001f92:	181b      	adds	r3, r3, r0
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f98:	2e10      	cmp	r6, #16
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_ADC_ConfigChannel+0xf0>)
 8001f9e:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <HAL_ADC_ConfigChannel+0xf4>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f7fe f8bb 	bl	800011c <__udivsi3>
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	4358      	muls	r0, r3
 8001faa:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8001fac:	9b03      	ldr	r3, [sp, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0e0      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8001fb2:	9b03      	ldr	r3, [sp, #12]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	9303      	str	r3, [sp, #12]
 8001fb8:	e7f8      	b.n	8001fac <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	4399      	bics	r1, r3
 8001fc0:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d8d6      	bhi.n	8001f74 <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001fc6:	1e53      	subs	r3, r2, #1
 8001fc8:	419a      	sbcs	r2, r3
 8001fca:	4253      	negs	r3, r2
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <HAL_ADC_ConfigChannel+0xec>)
 8001fd0:	03d2      	lsls	r2, r2, #15
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_ADC_ConfigChannel+0xf8>)
 8001fd6:	6808      	ldr	r0, [r1, #0]
 8001fd8:	189b      	adds	r3, r3, r2
 8001fda:	4003      	ands	r3, r0
 8001fdc:	600b      	str	r3, [r1, #0]
 8001fde:	e7c9      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001fe4:	4301      	orrs	r1, r0
 8001fe6:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001fe8:	0018      	movs	r0, r3
 8001fea:	e7c4      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x72>
 8001fec:	00001001 	.word	0x00001001
 8001ff0:	40012708 	.word	0x40012708
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	000f4240 	.word	0x000f4240
 8001ffc:	ff7fffff 	.word	0xff7fffff

08002000 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002000:	b530      	push	{r4, r5, lr}
 8002002:	25ff      	movs	r5, #255	; 0xff
 8002004:	2403      	movs	r4, #3
 8002006:	002a      	movs	r2, r5
 8002008:	b2c3      	uxtb	r3, r0
 800200a:	401c      	ands	r4, r3
 800200c:	00e4      	lsls	r4, r4, #3
 800200e:	40a2      	lsls	r2, r4
 8002010:	0189      	lsls	r1, r1, #6
 8002012:	4029      	ands	r1, r5
 8002014:	43d2      	mvns	r2, r2
 8002016:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002018:	2800      	cmp	r0, #0
 800201a:	db0a      	blt.n	8002032 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	24c0      	movs	r4, #192	; 0xc0
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_NVIC_SetPriority+0x4c>)
 8002020:	0880      	lsrs	r0, r0, #2
 8002022:	0080      	lsls	r0, r0, #2
 8002024:	18c0      	adds	r0, r0, r3
 8002026:	00a4      	lsls	r4, r4, #2
 8002028:	5903      	ldr	r3, [r0, r4]
 800202a:	401a      	ands	r2, r3
 800202c:	4311      	orrs	r1, r2
 800202e:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002030:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002032:	200f      	movs	r0, #15
 8002034:	4003      	ands	r3, r0
 8002036:	3b08      	subs	r3, #8
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_NVIC_SetPriority+0x50>)
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	181b      	adds	r3, r3, r0
 8002040:	69d8      	ldr	r0, [r3, #28]
 8002042:	4002      	ands	r2, r0
 8002044:	4311      	orrs	r1, r2
 8002046:	61d9      	str	r1, [r3, #28]
 8002048:	e7f2      	b.n	8002030 <HAL_NVIC_SetPriority+0x30>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_SYSTICK_Config+0x28>)
 8002056:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002058:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205a:	4293      	cmp	r3, r2
 800205c:	d80d      	bhi.n	800207a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002062:	4808      	ldr	r0, [pc, #32]	; (8002084 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002066:	6a03      	ldr	r3, [r0, #32]
 8002068:	0609      	lsls	r1, r1, #24
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	430b      	orrs	r3, r1
 8002070:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002072:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002074:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002076:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002078:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800207a:	4770      	bx	lr
 800207c:	00ffffff 	.word	0x00ffffff
 8002080:	e000e010 	.word	0xe000e010
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208a:	680b      	ldr	r3, [r1, #0]
{ 
 800208c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002090:	2300      	movs	r3, #0
{ 
 8002092:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002094:	9a03      	ldr	r2, [sp, #12]
 8002096:	40da      	lsrs	r2, r3
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 800209a:	b007      	add	sp, #28
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	9202      	str	r2, [sp, #8]
 80020a4:	9902      	ldr	r1, [sp, #8]
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	400a      	ands	r2, r1
 80020aa:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80020ac:	d100      	bne.n	80020b0 <HAL_GPIO_Init+0x28>
 80020ae:	e08c      	b.n	80021ca <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	9a01      	ldr	r2, [sp, #4]
 80020b2:	2110      	movs	r1, #16
 80020b4:	6852      	ldr	r2, [r2, #4]
 80020b6:	0016      	movs	r6, r2
 80020b8:	438e      	bics	r6, r1
 80020ba:	2e02      	cmp	r6, #2
 80020bc:	d10e      	bne.n	80020dc <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020be:	2507      	movs	r5, #7
 80020c0:	401d      	ands	r5, r3
 80020c2:	00ad      	lsls	r5, r5, #2
 80020c4:	3901      	subs	r1, #1
 80020c6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80020c8:	08dc      	lsrs	r4, r3, #3
 80020ca:	00a4      	lsls	r4, r4, #2
 80020cc:	1904      	adds	r4, r0, r4
 80020ce:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d0:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d2:	9901      	ldr	r1, [sp, #4]
 80020d4:	6909      	ldr	r1, [r1, #16]
 80020d6:	40a9      	lsls	r1, r5
 80020d8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80020da:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020dc:	2403      	movs	r4, #3
 80020de:	005f      	lsls	r7, r3, #1
 80020e0:	40bc      	lsls	r4, r7
 80020e2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80020e4:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	4025      	ands	r5, r4
 80020ea:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ec:	2503      	movs	r5, #3
 80020ee:	4015      	ands	r5, r2
 80020f0:	40bd      	lsls	r5, r7
 80020f2:	4661      	mov	r1, ip
 80020f4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80020f6:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f8:	2e01      	cmp	r6, #1
 80020fa:	d80f      	bhi.n	800211c <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020fc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80020fe:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002100:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002102:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002104:	40bd      	lsls	r5, r7
 8002106:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002108:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800210a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800210e:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002112:	2101      	movs	r1, #1
 8002114:	400d      	ands	r5, r1
 8002116:	409d      	lsls	r5, r3
 8002118:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800211a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800211c:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800211e:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002120:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002122:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002124:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002126:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002128:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800212a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800212c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212e:	420a      	tst	r2, r1
 8002130:	d04b      	beq.n	80021ca <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2101      	movs	r1, #1
 8002134:	4c26      	ldr	r4, [pc, #152]	; (80021d0 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002136:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800213a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	430d      	orrs	r5, r1
 800213e:	61a5      	str	r5, [r4, #24]
 8002140:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002142:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	400c      	ands	r4, r1
 8002146:	9405      	str	r4, [sp, #20]
 8002148:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	240f      	movs	r4, #15
 800214c:	4921      	ldr	r1, [pc, #132]	; (80021d4 <HAL_GPIO_Init+0x14c>)
 800214e:	00ad      	lsls	r5, r5, #2
 8002150:	00b6      	lsls	r6, r6, #2
 8002152:	186d      	adds	r5, r5, r1
 8002154:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002156:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002158:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215a:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800215c:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215e:	2400      	movs	r4, #0
 8002160:	4288      	cmp	r0, r1
 8002162:	d00c      	beq.n	800217e <HAL_GPIO_Init+0xf6>
 8002164:	491c      	ldr	r1, [pc, #112]	; (80021d8 <HAL_GPIO_Init+0x150>)
 8002166:	3401      	adds	r4, #1
 8002168:	4288      	cmp	r0, r1
 800216a:	d008      	beq.n	800217e <HAL_GPIO_Init+0xf6>
 800216c:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x154>)
 800216e:	3401      	adds	r4, #1
 8002170:	4288      	cmp	r0, r1
 8002172:	d004      	beq.n	800217e <HAL_GPIO_Init+0xf6>
 8002174:	491a      	ldr	r1, [pc, #104]	; (80021e0 <HAL_GPIO_Init+0x158>)
 8002176:	3403      	adds	r4, #3
 8002178:	4288      	cmp	r0, r1
 800217a:	d100      	bne.n	800217e <HAL_GPIO_Init+0xf6>
 800217c:	3c02      	subs	r4, #2
 800217e:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002180:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002182:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002184:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002186:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002188:	4c16      	ldr	r4, [pc, #88]	; (80021e4 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 800218a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800218c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800218e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002190:	03d1      	lsls	r1, r2, #15
 8002192:	d401      	bmi.n	8002198 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8002194:	003e      	movs	r6, r7
 8002196:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002198:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800219a:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 800219c:	9e00      	ldr	r6, [sp, #0]
 800219e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a0:	0391      	lsls	r1, r2, #14
 80021a2:	d401      	bmi.n	80021a8 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80021a4:	003e      	movs	r6, r7
 80021a6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80021a8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80021aa:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 80021ac:	9e00      	ldr	r6, [sp, #0]
 80021ae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b0:	02d1      	lsls	r1, r2, #11
 80021b2:	d401      	bmi.n	80021b8 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 80021b4:	003e      	movs	r6, r7
 80021b6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80021b8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80021ba:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 80021bc:	9f00      	ldr	r7, [sp, #0]
 80021be:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	0292      	lsls	r2, r2, #10
 80021c2:	d401      	bmi.n	80021c8 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80021c4:	402e      	ands	r6, r5
 80021c6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80021c8:	60e7      	str	r7, [r4, #12]
    position++;
 80021ca:	3301      	adds	r3, #1
 80021cc:	e762      	b.n	8002094 <HAL_GPIO_Init+0xc>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e8:	6900      	ldr	r0, [r0, #16]
 80021ea:	4008      	ands	r0, r1
 80021ec:	1e41      	subs	r1, r0, #1
 80021ee:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80021f0:	b2c0      	uxtb	r0, r0
  }
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d001      	beq.n	80021fc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021fa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80021fe:	e7fc      	b.n	80021fa <HAL_GPIO_WritePin+0x6>

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	0004      	movs	r4, r0
 8002204:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002206:	2800      	cmp	r0, #0
 8002208:	d102      	bne.n	8002210 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800220c:	b005      	add	sp, #20
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	07db      	lsls	r3, r3, #31
 8002214:	d42e      	bmi.n	8002274 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	079b      	lsls	r3, r3, #30
 800221a:	d47e      	bmi.n	800231a <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	071b      	lsls	r3, r3, #28
 8002220:	d500      	bpl.n	8002224 <HAL_RCC_OscConfig+0x24>
 8002222:	e0ba      	b.n	800239a <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	075b      	lsls	r3, r3, #29
 8002228:	d500      	bpl.n	800222c <HAL_RCC_OscConfig+0x2c>
 800222a:	e0dd      	b.n	80023e8 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	06db      	lsls	r3, r3, #27
 8002230:	d51a      	bpl.n	8002268 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002232:	6962      	ldr	r2, [r4, #20]
 8002234:	4db4      	ldr	r5, [pc, #720]	; (8002508 <HAL_RCC_OscConfig+0x308>)
 8002236:	2304      	movs	r3, #4
 8002238:	2a01      	cmp	r2, #1
 800223a:	d000      	beq.n	800223e <HAL_RCC_OscConfig+0x3e>
 800223c:	e149      	b.n	80024d2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800223e:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002240:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002242:	430b      	orrs	r3, r1
 8002244:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002246:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002248:	431a      	orrs	r2, r3
 800224a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800224c:	f7ff fcc2 	bl	8001bd4 <HAL_GetTick>
 8002250:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002252:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002254:	4233      	tst	r3, r6
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x5a>
 8002258:	e134      	b.n	80024c4 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800225a:	21f8      	movs	r1, #248	; 0xf8
 800225c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800225e:	69a3      	ldr	r3, [r4, #24]
 8002260:	438a      	bics	r2, r1
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4313      	orrs	r3, r2
 8002266:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	6a23      	ldr	r3, [r4, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d000      	beq.n	8002270 <HAL_RCC_OscConfig+0x70>
 800226e:	e157      	b.n	8002520 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8002270:	2000      	movs	r0, #0
 8002272:	e7cb      	b.n	800220c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002274:	210c      	movs	r1, #12
 8002276:	4da4      	ldr	r5, [pc, #656]	; (8002508 <HAL_RCC_OscConfig+0x308>)
 8002278:	686a      	ldr	r2, [r5, #4]
 800227a:	400a      	ands	r2, r1
 800227c:	2a04      	cmp	r2, #4
 800227e:	d006      	beq.n	800228e <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002280:	686b      	ldr	r3, [r5, #4]
 8002282:	400b      	ands	r3, r1
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_RCC_OscConfig+0x9c>
 8002288:	686b      	ldr	r3, [r5, #4]
 800228a:	03db      	lsls	r3, r3, #15
 800228c:	d506      	bpl.n	800229c <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228e:	682b      	ldr	r3, [r5, #0]
 8002290:	039b      	lsls	r3, r3, #14
 8002292:	d5c0      	bpl.n	8002216 <HAL_RCC_OscConfig+0x16>
 8002294:	6863      	ldr	r3, [r4, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1bd      	bne.n	8002216 <HAL_RCC_OscConfig+0x16>
 800229a:	e7b6      	b.n	800220a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d113      	bne.n	80022ca <HAL_RCC_OscConfig+0xca>
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	682a      	ldr	r2, [r5, #0]
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	4313      	orrs	r3, r2
 80022aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc92 	bl	8001bd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80022b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b4:	02b6      	lsls	r6, r6, #10
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	4233      	tst	r3, r6
 80022ba:	d1ac      	bne.n	8002216 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fc8a 	bl	8001bd4 <HAL_GetTick>
 80022c0:	1bc0      	subs	r0, r0, r7
 80022c2:	2864      	cmp	r0, #100	; 0x64
 80022c4:	d9f7      	bls.n	80022b6 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
 80022c8:	e7a0      	b.n	800220c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_OscConfig+0xfa>
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	4a8e      	ldr	r2, [pc, #568]	; (800250c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	4013      	ands	r3, r2
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	4a8d      	ldr	r2, [pc, #564]	; (8002510 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022dc:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	4013      	ands	r3, r2
 80022e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022e2:	f7ff fc77 	bl	8001bd4 <HAL_GetTick>
 80022e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	4233      	tst	r3, r6
 80022ec:	d093      	beq.n	8002216 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ee:	f7ff fc71 	bl	8001bd4 <HAL_GetTick>
 80022f2:	1bc0      	subs	r0, r0, r7
 80022f4:	2864      	cmp	r0, #100	; 0x64
 80022f6:	d9f7      	bls.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 80022f8:	e7e5      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x10a>
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	682a      	ldr	r2, [r5, #0]
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	4313      	orrs	r3, r2
 8002306:	602b      	str	r3, [r5, #0]
 8002308:	e7cb      	b.n	80022a2 <HAL_RCC_OscConfig+0xa2>
 800230a:	682b      	ldr	r3, [r5, #0]
 800230c:	4a7f      	ldr	r2, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x30c>)
 800230e:	4013      	ands	r3, r2
 8002310:	602b      	str	r3, [r5, #0]
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	4a7e      	ldr	r2, [pc, #504]	; (8002510 <HAL_RCC_OscConfig+0x310>)
 8002316:	4013      	ands	r3, r2
 8002318:	e7c7      	b.n	80022aa <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800231a:	220c      	movs	r2, #12
 800231c:	4d7a      	ldr	r5, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x308>)
 800231e:	686b      	ldr	r3, [r5, #4]
 8002320:	4213      	tst	r3, r2
 8002322:	d006      	beq.n	8002332 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002324:	686b      	ldr	r3, [r5, #4]
 8002326:	4013      	ands	r3, r2
 8002328:	2b08      	cmp	r3, #8
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x150>
 800232c:	686b      	ldr	r3, [r5, #4]
 800232e:	03db      	lsls	r3, r3, #15
 8002330:	d40e      	bmi.n	8002350 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	079b      	lsls	r3, r3, #30
 8002336:	d503      	bpl.n	8002340 <HAL_RCC_OscConfig+0x140>
 8002338:	68e3      	ldr	r3, [r4, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d000      	beq.n	8002340 <HAL_RCC_OscConfig+0x140>
 800233e:	e764      	b.n	800220a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	21f8      	movs	r1, #248	; 0xf8
 8002342:	682a      	ldr	r2, [r5, #0]
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	438a      	bics	r2, r1
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4313      	orrs	r3, r2
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	e765      	b.n	800221c <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002350:	68e2      	ldr	r2, [r4, #12]
 8002352:	2301      	movs	r3, #1
 8002354:	2a00      	cmp	r2, #0
 8002356:	d00f      	beq.n	8002378 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002358:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800235c:	4313      	orrs	r3, r2
 800235e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002360:	f7ff fc38 	bl	8001bd4 <HAL_GetTick>
 8002364:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	4233      	tst	r3, r6
 800236a:	d1e9      	bne.n	8002340 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236c:	f7ff fc32 	bl	8001bd4 <HAL_GetTick>
 8002370:	1bc0      	subs	r0, r0, r7
 8002372:	2802      	cmp	r0, #2
 8002374:	d9f7      	bls.n	8002366 <HAL_RCC_OscConfig+0x166>
 8002376:	e7a6      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8002378:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800237c:	439a      	bics	r2, r3
 800237e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002380:	f7ff fc28 	bl	8001bd4 <HAL_GetTick>
 8002384:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	4233      	tst	r3, r6
 800238a:	d100      	bne.n	800238e <HAL_RCC_OscConfig+0x18e>
 800238c:	e746      	b.n	800221c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fc21 	bl	8001bd4 <HAL_GetTick>
 8002392:	1bc0      	subs	r0, r0, r7
 8002394:	2802      	cmp	r0, #2
 8002396:	d9f6      	bls.n	8002386 <HAL_RCC_OscConfig+0x186>
 8002398:	e795      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239a:	69e2      	ldr	r2, [r4, #28]
 800239c:	2301      	movs	r3, #1
 800239e:	4d5a      	ldr	r5, [pc, #360]	; (8002508 <HAL_RCC_OscConfig+0x308>)
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80023a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80023a8:	4313      	orrs	r3, r2
 80023aa:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80023ac:	f7ff fc12 	bl	8001bd4 <HAL_GetTick>
 80023b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023b4:	4233      	tst	r3, r6
 80023b6:	d000      	beq.n	80023ba <HAL_RCC_OscConfig+0x1ba>
 80023b8:	e734      	b.n	8002224 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc0b 	bl	8001bd4 <HAL_GetTick>
 80023be:	1bc0      	subs	r0, r0, r7
 80023c0:	2802      	cmp	r0, #2
 80023c2:	d9f6      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
 80023c4:	e77f      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 80023c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80023ca:	439a      	bics	r2, r3
 80023cc:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80023ce:	f7ff fc01 	bl	8001bd4 <HAL_GetTick>
 80023d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023d6:	4233      	tst	r3, r6
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x1dc>
 80023da:	e723      	b.n	8002224 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fbfa 	bl	8001bd4 <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9f6      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1d4>
 80023e6:	e76e      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ec:	4d46      	ldr	r5, [pc, #280]	; (8002508 <HAL_RCC_OscConfig+0x308>)
 80023ee:	0552      	lsls	r2, r2, #21
 80023f0:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f4:	4213      	tst	r3, r2
 80023f6:	d108      	bne.n	800240a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	69eb      	ldr	r3, [r5, #28]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61eb      	str	r3, [r5, #28]
 80023fe:	69eb      	ldr	r3, [r5, #28]
 8002400:	4013      	ands	r3, r2
 8002402:	9303      	str	r3, [sp, #12]
 8002404:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	2780      	movs	r7, #128	; 0x80
 800240c:	4e41      	ldr	r6, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x314>)
 800240e:	007f      	lsls	r7, r7, #1
 8002410:	6833      	ldr	r3, [r6, #0]
 8002412:	423b      	tst	r3, r7
 8002414:	d006      	beq.n	8002424 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	68a3      	ldr	r3, [r4, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d113      	bne.n	8002444 <HAL_RCC_OscConfig+0x244>
 800241c:	6a2a      	ldr	r2, [r5, #32]
 800241e:	4313      	orrs	r3, r2
 8002420:	622b      	str	r3, [r5, #32]
 8002422:	e030      	b.n	8002486 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002424:	6833      	ldr	r3, [r6, #0]
 8002426:	433b      	orrs	r3, r7
 8002428:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800242a:	f7ff fbd3 	bl	8001bd4 <HAL_GetTick>
 800242e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	6833      	ldr	r3, [r6, #0]
 8002432:	423b      	tst	r3, r7
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fbcd 	bl	8001bd4 <HAL_GetTick>
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	1ac0      	subs	r0, r0, r3
 800243e:	2864      	cmp	r0, #100	; 0x64
 8002440:	d9f6      	bls.n	8002430 <HAL_RCC_OscConfig+0x230>
 8002442:	e740      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
 8002444:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <HAL_RCC_OscConfig+0x274>
 800244a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244e:	4393      	bics	r3, r2
 8002450:	622b      	str	r3, [r5, #32]
 8002452:	6a2b      	ldr	r3, [r5, #32]
 8002454:	3203      	adds	r2, #3
 8002456:	4393      	bics	r3, r2
 8002458:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800245a:	f7ff fbbb 	bl	8001bd4 <HAL_GetTick>
 800245e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	6a2b      	ldr	r3, [r5, #32]
 8002462:	423b      	tst	r3, r7
 8002464:	d025      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fbb5 	bl	8001bd4 <HAL_GetTick>
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_OscConfig+0x318>)
 800246c:	1b80      	subs	r0, r0, r6
 800246e:	4298      	cmp	r0, r3
 8002470:	d9f6      	bls.n	8002460 <HAL_RCC_OscConfig+0x260>
 8002472:	e728      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	2b05      	cmp	r3, #5
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x290>
 8002478:	6a29      	ldr	r1, [r5, #32]
 800247a:	3b01      	subs	r3, #1
 800247c:	430b      	orrs	r3, r1
 800247e:	622b      	str	r3, [r5, #32]
 8002480:	6a2b      	ldr	r3, [r5, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002486:	f7ff fba5 	bl	8001bd4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800248c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	e00d      	b.n	80024ac <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	6a2b      	ldr	r3, [r5, #32]
 8002492:	4393      	bics	r3, r2
 8002494:	2204      	movs	r2, #4
 8002496:	622b      	str	r3, [r5, #32]
 8002498:	6a2b      	ldr	r3, [r5, #32]
 800249a:	4393      	bics	r3, r2
 800249c:	e7c0      	b.n	8002420 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fb99 	bl	8001bd4 <HAL_GetTick>
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x318>)
 80024a4:	1b80      	subs	r0, r0, r6
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d900      	bls.n	80024ac <HAL_RCC_OscConfig+0x2ac>
 80024aa:	e70c      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	6a2b      	ldr	r3, [r5, #32]
 80024ae:	423b      	tst	r3, r7
 80024b0:	d0f5      	beq.n	800249e <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 80024b2:	9b00      	ldr	r3, [sp, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d000      	beq.n	80024ba <HAL_RCC_OscConfig+0x2ba>
 80024b8:	e6b8      	b.n	800222c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	69eb      	ldr	r3, [r5, #28]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x31c>)
 80024be:	4013      	ands	r3, r2
 80024c0:	61eb      	str	r3, [r5, #28]
 80024c2:	e6b3      	b.n	800222c <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024c4:	f7ff fb86 	bl	8001bd4 <HAL_GetTick>
 80024c8:	1bc0      	subs	r0, r0, r7
 80024ca:	2802      	cmp	r0, #2
 80024cc:	d800      	bhi.n	80024d0 <HAL_RCC_OscConfig+0x2d0>
 80024ce:	e6c0      	b.n	8002252 <HAL_RCC_OscConfig+0x52>
 80024d0:	e6f9      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024d2:	3205      	adds	r2, #5
 80024d4:	d103      	bne.n	80024de <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 80024d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024d8:	439a      	bics	r2, r3
 80024da:	636a      	str	r2, [r5, #52]	; 0x34
 80024dc:	e6bd      	b.n	800225a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80024de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024e0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80024e2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80024e4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80024e6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80024e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024ea:	4393      	bics	r3, r2
 80024ec:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80024ee:	f7ff fb71 	bl	8001bd4 <HAL_GetTick>
 80024f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80024f6:	4233      	tst	r3, r6
 80024f8:	d100      	bne.n	80024fc <HAL_RCC_OscConfig+0x2fc>
 80024fa:	e6b5      	b.n	8002268 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024fc:	f7ff fb6a 	bl	8001bd4 <HAL_GetTick>
 8002500:	1bc0      	subs	r0, r0, r7
 8002502:	2802      	cmp	r0, #2
 8002504:	d9f6      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f4>
 8002506:	e6de      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
 8002508:	40021000 	.word	0x40021000
 800250c:	fffeffff 	.word	0xfffeffff
 8002510:	fffbffff 	.word	0xfffbffff
 8002514:	40007000 	.word	0x40007000
 8002518:	00001388 	.word	0x00001388
 800251c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	200c      	movs	r0, #12
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_RCC_OscConfig+0x3f8>)
 8002524:	6851      	ldr	r1, [r2, #4]
 8002526:	0015      	movs	r5, r2
 8002528:	4001      	ands	r1, r0
 800252a:	2908      	cmp	r1, #8
 800252c:	d047      	beq.n	80025be <HAL_RCC_OscConfig+0x3be>
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002530:	2b02      	cmp	r3, #2
 8002532:	d132      	bne.n	800259a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8002534:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002538:	4013      	ands	r3, r2
 800253a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800253c:	f7ff fb4a 	bl	8001bd4 <HAL_GetTick>
 8002540:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	04b6      	lsls	r6, r6, #18
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	4233      	tst	r3, r6
 8002548:	d121      	bne.n	800258e <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	220f      	movs	r2, #15
 800254c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800254e:	4393      	bics	r3, r2
 8002550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002552:	4313      	orrs	r3, r2
 8002554:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002556:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800255a:	686a      	ldr	r2, [r5, #4]
 800255c:	430b      	orrs	r3, r1
 800255e:	4928      	ldr	r1, [pc, #160]	; (8002600 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002562:	400a      	ands	r2, r1
 8002564:	4313      	orrs	r3, r2
 8002566:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	682a      	ldr	r2, [r5, #0]
 800256c:	045b      	lsls	r3, r3, #17
 800256e:	4313      	orrs	r3, r2
 8002570:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002572:	f7ff fb2f 	bl	8001bd4 <HAL_GetTick>
 8002576:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002578:	04a4      	lsls	r4, r4, #18
 800257a:	682b      	ldr	r3, [r5, #0]
 800257c:	4223      	tst	r3, r4
 800257e:	d000      	beq.n	8002582 <HAL_RCC_OscConfig+0x382>
 8002580:	e676      	b.n	8002270 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7ff fb27 	bl	8001bd4 <HAL_GetTick>
 8002586:	1b80      	subs	r0, r0, r6
 8002588:	2802      	cmp	r0, #2
 800258a:	d9f6      	bls.n	800257a <HAL_RCC_OscConfig+0x37a>
 800258c:	e69b      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f7ff fb21 	bl	8001bd4 <HAL_GetTick>
 8002592:	1bc0      	subs	r0, r0, r7
 8002594:	2802      	cmp	r0, #2
 8002596:	d9d5      	bls.n	8002544 <HAL_RCC_OscConfig+0x344>
 8002598:	e695      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800259a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800259e:	4013      	ands	r3, r2
 80025a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025a2:	f7ff fb17 	bl	8001bd4 <HAL_GetTick>
 80025a6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	04a4      	lsls	r4, r4, #18
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	4223      	tst	r3, r4
 80025ae:	d100      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3b2>
 80025b0:	e65e      	b.n	8002270 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fb0f 	bl	8001bd4 <HAL_GetTick>
 80025b6:	1b80      	subs	r0, r0, r6
 80025b8:	2802      	cmp	r0, #2
 80025ba:	d9f6      	bls.n	80025aa <HAL_RCC_OscConfig+0x3aa>
 80025bc:	e683      	b.n	80022c6 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 80025be:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d100      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3c6>
 80025c4:	e622      	b.n	800220c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80025c8:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80025cc:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80025ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	4019      	ands	r1, r3
        return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	42a9      	cmp	r1, r5
 80025d6:	d000      	beq.n	80025da <HAL_RCC_OscConfig+0x3da>
 80025d8:	e618      	b.n	800220c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025da:	210f      	movs	r1, #15
 80025dc:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025e0:	428a      	cmp	r2, r1
 80025e2:	d000      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3e6>
 80025e4:	e612      	b.n	800220c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025e6:	20f0      	movs	r0, #240	; 0xf0
 80025e8:	0380      	lsls	r0, r0, #14
 80025ea:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80025ee:	1a1b      	subs	r3, r3, r0
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 80025f4:	b2d8      	uxtb	r0, r3
 80025f6:	e609      	b.n	800220c <HAL_RCC_OscConfig+0xc>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	ffc2ffff 	.word	0xffc2ffff

08002604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002606:	4c14      	ldr	r4, [pc, #80]	; (8002658 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002608:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800260a:	2210      	movs	r2, #16
 800260c:	0021      	movs	r1, r4
 800260e:	4668      	mov	r0, sp
 8002610:	f000 f8ee 	bl	80027f0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002614:	0021      	movs	r1, r4
 8002616:	ad04      	add	r5, sp, #16
 8002618:	2210      	movs	r2, #16
 800261a:	3110      	adds	r1, #16
 800261c:	0028      	movs	r0, r5
 800261e:	f000 f8e7 	bl	80027f0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002622:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002624:	4e0d      	ldr	r6, [pc, #52]	; (800265c <HAL_RCC_GetSysClockFreq+0x58>)
 8002626:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002628:	401a      	ands	r2, r3
 800262a:	2a08      	cmp	r2, #8
 800262c:	d111      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800262e:	200f      	movs	r0, #15
 8002630:	466a      	mov	r2, sp
 8002632:	0c99      	lsrs	r1, r3, #18
 8002634:	4001      	ands	r1, r0
 8002636:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002638:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800263a:	4002      	ands	r2, r0
 800263c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800263e:	03db      	lsls	r3, r3, #15
 8002640:	d505      	bpl.n	800264e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002644:	f7fd fd6a 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002648:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800264a:	b008      	add	sp, #32
 800264c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <HAL_RCC_GetSysClockFreq+0x60>)
 8002650:	e7fa      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002652:	4803      	ldr	r0, [pc, #12]	; (8002660 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002654:	e7f9      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x46>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	08002890 	.word	0x08002890
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	003d0900 	.word	0x003d0900

08002668 <HAL_RCC_ClockConfig>:
{
 8002668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266a:	0005      	movs	r5, r0
 800266c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800266e:	2800      	cmp	r0, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002672:	2001      	movs	r0, #1
}
 8002674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002676:	2201      	movs	r2, #1
 8002678:	4c37      	ldr	r4, [pc, #220]	; (8002758 <HAL_RCC_ClockConfig+0xf0>)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	4013      	ands	r3, r2
 800267e:	428b      	cmp	r3, r1
 8002680:	d31c      	bcc.n	80026bc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002682:	6829      	ldr	r1, [r5, #0]
 8002684:	078b      	lsls	r3, r1, #30
 8002686:	d422      	bmi.n	80026ce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002688:	07cb      	lsls	r3, r1, #31
 800268a:	d42f      	bmi.n	80026ec <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	2301      	movs	r3, #1
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	401a      	ands	r2, r3
 8002692:	42ba      	cmp	r2, r7
 8002694:	d851      	bhi.n	800273a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	4c30      	ldr	r4, [pc, #192]	; (800275c <HAL_RCC_ClockConfig+0xf4>)
 800269a:	075b      	lsls	r3, r3, #29
 800269c:	d454      	bmi.n	8002748 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800269e:	f7ff ffb1 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <HAL_RCC_ClockConfig+0xf8>)
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	0f1b      	lsrs	r3, r3, #28
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	40d8      	lsrs	r0, r3
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_ClockConfig+0xfc>)
 80026b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff fa4e 	bl	8001b54 <HAL_InitTick>
  return HAL_OK;
 80026b8:	2000      	movs	r0, #0
 80026ba:	e7db      	b.n	8002674 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	4393      	bics	r3, r2
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	4013      	ands	r3, r2
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d1d2      	bne.n	8002672 <HAL_RCC_ClockConfig+0xa>
 80026cc:	e7d9      	b.n	8002682 <HAL_RCC_ClockConfig+0x1a>
 80026ce:	4a23      	ldr	r2, [pc, #140]	; (800275c <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	074b      	lsls	r3, r1, #29
 80026d2:	d504      	bpl.n	80026de <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026d4:	23e0      	movs	r3, #224	; 0xe0
 80026d6:	6850      	ldr	r0, [r2, #4]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4303      	orrs	r3, r0
 80026dc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026de:	20f0      	movs	r0, #240	; 0xf0
 80026e0:	6853      	ldr	r3, [r2, #4]
 80026e2:	4383      	bics	r3, r0
 80026e4:	68a8      	ldr	r0, [r5, #8]
 80026e6:	4303      	orrs	r3, r0
 80026e8:	6053      	str	r3, [r2, #4]
 80026ea:	e7cd      	b.n	8002688 <HAL_RCC_ClockConfig+0x20>
 80026ec:	4e1b      	ldr	r6, [pc, #108]	; (800275c <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f0:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	2a01      	cmp	r2, #1
 80026f4:	d119      	bne.n	800272a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	039b      	lsls	r3, r3, #14
 80026f8:	d5bb      	bpl.n	8002672 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	2103      	movs	r1, #3
 80026fc:	6873      	ldr	r3, [r6, #4]
 80026fe:	438b      	bics	r3, r1
 8002700:	4313      	orrs	r3, r2
 8002702:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002704:	f7ff fa66 	bl	8001bd4 <HAL_GetTick>
 8002708:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	230c      	movs	r3, #12
 800270c:	6872      	ldr	r2, [r6, #4]
 800270e:	401a      	ands	r2, r3
 8002710:	686b      	ldr	r3, [r5, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d0b9      	beq.n	800268c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7ff fa5c 	bl	8001bd4 <HAL_GetTick>
 800271c:	9b01      	ldr	r3, [sp, #4]
 800271e:	1ac0      	subs	r0, r0, r3
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_ClockConfig+0x100>)
 8002722:	4298      	cmp	r0, r3
 8002724:	d9f1      	bls.n	800270a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
 8002728:	e7a4      	b.n	8002674 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	2a02      	cmp	r2, #2
 800272c:	d102      	bne.n	8002734 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	019b      	lsls	r3, r3, #6
 8002730:	d4e3      	bmi.n	80026fa <HAL_RCC_ClockConfig+0x92>
 8002732:	e79e      	b.n	8002672 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	079b      	lsls	r3, r3, #30
 8002736:	d4e0      	bmi.n	80026fa <HAL_RCC_ClockConfig+0x92>
 8002738:	e79b      	b.n	8002672 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	439a      	bics	r2, r3
 800273e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	421a      	tst	r2, r3
 8002744:	d0a7      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2e>
 8002746:	e794      	b.n	8002672 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	6863      	ldr	r3, [r4, #4]
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_RCC_ClockConfig+0x104>)
 800274c:	4013      	ands	r3, r2
 800274e:	68ea      	ldr	r2, [r5, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	6063      	str	r3, [r4, #4]
 8002754:	e7a3      	b.n	800269e <HAL_RCC_ClockConfig+0x36>
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40022000 	.word	0x40022000
 800275c:	40021000 	.word	0x40021000
 8002760:	08003e7b 	.word	0x08003e7b
 8002764:	20000020 	.word	0x20000020
 8002768:	00001388 	.word	0x00001388
 800276c:	fffff8ff 	.word	0xfffff8ff

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	2600      	movs	r6, #0
 8002774:	4d0c      	ldr	r5, [pc, #48]	; (80027a8 <__libc_init_array+0x38>)
 8002776:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	2600      	movs	r6, #0
 8002782:	f000 f879 	bl	8002878 <_init>
 8002786:	4d0a      	ldr	r5, [pc, #40]	; (80027b0 <__libc_init_array+0x40>)
 8002788:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <__libc_init_array+0x44>)
 800278a:	1b64      	subs	r4, r4, r5
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	00b3      	lsls	r3, r6, #2
 8002796:	58eb      	ldr	r3, [r5, r3]
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	00b3      	lsls	r3, r6, #2
 80027a0:	58eb      	ldr	r3, [r5, r3]
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08003eb0 	.word	0x08003eb0
 80027ac:	08003eb0 	.word	0x08003eb0
 80027b0:	08003eb0 	.word	0x08003eb0
 80027b4:	08003eb4 	.word	0x08003eb4

080027b8 <__itoa>:
 80027b8:	1e93      	subs	r3, r2, #2
 80027ba:	b510      	push	{r4, lr}
 80027bc:	000c      	movs	r4, r1
 80027be:	2b22      	cmp	r3, #34	; 0x22
 80027c0:	d904      	bls.n	80027cc <__itoa+0x14>
 80027c2:	2300      	movs	r3, #0
 80027c4:	001c      	movs	r4, r3
 80027c6:	700b      	strb	r3, [r1, #0]
 80027c8:	0020      	movs	r0, r4
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	2a0a      	cmp	r2, #10
 80027ce:	d109      	bne.n	80027e4 <__itoa+0x2c>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	da07      	bge.n	80027e4 <__itoa+0x2c>
 80027d4:	232d      	movs	r3, #45	; 0x2d
 80027d6:	700b      	strb	r3, [r1, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	4240      	negs	r0, r0
 80027dc:	1861      	adds	r1, r4, r1
 80027de:	f000 f819 	bl	8002814 <__utoa>
 80027e2:	e7f1      	b.n	80027c8 <__itoa+0x10>
 80027e4:	2100      	movs	r1, #0
 80027e6:	e7f9      	b.n	80027dc <__itoa+0x24>

080027e8 <itoa>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	f7ff ffe5 	bl	80027b8 <__itoa>
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <memcpy>:
 80027f0:	2300      	movs	r3, #0
 80027f2:	b510      	push	{r4, lr}
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d100      	bne.n	80027fa <memcpy+0xa>
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	5ccc      	ldrb	r4, [r1, r3]
 80027fc:	54c4      	strb	r4, [r0, r3]
 80027fe:	3301      	adds	r3, #1
 8002800:	e7f8      	b.n	80027f4 <memcpy+0x4>

08002802 <memset>:
 8002802:	0003      	movs	r3, r0
 8002804:	1812      	adds	r2, r2, r0
 8002806:	4293      	cmp	r3, r2
 8002808:	d100      	bne.n	800280c <memset+0xa>
 800280a:	4770      	bx	lr
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	e7f9      	b.n	8002806 <memset+0x4>
	...

08002814 <__utoa>:
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	0017      	movs	r7, r2
 8002818:	b08d      	sub	sp, #52	; 0x34
 800281a:	2225      	movs	r2, #37	; 0x25
 800281c:	0006      	movs	r6, r0
 800281e:	000d      	movs	r5, r1
 8002820:	a802      	add	r0, sp, #8
 8002822:	4914      	ldr	r1, [pc, #80]	; (8002874 <__utoa+0x60>)
 8002824:	f7ff ffe4 	bl	80027f0 <memcpy>
 8002828:	aa02      	add	r2, sp, #8
 800282a:	1ebb      	subs	r3, r7, #2
 800282c:	2400      	movs	r4, #0
 800282e:	9201      	str	r2, [sp, #4]
 8002830:	2b22      	cmp	r3, #34	; 0x22
 8002832:	d905      	bls.n	8002840 <__utoa+0x2c>
 8002834:	702c      	strb	r4, [r5, #0]
 8002836:	0025      	movs	r5, r4
 8002838:	0028      	movs	r0, r5
 800283a:	b00d      	add	sp, #52	; 0x34
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	0014      	movs	r4, r2
 8002840:	0030      	movs	r0, r6
 8002842:	0039      	movs	r1, r7
 8002844:	f7fd fcf0 	bl	8000228 <__aeabi_uidivmod>
 8002848:	4684      	mov	ip, r0
 800284a:	9801      	ldr	r0, [sp, #4]
 800284c:	1c62      	adds	r2, r4, #1
 800284e:	18ab      	adds	r3, r5, r2
 8002850:	5c41      	ldrb	r1, [r0, r1]
 8002852:	1e5e      	subs	r6, r3, #1
 8002854:	7031      	strb	r1, [r6, #0]
 8002856:	4666      	mov	r6, ip
 8002858:	2e00      	cmp	r6, #0
 800285a:	d1f0      	bne.n	800283e <__utoa+0x2a>
 800285c:	701e      	strb	r6, [r3, #0]
 800285e:	002b      	movs	r3, r5
 8002860:	1b5a      	subs	r2, r3, r5
 8002862:	4294      	cmp	r4, r2
 8002864:	dde8      	ble.n	8002838 <__utoa+0x24>
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	5d29      	ldrb	r1, [r5, r4]
 800286a:	7019      	strb	r1, [r3, #0]
 800286c:	552a      	strb	r2, [r5, r4]
 800286e:	3301      	adds	r3, #1
 8002870:	3c01      	subs	r4, #1
 8002872:	e7f5      	b.n	8002860 <__utoa+0x4c>
 8002874:	08003e8b 	.word	0x08003e8b

08002878 <_init>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr

08002884 <_fini>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr
